
FreeRTOS_STM32_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08105940  08105940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08105a2c  08105a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08105a30  08105a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  10000000  08105a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004ad8  10000078  08105aac  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10004b50  08105aac  00024b50  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d140  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000034cd  00000000  00000000  0003d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000016a8  00000000  00000000  000406b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001550  00000000  00000000  00041d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a312  00000000  00000000  000432b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a775  00000000  00000000  0007d5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001863c7  00000000  00000000  00097d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0021e0fe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006328  00000000  00000000  0021e150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08105928 	.word	0x08105928

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	08105928 	.word	0x08105928

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	; (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	; (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	; (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	; (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100314:	f000 fa5c 	bl	81007d0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100318:	f000 f86a 	bl	81003f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 810031c:	f000 f828 	bl	8100370 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET) ;
 8100320:	2201      	movs	r2, #1
 8100322:	2140      	movs	r1, #64	; 0x40
 8100324:	480b      	ldr	r0, [pc, #44]	; (8100354 <main+0x44>)
 8100326:	f000 fd61 	bl	8100dec <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 810032a:	f002 fc85 	bl	8102c38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(vMain, NULL, &MainTask_attributes);
 810032e:	4a0a      	ldr	r2, [pc, #40]	; (8100358 <main+0x48>)
 8100330:	2100      	movs	r1, #0
 8100332:	480a      	ldr	r0, [pc, #40]	; (810035c <main+0x4c>)
 8100334:	f002 fcca 	bl	8102ccc <osThreadNew>
 8100338:	4603      	mov	r3, r0
 810033a:	4a09      	ldr	r2, [pc, #36]	; (8100360 <main+0x50>)
 810033c:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(vCommunication, NULL, &Communication_attributes);
 810033e:	4a09      	ldr	r2, [pc, #36]	; (8100364 <main+0x54>)
 8100340:	2100      	movs	r1, #0
 8100342:	4809      	ldr	r0, [pc, #36]	; (8100368 <main+0x58>)
 8100344:	f002 fcc2 	bl	8102ccc <osThreadNew>
 8100348:	4603      	mov	r3, r0
 810034a:	4a08      	ldr	r2, [pc, #32]	; (810036c <main+0x5c>)
 810034c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 810034e:	f002 fc97 	bl	8102c80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100352:	e7fe      	b.n	8100352 <main+0x42>
 8100354:	58021800 	.word	0x58021800
 8100358:	08105984 	.word	0x08105984
 810035c:	081004f1 	.word	0x081004f1
 8100360:	100000e0 	.word	0x100000e0
 8100364:	081059a8 	.word	0x081059a8
 8100368:	08100521 	.word	0x08100521
 810036c:	100000e4 	.word	0x100000e4

08100370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8100370:	b580      	push	{r7, lr}
 8100372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100374:	4b1b      	ldr	r3, [pc, #108]	; (81003e4 <MX_I2C1_Init+0x74>)
 8100376:	4a1c      	ldr	r2, [pc, #112]	; (81003e8 <MX_I2C1_Init+0x78>)
 8100378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 810037a:	4b1a      	ldr	r3, [pc, #104]	; (81003e4 <MX_I2C1_Init+0x74>)
 810037c:	4a1b      	ldr	r2, [pc, #108]	; (81003ec <MX_I2C1_Init+0x7c>)
 810037e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8100380:	4b18      	ldr	r3, [pc, #96]	; (81003e4 <MX_I2C1_Init+0x74>)
 8100382:	2200      	movs	r2, #0
 8100384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100386:	4b17      	ldr	r3, [pc, #92]	; (81003e4 <MX_I2C1_Init+0x74>)
 8100388:	2201      	movs	r2, #1
 810038a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810038c:	4b15      	ldr	r3, [pc, #84]	; (81003e4 <MX_I2C1_Init+0x74>)
 810038e:	2200      	movs	r2, #0
 8100390:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8100392:	4b14      	ldr	r3, [pc, #80]	; (81003e4 <MX_I2C1_Init+0x74>)
 8100394:	2200      	movs	r2, #0
 8100396:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100398:	4b12      	ldr	r3, [pc, #72]	; (81003e4 <MX_I2C1_Init+0x74>)
 810039a:	2200      	movs	r2, #0
 810039c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810039e:	4b11      	ldr	r3, [pc, #68]	; (81003e4 <MX_I2C1_Init+0x74>)
 81003a0:	2200      	movs	r2, #0
 81003a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81003a4:	4b0f      	ldr	r3, [pc, #60]	; (81003e4 <MX_I2C1_Init+0x74>)
 81003a6:	2200      	movs	r2, #0
 81003a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81003aa:	480e      	ldr	r0, [pc, #56]	; (81003e4 <MX_I2C1_Init+0x74>)
 81003ac:	f000 fd51 	bl	8100e52 <HAL_I2C_Init>
 81003b0:	4603      	mov	r3, r0
 81003b2:	2b00      	cmp	r3, #0
 81003b4:	d001      	beq.n	81003ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81003b6:	f000 f8cd 	bl	8100554 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81003ba:	2100      	movs	r1, #0
 81003bc:	4809      	ldr	r0, [pc, #36]	; (81003e4 <MX_I2C1_Init+0x74>)
 81003be:	f000 fdd7 	bl	8100f70 <HAL_I2CEx_ConfigAnalogFilter>
 81003c2:	4603      	mov	r3, r0
 81003c4:	2b00      	cmp	r3, #0
 81003c6:	d001      	beq.n	81003cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81003c8:	f000 f8c4 	bl	8100554 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81003cc:	2100      	movs	r1, #0
 81003ce:	4805      	ldr	r0, [pc, #20]	; (81003e4 <MX_I2C1_Init+0x74>)
 81003d0:	f000 fe19 	bl	8101006 <HAL_I2CEx_ConfigDigitalFilter>
 81003d4:	4603      	mov	r3, r0
 81003d6:	2b00      	cmp	r3, #0
 81003d8:	d001      	beq.n	81003de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81003da:	f000 f8bb 	bl	8100554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81003de:	bf00      	nop
 81003e0:	bd80      	pop	{r7, pc}
 81003e2:	bf00      	nop
 81003e4:	10000094 	.word	0x10000094
 81003e8:	40005400 	.word	0x40005400
 81003ec:	00707cbb 	.word	0x00707cbb

081003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003f0:	b580      	push	{r7, lr}
 81003f2:	b088      	sub	sp, #32
 81003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003f6:	f107 030c 	add.w	r3, r7, #12
 81003fa:	2200      	movs	r2, #0
 81003fc:	601a      	str	r2, [r3, #0]
 81003fe:	605a      	str	r2, [r3, #4]
 8100400:	609a      	str	r2, [r3, #8]
 8100402:	60da      	str	r2, [r3, #12]
 8100404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100406:	4b36      	ldr	r3, [pc, #216]	; (81004e0 <MX_GPIO_Init+0xf0>)
 8100408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810040c:	4a34      	ldr	r2, [pc, #208]	; (81004e0 <MX_GPIO_Init+0xf0>)
 810040e:	f043 0301 	orr.w	r3, r3, #1
 8100412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100416:	4b32      	ldr	r3, [pc, #200]	; (81004e0 <MX_GPIO_Init+0xf0>)
 8100418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810041c:	f003 0301 	and.w	r3, r3, #1
 8100420:	60bb      	str	r3, [r7, #8]
 8100422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100424:	4b2e      	ldr	r3, [pc, #184]	; (81004e0 <MX_GPIO_Init+0xf0>)
 8100426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810042a:	4a2d      	ldr	r2, [pc, #180]	; (81004e0 <MX_GPIO_Init+0xf0>)
 810042c:	f043 0302 	orr.w	r3, r3, #2
 8100430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100434:	4b2a      	ldr	r3, [pc, #168]	; (81004e0 <MX_GPIO_Init+0xf0>)
 8100436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810043a:	f003 0302 	and.w	r3, r3, #2
 810043e:	607b      	str	r3, [r7, #4]
 8100440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100442:	4b27      	ldr	r3, [pc, #156]	; (81004e0 <MX_GPIO_Init+0xf0>)
 8100444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100448:	4a25      	ldr	r2, [pc, #148]	; (81004e0 <MX_GPIO_Init+0xf0>)
 810044a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100452:	4b23      	ldr	r3, [pc, #140]	; (81004e0 <MX_GPIO_Init+0xf0>)
 8100454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810045c:	603b      	str	r3, [r7, #0]
 810045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8100460:	2200      	movs	r2, #0
 8100462:	2120      	movs	r1, #32
 8100464:	481f      	ldr	r0, [pc, #124]	; (81004e4 <MX_GPIO_Init+0xf4>)
 8100466:	f000 fcc1 	bl	8100dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 810046a:	2200      	movs	r2, #0
 810046c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100470:	481d      	ldr	r0, [pc, #116]	; (81004e8 <MX_GPIO_Init+0xf8>)
 8100472:	f000 fcbb 	bl	8100dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8100476:	2200      	movs	r2, #0
 8100478:	2140      	movs	r1, #64	; 0x40
 810047a:	481c      	ldr	r0, [pc, #112]	; (81004ec <MX_GPIO_Init+0xfc>)
 810047c:	f000 fcb6 	bl	8100dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8100480:	2320      	movs	r3, #32
 8100482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100484:	2301      	movs	r3, #1
 8100486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100488:	2300      	movs	r3, #0
 810048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810048c:	2300      	movs	r3, #0
 810048e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100490:	f107 030c 	add.w	r3, r7, #12
 8100494:	4619      	mov	r1, r3
 8100496:	4813      	ldr	r0, [pc, #76]	; (81004e4 <MX_GPIO_Init+0xf4>)
 8100498:	f000 faf8 	bl	8100a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 810049c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81004a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81004a2:	2301      	movs	r3, #1
 81004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 81004a6:	2302      	movs	r3, #2
 81004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81004aa:	2300      	movs	r3, #0
 81004ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81004ae:	f107 030c 	add.w	r3, r7, #12
 81004b2:	4619      	mov	r1, r3
 81004b4:	480c      	ldr	r0, [pc, #48]	; (81004e8 <MX_GPIO_Init+0xf8>)
 81004b6:	f000 fae9 	bl	8100a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 81004ba:	2340      	movs	r3, #64	; 0x40
 81004bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81004be:	2301      	movs	r3, #1
 81004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 81004c2:	2302      	movs	r3, #2
 81004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81004c6:	2300      	movs	r3, #0
 81004c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81004ca:	f107 030c 	add.w	r3, r7, #12
 81004ce:	4619      	mov	r1, r3
 81004d0:	4806      	ldr	r0, [pc, #24]	; (81004ec <MX_GPIO_Init+0xfc>)
 81004d2:	f000 fadb 	bl	8100a8c <HAL_GPIO_Init>

}
 81004d6:	bf00      	nop
 81004d8:	3720      	adds	r7, #32
 81004da:	46bd      	mov	sp, r7
 81004dc:	bd80      	pop	{r7, pc}
 81004de:	bf00      	nop
 81004e0:	58024400 	.word	0x58024400
 81004e4:	58020000 	.word	0x58020000
 81004e8:	58020400 	.word	0x58020400
 81004ec:	58021800 	.word	0x58021800

081004f0 <vMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vMain */
void vMain(void *argument)
{
 81004f0:	b580      	push	{r7, lr}
 81004f2:	b084      	sub	sp, #16
 81004f4:	af00      	add	r7, sp, #0
 81004f6:	6078      	str	r0, [r7, #4]
  uint8_t PinStatus ;
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 81004f8:	2120      	movs	r1, #32
 81004fa:	4807      	ldr	r0, [pc, #28]	; (8100518 <vMain+0x28>)
 81004fc:	f000 fc8f 	bl	8100e1e <HAL_GPIO_TogglePin>
	  PinStatus = GPIOG->ODR ;
 8100500:	4b06      	ldr	r3, [pc, #24]	; (810051c <vMain+0x2c>)
 8100502:	695b      	ldr	r3, [r3, #20]
 8100504:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 8100506:	2140      	movs	r1, #64	; 0x40
 8100508:	4804      	ldr	r0, [pc, #16]	; (810051c <vMain+0x2c>)
 810050a:	f000 fc88 	bl	8100e1e <HAL_GPIO_TogglePin>
      osDelay(600);
 810050e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8100512:	f002 fc6d 	bl	8102df0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8100516:	e7ef      	b.n	81004f8 <vMain+0x8>
 8100518:	58020000 	.word	0x58020000
 810051c:	58021800 	.word	0x58021800

08100520 <vCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vCommunication */
void vCommunication(void *argument)
{
 8100520:	b580      	push	{r7, lr}
 8100522:	b082      	sub	sp, #8
 8100524:	af00      	add	r7, sp, #0
 8100526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vCommunication */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8100528:	2001      	movs	r0, #1
 810052a:	f002 fc61 	bl	8102df0 <osDelay>
 810052e:	e7fb      	b.n	8100528 <vCommunication+0x8>

08100530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100530:	b580      	push	{r7, lr}
 8100532:	b082      	sub	sp, #8
 8100534:	af00      	add	r7, sp, #0
 8100536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100538:	687b      	ldr	r3, [r7, #4]
 810053a:	681b      	ldr	r3, [r3, #0]
 810053c:	4a04      	ldr	r2, [pc, #16]	; (8100550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 810053e:	4293      	cmp	r3, r2
 8100540:	d101      	bne.n	8100546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100542:	f000 f9a3 	bl	810088c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100546:	bf00      	nop
 8100548:	3708      	adds	r7, #8
 810054a:	46bd      	mov	sp, r7
 810054c:	bd80      	pop	{r7, pc}
 810054e:	bf00      	nop
 8100550:	40001000 	.word	0x40001000

08100554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100554:	b480      	push	{r7}
 8100556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100558:	b672      	cpsid	i
}
 810055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810055c:	e7fe      	b.n	810055c <Error_Handler+0x8>
	...

08100560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100560:	b580      	push	{r7, lr}
 8100562:	b082      	sub	sp, #8
 8100564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100566:	4b0c      	ldr	r3, [pc, #48]	; (8100598 <HAL_MspInit+0x38>)
 8100568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810056c:	4a0a      	ldr	r2, [pc, #40]	; (8100598 <HAL_MspInit+0x38>)
 810056e:	f043 0302 	orr.w	r3, r3, #2
 8100572:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100576:	4b08      	ldr	r3, [pc, #32]	; (8100598 <HAL_MspInit+0x38>)
 8100578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810057c:	f003 0302 	and.w	r3, r3, #2
 8100580:	607b      	str	r3, [r7, #4]
 8100582:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100584:	2200      	movs	r2, #0
 8100586:	210f      	movs	r1, #15
 8100588:	f06f 0001 	mvn.w	r0, #1
 810058c:	f000 fa56 	bl	8100a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100590:	bf00      	nop
 8100592:	3708      	adds	r7, #8
 8100594:	46bd      	mov	sp, r7
 8100596:	bd80      	pop	{r7, pc}
 8100598:	58024400 	.word	0x58024400

0810059c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810059c:	b580      	push	{r7, lr}
 810059e:	b0b8      	sub	sp, #224	; 0xe0
 81005a0:	af00      	add	r7, sp, #0
 81005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81005a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81005a8:	2200      	movs	r2, #0
 81005aa:	601a      	str	r2, [r3, #0]
 81005ac:	605a      	str	r2, [r3, #4]
 81005ae:	609a      	str	r2, [r3, #8]
 81005b0:	60da      	str	r2, [r3, #12]
 81005b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81005b4:	f107 0310 	add.w	r3, r7, #16
 81005b8:	22bc      	movs	r2, #188	; 0xbc
 81005ba:	2100      	movs	r1, #0
 81005bc:	4618      	mov	r0, r3
 81005be:	f005 f8e9 	bl	8105794 <memset>
  if(hi2c->Instance==I2C1)
 81005c2:	687b      	ldr	r3, [r7, #4]
 81005c4:	681b      	ldr	r3, [r3, #0]
 81005c6:	4a24      	ldr	r2, [pc, #144]	; (8100658 <HAL_I2C_MspInit+0xbc>)
 81005c8:	4293      	cmp	r3, r2
 81005ca:	d141      	bne.n	8100650 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81005cc:	2308      	movs	r3, #8
 81005ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81005d0:	2300      	movs	r3, #0
 81005d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81005d6:	f107 0310 	add.w	r3, r7, #16
 81005da:	4618      	mov	r0, r3
 81005dc:	f000 ff64 	bl	81014a8 <HAL_RCCEx_PeriphCLKConfig>
 81005e0:	4603      	mov	r3, r0
 81005e2:	2b00      	cmp	r3, #0
 81005e4:	d001      	beq.n	81005ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 81005e6:	f7ff ffb5 	bl	8100554 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81005ea:	4b1c      	ldr	r3, [pc, #112]	; (810065c <HAL_I2C_MspInit+0xc0>)
 81005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005f0:	4a1a      	ldr	r2, [pc, #104]	; (810065c <HAL_I2C_MspInit+0xc0>)
 81005f2:	f043 0302 	orr.w	r3, r3, #2
 81005f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005fa:	4b18      	ldr	r3, [pc, #96]	; (810065c <HAL_I2C_MspInit+0xc0>)
 81005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100600:	f003 0302 	and.w	r3, r3, #2
 8100604:	60fb      	str	r3, [r7, #12]
 8100606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8100608:	23c0      	movs	r3, #192	; 0xc0
 810060a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810060e:	2312      	movs	r3, #18
 8100610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100614:	2300      	movs	r3, #0
 8100616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810061a:	2300      	movs	r3, #0
 810061c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8100620:	2304      	movs	r3, #4
 8100622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100626:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810062a:	4619      	mov	r1, r3
 810062c:	480c      	ldr	r0, [pc, #48]	; (8100660 <HAL_I2C_MspInit+0xc4>)
 810062e:	f000 fa2d 	bl	8100a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8100632:	4b0a      	ldr	r3, [pc, #40]	; (810065c <HAL_I2C_MspInit+0xc0>)
 8100634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100638:	4a08      	ldr	r2, [pc, #32]	; (810065c <HAL_I2C_MspInit+0xc0>)
 810063a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810063e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100642:	4b06      	ldr	r3, [pc, #24]	; (810065c <HAL_I2C_MspInit+0xc0>)
 8100644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810064c:	60bb      	str	r3, [r7, #8]
 810064e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8100650:	bf00      	nop
 8100652:	37e0      	adds	r7, #224	; 0xe0
 8100654:	46bd      	mov	sp, r7
 8100656:	bd80      	pop	{r7, pc}
 8100658:	40005400 	.word	0x40005400
 810065c:	58024400 	.word	0x58024400
 8100660:	58020400 	.word	0x58020400

08100664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100664:	b580      	push	{r7, lr}
 8100666:	b090      	sub	sp, #64	; 0x40
 8100668:	af00      	add	r7, sp, #0
 810066a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810066c:	687b      	ldr	r3, [r7, #4]
 810066e:	2b0f      	cmp	r3, #15
 8100670:	d827      	bhi.n	81006c2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8100672:	2200      	movs	r2, #0
 8100674:	6879      	ldr	r1, [r7, #4]
 8100676:	2036      	movs	r0, #54	; 0x36
 8100678:	f000 f9e0 	bl	8100a3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 810067c:	2036      	movs	r0, #54	; 0x36
 810067e:	f000 f9f7 	bl	8100a70 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8100682:	4a29      	ldr	r2, [pc, #164]	; (8100728 <HAL_InitTick+0xc4>)
 8100684:	687b      	ldr	r3, [r7, #4]
 8100686:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8100688:	4b28      	ldr	r3, [pc, #160]	; (810072c <HAL_InitTick+0xc8>)
 810068a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810068e:	4a27      	ldr	r2, [pc, #156]	; (810072c <HAL_InitTick+0xc8>)
 8100690:	f043 0310 	orr.w	r3, r3, #16
 8100694:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100698:	4b24      	ldr	r3, [pc, #144]	; (810072c <HAL_InitTick+0xc8>)
 810069a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810069e:	f003 0310 	and.w	r3, r3, #16
 81006a2:	60fb      	str	r3, [r7, #12]
 81006a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81006a6:	f107 0210 	add.w	r2, r7, #16
 81006aa:	f107 0314 	add.w	r3, r7, #20
 81006ae:	4611      	mov	r1, r2
 81006b0:	4618      	mov	r0, r3
 81006b2:	f000 feb7 	bl	8101424 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81006b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81006bc:	2b00      	cmp	r3, #0
 81006be:	d106      	bne.n	81006ce <HAL_InitTick+0x6a>
 81006c0:	e001      	b.n	81006c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 81006c2:	2301      	movs	r3, #1
 81006c4:	e02b      	b.n	810071e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81006c6:	f000 fe97 	bl	81013f8 <HAL_RCC_GetPCLK1Freq>
 81006ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 81006cc:	e004      	b.n	81006d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81006ce:	f000 fe93 	bl	81013f8 <HAL_RCC_GetPCLK1Freq>
 81006d2:	4603      	mov	r3, r0
 81006d4:	005b      	lsls	r3, r3, #1
 81006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81006d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81006da:	4a15      	ldr	r2, [pc, #84]	; (8100730 <HAL_InitTick+0xcc>)
 81006dc:	fba2 2303 	umull	r2, r3, r2, r3
 81006e0:	0c9b      	lsrs	r3, r3, #18
 81006e2:	3b01      	subs	r3, #1
 81006e4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 81006e6:	4b13      	ldr	r3, [pc, #76]	; (8100734 <HAL_InitTick+0xd0>)
 81006e8:	4a13      	ldr	r2, [pc, #76]	; (8100738 <HAL_InitTick+0xd4>)
 81006ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 81006ec:	4b11      	ldr	r3, [pc, #68]	; (8100734 <HAL_InitTick+0xd0>)
 81006ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 81006f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 81006f4:	4a0f      	ldr	r2, [pc, #60]	; (8100734 <HAL_InitTick+0xd0>)
 81006f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81006f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 81006fa:	4b0e      	ldr	r3, [pc, #56]	; (8100734 <HAL_InitTick+0xd0>)
 81006fc:	2200      	movs	r2, #0
 81006fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100700:	4b0c      	ldr	r3, [pc, #48]	; (8100734 <HAL_InitTick+0xd0>)
 8100702:	2200      	movs	r2, #0
 8100704:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8100706:	480b      	ldr	r0, [pc, #44]	; (8100734 <HAL_InitTick+0xd0>)
 8100708:	f001 ff78 	bl	81025fc <HAL_TIM_Base_Init>
 810070c:	4603      	mov	r3, r0
 810070e:	2b00      	cmp	r3, #0
 8100710:	d104      	bne.n	810071c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8100712:	4808      	ldr	r0, [pc, #32]	; (8100734 <HAL_InitTick+0xd0>)
 8100714:	f001 ffd4 	bl	81026c0 <HAL_TIM_Base_Start_IT>
 8100718:	4603      	mov	r3, r0
 810071a:	e000      	b.n	810071e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 810071c:	2301      	movs	r3, #1
}
 810071e:	4618      	mov	r0, r3
 8100720:	3740      	adds	r7, #64	; 0x40
 8100722:	46bd      	mov	sp, r7
 8100724:	bd80      	pop	{r7, pc}
 8100726:	bf00      	nop
 8100728:	10000008 	.word	0x10000008
 810072c:	58024400 	.word	0x58024400
 8100730:	431bde83 	.word	0x431bde83
 8100734:	100000e8 	.word	0x100000e8
 8100738:	40001000 	.word	0x40001000

0810073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810073c:	b480      	push	{r7}
 810073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100740:	e7fe      	b.n	8100740 <NMI_Handler+0x4>

08100742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100742:	b480      	push	{r7}
 8100744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100746:	e7fe      	b.n	8100746 <HardFault_Handler+0x4>

08100748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100748:	b480      	push	{r7}
 810074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810074c:	e7fe      	b.n	810074c <MemManage_Handler+0x4>

0810074e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810074e:	b480      	push	{r7}
 8100750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100752:	e7fe      	b.n	8100752 <BusFault_Handler+0x4>

08100754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100754:	b480      	push	{r7}
 8100756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100758:	e7fe      	b.n	8100758 <UsageFault_Handler+0x4>

0810075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810075a:	b480      	push	{r7}
 810075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810075e:	bf00      	nop
 8100760:	46bd      	mov	sp, r7
 8100762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100766:	4770      	bx	lr

08100768 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8100768:	b580      	push	{r7, lr}
 810076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 810076c:	4802      	ldr	r0, [pc, #8]	; (8100778 <TIM6_DAC_IRQHandler+0x10>)
 810076e:	f002 f81f 	bl	81027b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100772:	bf00      	nop
 8100774:	bd80      	pop	{r7, pc}
 8100776:	bf00      	nop
 8100778:	100000e8 	.word	0x100000e8

0810077c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810077c:	f8df d034 	ldr.w	sp, [pc, #52]	; 81007b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100780:	f7ff fdae 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100784:	480c      	ldr	r0, [pc, #48]	; (81007b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100786:	490d      	ldr	r1, [pc, #52]	; (81007bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100788:	4a0d      	ldr	r2, [pc, #52]	; (81007c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810078c:	e002      	b.n	8100794 <LoopCopyDataInit>

0810078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100792:	3304      	adds	r3, #4

08100794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100798:	d3f9      	bcc.n	810078e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810079a:	4a0a      	ldr	r2, [pc, #40]	; (81007c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810079c:	4c0a      	ldr	r4, [pc, #40]	; (81007c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 810079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 81007a0:	e001      	b.n	81007a6 <LoopFillZerobss>

081007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81007a4:	3204      	adds	r2, #4

081007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81007a8:	d3fb      	bcc.n	81007a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81007aa:	f004 ffbf 	bl	810572c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81007ae:	f7ff fdaf 	bl	8100310 <main>
  bx  lr
 81007b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81007b4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81007b8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81007bc:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 81007c0:	08105a34 	.word	0x08105a34
  ldr r2, =_sbss
 81007c4:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 81007c8:	10004b50 	.word	0x10004b50

081007cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81007cc:	e7fe      	b.n	81007cc <ADC3_IRQHandler>
	...

081007d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81007d0:	b580      	push	{r7, lr}
 81007d2:	b082      	sub	sp, #8
 81007d4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81007d6:	4b28      	ldr	r3, [pc, #160]	; (8100878 <HAL_Init+0xa8>)
 81007d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007dc:	4a26      	ldr	r2, [pc, #152]	; (8100878 <HAL_Init+0xa8>)
 81007de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81007e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007e6:	4b24      	ldr	r3, [pc, #144]	; (8100878 <HAL_Init+0xa8>)
 81007e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81007f0:	603b      	str	r3, [r7, #0]
 81007f2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81007f4:	4b21      	ldr	r3, [pc, #132]	; (810087c <HAL_Init+0xac>)
 81007f6:	681b      	ldr	r3, [r3, #0]
 81007f8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81007fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100800:	4a1e      	ldr	r2, [pc, #120]	; (810087c <HAL_Init+0xac>)
 8100802:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100806:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100808:	4b1c      	ldr	r3, [pc, #112]	; (810087c <HAL_Init+0xac>)
 810080a:	681b      	ldr	r3, [r3, #0]
 810080c:	4a1b      	ldr	r2, [pc, #108]	; (810087c <HAL_Init+0xac>)
 810080e:	f043 0301 	orr.w	r3, r3, #1
 8100812:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100814:	2003      	movs	r0, #3
 8100816:	f000 f906 	bl	8100a26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810081a:	f000 fc41 	bl	81010a0 <HAL_RCC_GetSysClockFreq>
 810081e:	4602      	mov	r2, r0
 8100820:	4b15      	ldr	r3, [pc, #84]	; (8100878 <HAL_Init+0xa8>)
 8100822:	699b      	ldr	r3, [r3, #24]
 8100824:	0a1b      	lsrs	r3, r3, #8
 8100826:	f003 030f 	and.w	r3, r3, #15
 810082a:	4915      	ldr	r1, [pc, #84]	; (8100880 <HAL_Init+0xb0>)
 810082c:	5ccb      	ldrb	r3, [r1, r3]
 810082e:	f003 031f 	and.w	r3, r3, #31
 8100832:	fa22 f303 	lsr.w	r3, r2, r3
 8100836:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100838:	4b0f      	ldr	r3, [pc, #60]	; (8100878 <HAL_Init+0xa8>)
 810083a:	699b      	ldr	r3, [r3, #24]
 810083c:	f003 030f 	and.w	r3, r3, #15
 8100840:	4a0f      	ldr	r2, [pc, #60]	; (8100880 <HAL_Init+0xb0>)
 8100842:	5cd3      	ldrb	r3, [r2, r3]
 8100844:	f003 031f 	and.w	r3, r3, #31
 8100848:	687a      	ldr	r2, [r7, #4]
 810084a:	fa22 f303 	lsr.w	r3, r2, r3
 810084e:	4a0d      	ldr	r2, [pc, #52]	; (8100884 <HAL_Init+0xb4>)
 8100850:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100852:	4b0c      	ldr	r3, [pc, #48]	; (8100884 <HAL_Init+0xb4>)
 8100854:	681b      	ldr	r3, [r3, #0]
 8100856:	4a0c      	ldr	r2, [pc, #48]	; (8100888 <HAL_Init+0xb8>)
 8100858:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810085a:	200f      	movs	r0, #15
 810085c:	f7ff ff02 	bl	8100664 <HAL_InitTick>
 8100860:	4603      	mov	r3, r0
 8100862:	2b00      	cmp	r3, #0
 8100864:	d001      	beq.n	810086a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100866:	2301      	movs	r3, #1
 8100868:	e002      	b.n	8100870 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810086a:	f7ff fe79 	bl	8100560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810086e:	2300      	movs	r3, #0
}
 8100870:	4618      	mov	r0, r3
 8100872:	3708      	adds	r7, #8
 8100874:	46bd      	mov	sp, r7
 8100876:	bd80      	pop	{r7, pc}
 8100878:	58024400 	.word	0x58024400
 810087c:	40024400 	.word	0x40024400
 8100880:	08105974 	.word	0x08105974
 8100884:	10000004 	.word	0x10000004
 8100888:	10000000 	.word	0x10000000

0810088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810088c:	b480      	push	{r7}
 810088e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100890:	4b06      	ldr	r3, [pc, #24]	; (81008ac <HAL_IncTick+0x20>)
 8100892:	781b      	ldrb	r3, [r3, #0]
 8100894:	461a      	mov	r2, r3
 8100896:	4b06      	ldr	r3, [pc, #24]	; (81008b0 <HAL_IncTick+0x24>)
 8100898:	681b      	ldr	r3, [r3, #0]
 810089a:	4413      	add	r3, r2
 810089c:	4a04      	ldr	r2, [pc, #16]	; (81008b0 <HAL_IncTick+0x24>)
 810089e:	6013      	str	r3, [r2, #0]
}
 81008a0:	bf00      	nop
 81008a2:	46bd      	mov	sp, r7
 81008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a8:	4770      	bx	lr
 81008aa:	bf00      	nop
 81008ac:	1000000c 	.word	0x1000000c
 81008b0:	10000134 	.word	0x10000134

081008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81008b4:	b480      	push	{r7}
 81008b6:	af00      	add	r7, sp, #0
  return uwTick;
 81008b8:	4b03      	ldr	r3, [pc, #12]	; (81008c8 <HAL_GetTick+0x14>)
 81008ba:	681b      	ldr	r3, [r3, #0]
}
 81008bc:	4618      	mov	r0, r3
 81008be:	46bd      	mov	sp, r7
 81008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008c4:	4770      	bx	lr
 81008c6:	bf00      	nop
 81008c8:	10000134 	.word	0x10000134

081008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81008cc:	b480      	push	{r7}
 81008ce:	b085      	sub	sp, #20
 81008d0:	af00      	add	r7, sp, #0
 81008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81008d4:	687b      	ldr	r3, [r7, #4]
 81008d6:	f003 0307 	and.w	r3, r3, #7
 81008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81008dc:	4b0c      	ldr	r3, [pc, #48]	; (8100910 <__NVIC_SetPriorityGrouping+0x44>)
 81008de:	68db      	ldr	r3, [r3, #12]
 81008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81008e2:	68ba      	ldr	r2, [r7, #8]
 81008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81008e8:	4013      	ands	r3, r2
 81008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81008ec:	68fb      	ldr	r3, [r7, #12]
 81008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81008f0:	68bb      	ldr	r3, [r7, #8]
 81008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81008f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81008fe:	4a04      	ldr	r2, [pc, #16]	; (8100910 <__NVIC_SetPriorityGrouping+0x44>)
 8100900:	68bb      	ldr	r3, [r7, #8]
 8100902:	60d3      	str	r3, [r2, #12]
}
 8100904:	bf00      	nop
 8100906:	3714      	adds	r7, #20
 8100908:	46bd      	mov	sp, r7
 810090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810090e:	4770      	bx	lr
 8100910:	e000ed00 	.word	0xe000ed00

08100914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100914:	b480      	push	{r7}
 8100916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100918:	4b04      	ldr	r3, [pc, #16]	; (810092c <__NVIC_GetPriorityGrouping+0x18>)
 810091a:	68db      	ldr	r3, [r3, #12]
 810091c:	0a1b      	lsrs	r3, r3, #8
 810091e:	f003 0307 	and.w	r3, r3, #7
}
 8100922:	4618      	mov	r0, r3
 8100924:	46bd      	mov	sp, r7
 8100926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810092a:	4770      	bx	lr
 810092c:	e000ed00 	.word	0xe000ed00

08100930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100930:	b480      	push	{r7}
 8100932:	b083      	sub	sp, #12
 8100934:	af00      	add	r7, sp, #0
 8100936:	4603      	mov	r3, r0
 8100938:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810093a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810093e:	2b00      	cmp	r3, #0
 8100940:	db0b      	blt.n	810095a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100942:	88fb      	ldrh	r3, [r7, #6]
 8100944:	f003 021f 	and.w	r2, r3, #31
 8100948:	4907      	ldr	r1, [pc, #28]	; (8100968 <__NVIC_EnableIRQ+0x38>)
 810094a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810094e:	095b      	lsrs	r3, r3, #5
 8100950:	2001      	movs	r0, #1
 8100952:	fa00 f202 	lsl.w	r2, r0, r2
 8100956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810095a:	bf00      	nop
 810095c:	370c      	adds	r7, #12
 810095e:	46bd      	mov	sp, r7
 8100960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100964:	4770      	bx	lr
 8100966:	bf00      	nop
 8100968:	e000e100 	.word	0xe000e100

0810096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810096c:	b480      	push	{r7}
 810096e:	b083      	sub	sp, #12
 8100970:	af00      	add	r7, sp, #0
 8100972:	4603      	mov	r3, r0
 8100974:	6039      	str	r1, [r7, #0]
 8100976:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810097c:	2b00      	cmp	r3, #0
 810097e:	db0a      	blt.n	8100996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100980:	683b      	ldr	r3, [r7, #0]
 8100982:	b2da      	uxtb	r2, r3
 8100984:	490c      	ldr	r1, [pc, #48]	; (81009b8 <__NVIC_SetPriority+0x4c>)
 8100986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810098a:	0112      	lsls	r2, r2, #4
 810098c:	b2d2      	uxtb	r2, r2
 810098e:	440b      	add	r3, r1
 8100990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100994:	e00a      	b.n	81009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100996:	683b      	ldr	r3, [r7, #0]
 8100998:	b2da      	uxtb	r2, r3
 810099a:	4908      	ldr	r1, [pc, #32]	; (81009bc <__NVIC_SetPriority+0x50>)
 810099c:	88fb      	ldrh	r3, [r7, #6]
 810099e:	f003 030f 	and.w	r3, r3, #15
 81009a2:	3b04      	subs	r3, #4
 81009a4:	0112      	lsls	r2, r2, #4
 81009a6:	b2d2      	uxtb	r2, r2
 81009a8:	440b      	add	r3, r1
 81009aa:	761a      	strb	r2, [r3, #24]
}
 81009ac:	bf00      	nop
 81009ae:	370c      	adds	r7, #12
 81009b0:	46bd      	mov	sp, r7
 81009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009b6:	4770      	bx	lr
 81009b8:	e000e100 	.word	0xe000e100
 81009bc:	e000ed00 	.word	0xe000ed00

081009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81009c0:	b480      	push	{r7}
 81009c2:	b089      	sub	sp, #36	; 0x24
 81009c4:	af00      	add	r7, sp, #0
 81009c6:	60f8      	str	r0, [r7, #12]
 81009c8:	60b9      	str	r1, [r7, #8]
 81009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81009cc:	68fb      	ldr	r3, [r7, #12]
 81009ce:	f003 0307 	and.w	r3, r3, #7
 81009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81009d4:	69fb      	ldr	r3, [r7, #28]
 81009d6:	f1c3 0307 	rsb	r3, r3, #7
 81009da:	2b04      	cmp	r3, #4
 81009dc:	bf28      	it	cs
 81009de:	2304      	movcs	r3, #4
 81009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81009e2:	69fb      	ldr	r3, [r7, #28]
 81009e4:	3304      	adds	r3, #4
 81009e6:	2b06      	cmp	r3, #6
 81009e8:	d902      	bls.n	81009f0 <NVIC_EncodePriority+0x30>
 81009ea:	69fb      	ldr	r3, [r7, #28]
 81009ec:	3b03      	subs	r3, #3
 81009ee:	e000      	b.n	81009f2 <NVIC_EncodePriority+0x32>
 81009f0:	2300      	movs	r3, #0
 81009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81009f4:	f04f 32ff 	mov.w	r2, #4294967295
 81009f8:	69bb      	ldr	r3, [r7, #24]
 81009fa:	fa02 f303 	lsl.w	r3, r2, r3
 81009fe:	43da      	mvns	r2, r3
 8100a00:	68bb      	ldr	r3, [r7, #8]
 8100a02:	401a      	ands	r2, r3
 8100a04:	697b      	ldr	r3, [r7, #20]
 8100a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100a08:	f04f 31ff 	mov.w	r1, #4294967295
 8100a0c:	697b      	ldr	r3, [r7, #20]
 8100a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8100a12:	43d9      	mvns	r1, r3
 8100a14:	687b      	ldr	r3, [r7, #4]
 8100a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a18:	4313      	orrs	r3, r2
         );
}
 8100a1a:	4618      	mov	r0, r3
 8100a1c:	3724      	adds	r7, #36	; 0x24
 8100a1e:	46bd      	mov	sp, r7
 8100a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a24:	4770      	bx	lr

08100a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100a26:	b580      	push	{r7, lr}
 8100a28:	b082      	sub	sp, #8
 8100a2a:	af00      	add	r7, sp, #0
 8100a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100a2e:	6878      	ldr	r0, [r7, #4]
 8100a30:	f7ff ff4c 	bl	81008cc <__NVIC_SetPriorityGrouping>
}
 8100a34:	bf00      	nop
 8100a36:	3708      	adds	r7, #8
 8100a38:	46bd      	mov	sp, r7
 8100a3a:	bd80      	pop	{r7, pc}

08100a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a3c:	b580      	push	{r7, lr}
 8100a3e:	b086      	sub	sp, #24
 8100a40:	af00      	add	r7, sp, #0
 8100a42:	4603      	mov	r3, r0
 8100a44:	60b9      	str	r1, [r7, #8]
 8100a46:	607a      	str	r2, [r7, #4]
 8100a48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100a4a:	f7ff ff63 	bl	8100914 <__NVIC_GetPriorityGrouping>
 8100a4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100a50:	687a      	ldr	r2, [r7, #4]
 8100a52:	68b9      	ldr	r1, [r7, #8]
 8100a54:	6978      	ldr	r0, [r7, #20]
 8100a56:	f7ff ffb3 	bl	81009c0 <NVIC_EncodePriority>
 8100a5a:	4602      	mov	r2, r0
 8100a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100a60:	4611      	mov	r1, r2
 8100a62:	4618      	mov	r0, r3
 8100a64:	f7ff ff82 	bl	810096c <__NVIC_SetPriority>
}
 8100a68:	bf00      	nop
 8100a6a:	3718      	adds	r7, #24
 8100a6c:	46bd      	mov	sp, r7
 8100a6e:	bd80      	pop	{r7, pc}

08100a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100a70:	b580      	push	{r7, lr}
 8100a72:	b082      	sub	sp, #8
 8100a74:	af00      	add	r7, sp, #0
 8100a76:	4603      	mov	r3, r0
 8100a78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a7e:	4618      	mov	r0, r3
 8100a80:	f7ff ff56 	bl	8100930 <__NVIC_EnableIRQ>
}
 8100a84:	bf00      	nop
 8100a86:	3708      	adds	r7, #8
 8100a88:	46bd      	mov	sp, r7
 8100a8a:	bd80      	pop	{r7, pc}

08100a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100a8c:	b480      	push	{r7}
 8100a8e:	b089      	sub	sp, #36	; 0x24
 8100a90:	af00      	add	r7, sp, #0
 8100a92:	6078      	str	r0, [r7, #4]
 8100a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100a96:	2300      	movs	r3, #0
 8100a98:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100a9a:	4b89      	ldr	r3, [pc, #548]	; (8100cc0 <HAL_GPIO_Init+0x234>)
 8100a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100a9e:	e194      	b.n	8100dca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100aa0:	683b      	ldr	r3, [r7, #0]
 8100aa2:	681a      	ldr	r2, [r3, #0]
 8100aa4:	2101      	movs	r1, #1
 8100aa6:	69fb      	ldr	r3, [r7, #28]
 8100aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8100aac:	4013      	ands	r3, r2
 8100aae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100ab0:	693b      	ldr	r3, [r7, #16]
 8100ab2:	2b00      	cmp	r3, #0
 8100ab4:	f000 8186 	beq.w	8100dc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100ab8:	683b      	ldr	r3, [r7, #0]
 8100aba:	685b      	ldr	r3, [r3, #4]
 8100abc:	f003 0303 	and.w	r3, r3, #3
 8100ac0:	2b01      	cmp	r3, #1
 8100ac2:	d005      	beq.n	8100ad0 <HAL_GPIO_Init+0x44>
 8100ac4:	683b      	ldr	r3, [r7, #0]
 8100ac6:	685b      	ldr	r3, [r3, #4]
 8100ac8:	f003 0303 	and.w	r3, r3, #3
 8100acc:	2b02      	cmp	r3, #2
 8100ace:	d130      	bne.n	8100b32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100ad0:	687b      	ldr	r3, [r7, #4]
 8100ad2:	689b      	ldr	r3, [r3, #8]
 8100ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100ad6:	69fb      	ldr	r3, [r7, #28]
 8100ad8:	005b      	lsls	r3, r3, #1
 8100ada:	2203      	movs	r2, #3
 8100adc:	fa02 f303 	lsl.w	r3, r2, r3
 8100ae0:	43db      	mvns	r3, r3
 8100ae2:	69ba      	ldr	r2, [r7, #24]
 8100ae4:	4013      	ands	r3, r2
 8100ae6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100ae8:	683b      	ldr	r3, [r7, #0]
 8100aea:	68da      	ldr	r2, [r3, #12]
 8100aec:	69fb      	ldr	r3, [r7, #28]
 8100aee:	005b      	lsls	r3, r3, #1
 8100af0:	fa02 f303 	lsl.w	r3, r2, r3
 8100af4:	69ba      	ldr	r2, [r7, #24]
 8100af6:	4313      	orrs	r3, r2
 8100af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100afa:	687b      	ldr	r3, [r7, #4]
 8100afc:	69ba      	ldr	r2, [r7, #24]
 8100afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100b00:	687b      	ldr	r3, [r7, #4]
 8100b02:	685b      	ldr	r3, [r3, #4]
 8100b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100b06:	2201      	movs	r2, #1
 8100b08:	69fb      	ldr	r3, [r7, #28]
 8100b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100b0e:	43db      	mvns	r3, r3
 8100b10:	69ba      	ldr	r2, [r7, #24]
 8100b12:	4013      	ands	r3, r2
 8100b14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100b16:	683b      	ldr	r3, [r7, #0]
 8100b18:	685b      	ldr	r3, [r3, #4]
 8100b1a:	091b      	lsrs	r3, r3, #4
 8100b1c:	f003 0201 	and.w	r2, r3, #1
 8100b20:	69fb      	ldr	r3, [r7, #28]
 8100b22:	fa02 f303 	lsl.w	r3, r2, r3
 8100b26:	69ba      	ldr	r2, [r7, #24]
 8100b28:	4313      	orrs	r3, r2
 8100b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100b2c:	687b      	ldr	r3, [r7, #4]
 8100b2e:	69ba      	ldr	r2, [r7, #24]
 8100b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100b32:	683b      	ldr	r3, [r7, #0]
 8100b34:	685b      	ldr	r3, [r3, #4]
 8100b36:	f003 0303 	and.w	r3, r3, #3
 8100b3a:	2b03      	cmp	r3, #3
 8100b3c:	d017      	beq.n	8100b6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100b3e:	687b      	ldr	r3, [r7, #4]
 8100b40:	68db      	ldr	r3, [r3, #12]
 8100b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100b44:	69fb      	ldr	r3, [r7, #28]
 8100b46:	005b      	lsls	r3, r3, #1
 8100b48:	2203      	movs	r2, #3
 8100b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8100b4e:	43db      	mvns	r3, r3
 8100b50:	69ba      	ldr	r2, [r7, #24]
 8100b52:	4013      	ands	r3, r2
 8100b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100b56:	683b      	ldr	r3, [r7, #0]
 8100b58:	689a      	ldr	r2, [r3, #8]
 8100b5a:	69fb      	ldr	r3, [r7, #28]
 8100b5c:	005b      	lsls	r3, r3, #1
 8100b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8100b62:	69ba      	ldr	r2, [r7, #24]
 8100b64:	4313      	orrs	r3, r2
 8100b66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100b68:	687b      	ldr	r3, [r7, #4]
 8100b6a:	69ba      	ldr	r2, [r7, #24]
 8100b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100b6e:	683b      	ldr	r3, [r7, #0]
 8100b70:	685b      	ldr	r3, [r3, #4]
 8100b72:	f003 0303 	and.w	r3, r3, #3
 8100b76:	2b02      	cmp	r3, #2
 8100b78:	d123      	bne.n	8100bc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100b7a:	69fb      	ldr	r3, [r7, #28]
 8100b7c:	08da      	lsrs	r2, r3, #3
 8100b7e:	687b      	ldr	r3, [r7, #4]
 8100b80:	3208      	adds	r2, #8
 8100b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100b88:	69fb      	ldr	r3, [r7, #28]
 8100b8a:	f003 0307 	and.w	r3, r3, #7
 8100b8e:	009b      	lsls	r3, r3, #2
 8100b90:	220f      	movs	r2, #15
 8100b92:	fa02 f303 	lsl.w	r3, r2, r3
 8100b96:	43db      	mvns	r3, r3
 8100b98:	69ba      	ldr	r2, [r7, #24]
 8100b9a:	4013      	ands	r3, r2
 8100b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100b9e:	683b      	ldr	r3, [r7, #0]
 8100ba0:	691a      	ldr	r2, [r3, #16]
 8100ba2:	69fb      	ldr	r3, [r7, #28]
 8100ba4:	f003 0307 	and.w	r3, r3, #7
 8100ba8:	009b      	lsls	r3, r3, #2
 8100baa:	fa02 f303 	lsl.w	r3, r2, r3
 8100bae:	69ba      	ldr	r2, [r7, #24]
 8100bb0:	4313      	orrs	r3, r2
 8100bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100bb4:	69fb      	ldr	r3, [r7, #28]
 8100bb6:	08da      	lsrs	r2, r3, #3
 8100bb8:	687b      	ldr	r3, [r7, #4]
 8100bba:	3208      	adds	r2, #8
 8100bbc:	69b9      	ldr	r1, [r7, #24]
 8100bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100bc2:	687b      	ldr	r3, [r7, #4]
 8100bc4:	681b      	ldr	r3, [r3, #0]
 8100bc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100bc8:	69fb      	ldr	r3, [r7, #28]
 8100bca:	005b      	lsls	r3, r3, #1
 8100bcc:	2203      	movs	r2, #3
 8100bce:	fa02 f303 	lsl.w	r3, r2, r3
 8100bd2:	43db      	mvns	r3, r3
 8100bd4:	69ba      	ldr	r2, [r7, #24]
 8100bd6:	4013      	ands	r3, r2
 8100bd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100bda:	683b      	ldr	r3, [r7, #0]
 8100bdc:	685b      	ldr	r3, [r3, #4]
 8100bde:	f003 0203 	and.w	r2, r3, #3
 8100be2:	69fb      	ldr	r3, [r7, #28]
 8100be4:	005b      	lsls	r3, r3, #1
 8100be6:	fa02 f303 	lsl.w	r3, r2, r3
 8100bea:	69ba      	ldr	r2, [r7, #24]
 8100bec:	4313      	orrs	r3, r2
 8100bee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100bf0:	687b      	ldr	r3, [r7, #4]
 8100bf2:	69ba      	ldr	r2, [r7, #24]
 8100bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100bf6:	683b      	ldr	r3, [r7, #0]
 8100bf8:	685b      	ldr	r3, [r3, #4]
 8100bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100bfe:	2b00      	cmp	r3, #0
 8100c00:	f000 80e0 	beq.w	8100dc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100c04:	4b2f      	ldr	r3, [pc, #188]	; (8100cc4 <HAL_GPIO_Init+0x238>)
 8100c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100c0a:	4a2e      	ldr	r2, [pc, #184]	; (8100cc4 <HAL_GPIO_Init+0x238>)
 8100c0c:	f043 0302 	orr.w	r3, r3, #2
 8100c10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100c14:	4b2b      	ldr	r3, [pc, #172]	; (8100cc4 <HAL_GPIO_Init+0x238>)
 8100c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100c1a:	f003 0302 	and.w	r3, r3, #2
 8100c1e:	60fb      	str	r3, [r7, #12]
 8100c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100c22:	4a29      	ldr	r2, [pc, #164]	; (8100cc8 <HAL_GPIO_Init+0x23c>)
 8100c24:	69fb      	ldr	r3, [r7, #28]
 8100c26:	089b      	lsrs	r3, r3, #2
 8100c28:	3302      	adds	r3, #2
 8100c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100c30:	69fb      	ldr	r3, [r7, #28]
 8100c32:	f003 0303 	and.w	r3, r3, #3
 8100c36:	009b      	lsls	r3, r3, #2
 8100c38:	220f      	movs	r2, #15
 8100c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c3e:	43db      	mvns	r3, r3
 8100c40:	69ba      	ldr	r2, [r7, #24]
 8100c42:	4013      	ands	r3, r2
 8100c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100c46:	687b      	ldr	r3, [r7, #4]
 8100c48:	4a20      	ldr	r2, [pc, #128]	; (8100ccc <HAL_GPIO_Init+0x240>)
 8100c4a:	4293      	cmp	r3, r2
 8100c4c:	d052      	beq.n	8100cf4 <HAL_GPIO_Init+0x268>
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	4a1f      	ldr	r2, [pc, #124]	; (8100cd0 <HAL_GPIO_Init+0x244>)
 8100c52:	4293      	cmp	r3, r2
 8100c54:	d031      	beq.n	8100cba <HAL_GPIO_Init+0x22e>
 8100c56:	687b      	ldr	r3, [r7, #4]
 8100c58:	4a1e      	ldr	r2, [pc, #120]	; (8100cd4 <HAL_GPIO_Init+0x248>)
 8100c5a:	4293      	cmp	r3, r2
 8100c5c:	d02b      	beq.n	8100cb6 <HAL_GPIO_Init+0x22a>
 8100c5e:	687b      	ldr	r3, [r7, #4]
 8100c60:	4a1d      	ldr	r2, [pc, #116]	; (8100cd8 <HAL_GPIO_Init+0x24c>)
 8100c62:	4293      	cmp	r3, r2
 8100c64:	d025      	beq.n	8100cb2 <HAL_GPIO_Init+0x226>
 8100c66:	687b      	ldr	r3, [r7, #4]
 8100c68:	4a1c      	ldr	r2, [pc, #112]	; (8100cdc <HAL_GPIO_Init+0x250>)
 8100c6a:	4293      	cmp	r3, r2
 8100c6c:	d01f      	beq.n	8100cae <HAL_GPIO_Init+0x222>
 8100c6e:	687b      	ldr	r3, [r7, #4]
 8100c70:	4a1b      	ldr	r2, [pc, #108]	; (8100ce0 <HAL_GPIO_Init+0x254>)
 8100c72:	4293      	cmp	r3, r2
 8100c74:	d019      	beq.n	8100caa <HAL_GPIO_Init+0x21e>
 8100c76:	687b      	ldr	r3, [r7, #4]
 8100c78:	4a1a      	ldr	r2, [pc, #104]	; (8100ce4 <HAL_GPIO_Init+0x258>)
 8100c7a:	4293      	cmp	r3, r2
 8100c7c:	d013      	beq.n	8100ca6 <HAL_GPIO_Init+0x21a>
 8100c7e:	687b      	ldr	r3, [r7, #4]
 8100c80:	4a19      	ldr	r2, [pc, #100]	; (8100ce8 <HAL_GPIO_Init+0x25c>)
 8100c82:	4293      	cmp	r3, r2
 8100c84:	d00d      	beq.n	8100ca2 <HAL_GPIO_Init+0x216>
 8100c86:	687b      	ldr	r3, [r7, #4]
 8100c88:	4a18      	ldr	r2, [pc, #96]	; (8100cec <HAL_GPIO_Init+0x260>)
 8100c8a:	4293      	cmp	r3, r2
 8100c8c:	d007      	beq.n	8100c9e <HAL_GPIO_Init+0x212>
 8100c8e:	687b      	ldr	r3, [r7, #4]
 8100c90:	4a17      	ldr	r2, [pc, #92]	; (8100cf0 <HAL_GPIO_Init+0x264>)
 8100c92:	4293      	cmp	r3, r2
 8100c94:	d101      	bne.n	8100c9a <HAL_GPIO_Init+0x20e>
 8100c96:	2309      	movs	r3, #9
 8100c98:	e02d      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100c9a:	230a      	movs	r3, #10
 8100c9c:	e02b      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100c9e:	2308      	movs	r3, #8
 8100ca0:	e029      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100ca2:	2307      	movs	r3, #7
 8100ca4:	e027      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100ca6:	2306      	movs	r3, #6
 8100ca8:	e025      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100caa:	2305      	movs	r3, #5
 8100cac:	e023      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100cae:	2304      	movs	r3, #4
 8100cb0:	e021      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100cb2:	2303      	movs	r3, #3
 8100cb4:	e01f      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100cb6:	2302      	movs	r3, #2
 8100cb8:	e01d      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100cba:	2301      	movs	r3, #1
 8100cbc:	e01b      	b.n	8100cf6 <HAL_GPIO_Init+0x26a>
 8100cbe:	bf00      	nop
 8100cc0:	580000c0 	.word	0x580000c0
 8100cc4:	58024400 	.word	0x58024400
 8100cc8:	58000400 	.word	0x58000400
 8100ccc:	58020000 	.word	0x58020000
 8100cd0:	58020400 	.word	0x58020400
 8100cd4:	58020800 	.word	0x58020800
 8100cd8:	58020c00 	.word	0x58020c00
 8100cdc:	58021000 	.word	0x58021000
 8100ce0:	58021400 	.word	0x58021400
 8100ce4:	58021800 	.word	0x58021800
 8100ce8:	58021c00 	.word	0x58021c00
 8100cec:	58022000 	.word	0x58022000
 8100cf0:	58022400 	.word	0x58022400
 8100cf4:	2300      	movs	r3, #0
 8100cf6:	69fa      	ldr	r2, [r7, #28]
 8100cf8:	f002 0203 	and.w	r2, r2, #3
 8100cfc:	0092      	lsls	r2, r2, #2
 8100cfe:	4093      	lsls	r3, r2
 8100d00:	69ba      	ldr	r2, [r7, #24]
 8100d02:	4313      	orrs	r3, r2
 8100d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100d06:	4938      	ldr	r1, [pc, #224]	; (8100de8 <HAL_GPIO_Init+0x35c>)
 8100d08:	69fb      	ldr	r3, [r7, #28]
 8100d0a:	089b      	lsrs	r3, r3, #2
 8100d0c:	3302      	adds	r3, #2
 8100d0e:	69ba      	ldr	r2, [r7, #24]
 8100d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100d18:	681b      	ldr	r3, [r3, #0]
 8100d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d1c:	693b      	ldr	r3, [r7, #16]
 8100d1e:	43db      	mvns	r3, r3
 8100d20:	69ba      	ldr	r2, [r7, #24]
 8100d22:	4013      	ands	r3, r2
 8100d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100d26:	683b      	ldr	r3, [r7, #0]
 8100d28:	685b      	ldr	r3, [r3, #4]
 8100d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100d2e:	2b00      	cmp	r3, #0
 8100d30:	d003      	beq.n	8100d3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100d32:	69ba      	ldr	r2, [r7, #24]
 8100d34:	693b      	ldr	r3, [r7, #16]
 8100d36:	4313      	orrs	r3, r2
 8100d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100d3e:	69bb      	ldr	r3, [r7, #24]
 8100d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100d46:	685b      	ldr	r3, [r3, #4]
 8100d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d4a:	693b      	ldr	r3, [r7, #16]
 8100d4c:	43db      	mvns	r3, r3
 8100d4e:	69ba      	ldr	r2, [r7, #24]
 8100d50:	4013      	ands	r3, r2
 8100d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100d54:	683b      	ldr	r3, [r7, #0]
 8100d56:	685b      	ldr	r3, [r3, #4]
 8100d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100d5c:	2b00      	cmp	r3, #0
 8100d5e:	d003      	beq.n	8100d68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100d60:	69ba      	ldr	r2, [r7, #24]
 8100d62:	693b      	ldr	r3, [r7, #16]
 8100d64:	4313      	orrs	r3, r2
 8100d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100d6c:	69bb      	ldr	r3, [r7, #24]
 8100d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100d70:	697b      	ldr	r3, [r7, #20]
 8100d72:	685b      	ldr	r3, [r3, #4]
 8100d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d76:	693b      	ldr	r3, [r7, #16]
 8100d78:	43db      	mvns	r3, r3
 8100d7a:	69ba      	ldr	r2, [r7, #24]
 8100d7c:	4013      	ands	r3, r2
 8100d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100d80:	683b      	ldr	r3, [r7, #0]
 8100d82:	685b      	ldr	r3, [r3, #4]
 8100d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100d88:	2b00      	cmp	r3, #0
 8100d8a:	d003      	beq.n	8100d94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100d8c:	69ba      	ldr	r2, [r7, #24]
 8100d8e:	693b      	ldr	r3, [r7, #16]
 8100d90:	4313      	orrs	r3, r2
 8100d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100d94:	697b      	ldr	r3, [r7, #20]
 8100d96:	69ba      	ldr	r2, [r7, #24]
 8100d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100d9a:	697b      	ldr	r3, [r7, #20]
 8100d9c:	681b      	ldr	r3, [r3, #0]
 8100d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100da0:	693b      	ldr	r3, [r7, #16]
 8100da2:	43db      	mvns	r3, r3
 8100da4:	69ba      	ldr	r2, [r7, #24]
 8100da6:	4013      	ands	r3, r2
 8100da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100daa:	683b      	ldr	r3, [r7, #0]
 8100dac:	685b      	ldr	r3, [r3, #4]
 8100dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100db2:	2b00      	cmp	r3, #0
 8100db4:	d003      	beq.n	8100dbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100db6:	69ba      	ldr	r2, [r7, #24]
 8100db8:	693b      	ldr	r3, [r7, #16]
 8100dba:	4313      	orrs	r3, r2
 8100dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100dbe:	697b      	ldr	r3, [r7, #20]
 8100dc0:	69ba      	ldr	r2, [r7, #24]
 8100dc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100dc4:	69fb      	ldr	r3, [r7, #28]
 8100dc6:	3301      	adds	r3, #1
 8100dc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100dca:	683b      	ldr	r3, [r7, #0]
 8100dcc:	681a      	ldr	r2, [r3, #0]
 8100dce:	69fb      	ldr	r3, [r7, #28]
 8100dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8100dd4:	2b00      	cmp	r3, #0
 8100dd6:	f47f ae63 	bne.w	8100aa0 <HAL_GPIO_Init+0x14>
  }
}
 8100dda:	bf00      	nop
 8100ddc:	bf00      	nop
 8100dde:	3724      	adds	r7, #36	; 0x24
 8100de0:	46bd      	mov	sp, r7
 8100de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de6:	4770      	bx	lr
 8100de8:	58000400 	.word	0x58000400

08100dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100dec:	b480      	push	{r7}
 8100dee:	b083      	sub	sp, #12
 8100df0:	af00      	add	r7, sp, #0
 8100df2:	6078      	str	r0, [r7, #4]
 8100df4:	460b      	mov	r3, r1
 8100df6:	807b      	strh	r3, [r7, #2]
 8100df8:	4613      	mov	r3, r2
 8100dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100dfc:	787b      	ldrb	r3, [r7, #1]
 8100dfe:	2b00      	cmp	r3, #0
 8100e00:	d003      	beq.n	8100e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100e02:	887a      	ldrh	r2, [r7, #2]
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100e08:	e003      	b.n	8100e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100e0a:	887b      	ldrh	r3, [r7, #2]
 8100e0c:	041a      	lsls	r2, r3, #16
 8100e0e:	687b      	ldr	r3, [r7, #4]
 8100e10:	619a      	str	r2, [r3, #24]
}
 8100e12:	bf00      	nop
 8100e14:	370c      	adds	r7, #12
 8100e16:	46bd      	mov	sp, r7
 8100e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e1c:	4770      	bx	lr

08100e1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100e1e:	b480      	push	{r7}
 8100e20:	b085      	sub	sp, #20
 8100e22:	af00      	add	r7, sp, #0
 8100e24:	6078      	str	r0, [r7, #4]
 8100e26:	460b      	mov	r3, r1
 8100e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100e2a:	687b      	ldr	r3, [r7, #4]
 8100e2c:	695b      	ldr	r3, [r3, #20]
 8100e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100e30:	887a      	ldrh	r2, [r7, #2]
 8100e32:	68fb      	ldr	r3, [r7, #12]
 8100e34:	4013      	ands	r3, r2
 8100e36:	041a      	lsls	r2, r3, #16
 8100e38:	68fb      	ldr	r3, [r7, #12]
 8100e3a:	43d9      	mvns	r1, r3
 8100e3c:	887b      	ldrh	r3, [r7, #2]
 8100e3e:	400b      	ands	r3, r1
 8100e40:	431a      	orrs	r2, r3
 8100e42:	687b      	ldr	r3, [r7, #4]
 8100e44:	619a      	str	r2, [r3, #24]
}
 8100e46:	bf00      	nop
 8100e48:	3714      	adds	r7, #20
 8100e4a:	46bd      	mov	sp, r7
 8100e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e50:	4770      	bx	lr

08100e52 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8100e52:	b580      	push	{r7, lr}
 8100e54:	b082      	sub	sp, #8
 8100e56:	af00      	add	r7, sp, #0
 8100e58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8100e5a:	687b      	ldr	r3, [r7, #4]
 8100e5c:	2b00      	cmp	r3, #0
 8100e5e:	d101      	bne.n	8100e64 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8100e60:	2301      	movs	r3, #1
 8100e62:	e081      	b.n	8100f68 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8100e64:	687b      	ldr	r3, [r7, #4]
 8100e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8100e6a:	b2db      	uxtb	r3, r3
 8100e6c:	2b00      	cmp	r3, #0
 8100e6e:	d106      	bne.n	8100e7e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	2200      	movs	r2, #0
 8100e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8100e78:	6878      	ldr	r0, [r7, #4]
 8100e7a:	f7ff fb8f 	bl	810059c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8100e7e:	687b      	ldr	r3, [r7, #4]
 8100e80:	2224      	movs	r2, #36	; 0x24
 8100e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8100e86:	687b      	ldr	r3, [r7, #4]
 8100e88:	681b      	ldr	r3, [r3, #0]
 8100e8a:	681a      	ldr	r2, [r3, #0]
 8100e8c:	687b      	ldr	r3, [r7, #4]
 8100e8e:	681b      	ldr	r3, [r3, #0]
 8100e90:	f022 0201 	bic.w	r2, r2, #1
 8100e94:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8100e96:	687b      	ldr	r3, [r7, #4]
 8100e98:	685a      	ldr	r2, [r3, #4]
 8100e9a:	687b      	ldr	r3, [r7, #4]
 8100e9c:	681b      	ldr	r3, [r3, #0]
 8100e9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8100ea2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8100ea4:	687b      	ldr	r3, [r7, #4]
 8100ea6:	681b      	ldr	r3, [r3, #0]
 8100ea8:	689a      	ldr	r2, [r3, #8]
 8100eaa:	687b      	ldr	r3, [r7, #4]
 8100eac:	681b      	ldr	r3, [r3, #0]
 8100eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8100eb2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8100eb4:	687b      	ldr	r3, [r7, #4]
 8100eb6:	68db      	ldr	r3, [r3, #12]
 8100eb8:	2b01      	cmp	r3, #1
 8100eba:	d107      	bne.n	8100ecc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8100ebc:	687b      	ldr	r3, [r7, #4]
 8100ebe:	689a      	ldr	r2, [r3, #8]
 8100ec0:	687b      	ldr	r3, [r7, #4]
 8100ec2:	681b      	ldr	r3, [r3, #0]
 8100ec4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8100ec8:	609a      	str	r2, [r3, #8]
 8100eca:	e006      	b.n	8100eda <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8100ecc:	687b      	ldr	r3, [r7, #4]
 8100ece:	689a      	ldr	r2, [r3, #8]
 8100ed0:	687b      	ldr	r3, [r7, #4]
 8100ed2:	681b      	ldr	r3, [r3, #0]
 8100ed4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8100ed8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	68db      	ldr	r3, [r3, #12]
 8100ede:	2b02      	cmp	r3, #2
 8100ee0:	d104      	bne.n	8100eec <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8100ee2:	687b      	ldr	r3, [r7, #4]
 8100ee4:	681b      	ldr	r3, [r3, #0]
 8100ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8100eea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8100eec:	687b      	ldr	r3, [r7, #4]
 8100eee:	681b      	ldr	r3, [r3, #0]
 8100ef0:	685b      	ldr	r3, [r3, #4]
 8100ef2:	687a      	ldr	r2, [r7, #4]
 8100ef4:	6812      	ldr	r2, [r2, #0]
 8100ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100efe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8100f00:	687b      	ldr	r3, [r7, #4]
 8100f02:	681b      	ldr	r3, [r3, #0]
 8100f04:	68da      	ldr	r2, [r3, #12]
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	681b      	ldr	r3, [r3, #0]
 8100f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8100f0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8100f10:	687b      	ldr	r3, [r7, #4]
 8100f12:	691a      	ldr	r2, [r3, #16]
 8100f14:	687b      	ldr	r3, [r7, #4]
 8100f16:	695b      	ldr	r3, [r3, #20]
 8100f18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8100f1c:	687b      	ldr	r3, [r7, #4]
 8100f1e:	699b      	ldr	r3, [r3, #24]
 8100f20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8100f22:	687b      	ldr	r3, [r7, #4]
 8100f24:	681b      	ldr	r3, [r3, #0]
 8100f26:	430a      	orrs	r2, r1
 8100f28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	69d9      	ldr	r1, [r3, #28]
 8100f2e:	687b      	ldr	r3, [r7, #4]
 8100f30:	6a1a      	ldr	r2, [r3, #32]
 8100f32:	687b      	ldr	r3, [r7, #4]
 8100f34:	681b      	ldr	r3, [r3, #0]
 8100f36:	430a      	orrs	r2, r1
 8100f38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	681b      	ldr	r3, [r3, #0]
 8100f3e:	681a      	ldr	r2, [r3, #0]
 8100f40:	687b      	ldr	r3, [r7, #4]
 8100f42:	681b      	ldr	r3, [r3, #0]
 8100f44:	f042 0201 	orr.w	r2, r2, #1
 8100f48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8100f4a:	687b      	ldr	r3, [r7, #4]
 8100f4c:	2200      	movs	r2, #0
 8100f4e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8100f50:	687b      	ldr	r3, [r7, #4]
 8100f52:	2220      	movs	r2, #32
 8100f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8100f58:	687b      	ldr	r3, [r7, #4]
 8100f5a:	2200      	movs	r2, #0
 8100f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8100f5e:	687b      	ldr	r3, [r7, #4]
 8100f60:	2200      	movs	r2, #0
 8100f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8100f66:	2300      	movs	r3, #0
}
 8100f68:	4618      	mov	r0, r3
 8100f6a:	3708      	adds	r7, #8
 8100f6c:	46bd      	mov	sp, r7
 8100f6e:	bd80      	pop	{r7, pc}

08100f70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8100f70:	b480      	push	{r7}
 8100f72:	b083      	sub	sp, #12
 8100f74:	af00      	add	r7, sp, #0
 8100f76:	6078      	str	r0, [r7, #4]
 8100f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8100f7a:	687b      	ldr	r3, [r7, #4]
 8100f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8100f80:	b2db      	uxtb	r3, r3
 8100f82:	2b20      	cmp	r3, #32
 8100f84:	d138      	bne.n	8100ff8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8100f8c:	2b01      	cmp	r3, #1
 8100f8e:	d101      	bne.n	8100f94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8100f90:	2302      	movs	r3, #2
 8100f92:	e032      	b.n	8100ffa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8100f94:	687b      	ldr	r3, [r7, #4]
 8100f96:	2201      	movs	r2, #1
 8100f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8100f9c:	687b      	ldr	r3, [r7, #4]
 8100f9e:	2224      	movs	r2, #36	; 0x24
 8100fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8100fa4:	687b      	ldr	r3, [r7, #4]
 8100fa6:	681b      	ldr	r3, [r3, #0]
 8100fa8:	681a      	ldr	r2, [r3, #0]
 8100faa:	687b      	ldr	r3, [r7, #4]
 8100fac:	681b      	ldr	r3, [r3, #0]
 8100fae:	f022 0201 	bic.w	r2, r2, #1
 8100fb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8100fb4:	687b      	ldr	r3, [r7, #4]
 8100fb6:	681b      	ldr	r3, [r3, #0]
 8100fb8:	681a      	ldr	r2, [r3, #0]
 8100fba:	687b      	ldr	r3, [r7, #4]
 8100fbc:	681b      	ldr	r3, [r3, #0]
 8100fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8100fc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8100fc4:	687b      	ldr	r3, [r7, #4]
 8100fc6:	681b      	ldr	r3, [r3, #0]
 8100fc8:	6819      	ldr	r1, [r3, #0]
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	683a      	ldr	r2, [r7, #0]
 8100fd0:	430a      	orrs	r2, r1
 8100fd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8100fd4:	687b      	ldr	r3, [r7, #4]
 8100fd6:	681b      	ldr	r3, [r3, #0]
 8100fd8:	681a      	ldr	r2, [r3, #0]
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	681b      	ldr	r3, [r3, #0]
 8100fde:	f042 0201 	orr.w	r2, r2, #1
 8100fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8100fe4:	687b      	ldr	r3, [r7, #4]
 8100fe6:	2220      	movs	r2, #32
 8100fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8100fec:	687b      	ldr	r3, [r7, #4]
 8100fee:	2200      	movs	r2, #0
 8100ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8100ff4:	2300      	movs	r3, #0
 8100ff6:	e000      	b.n	8100ffa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8100ff8:	2302      	movs	r3, #2
  }
}
 8100ffa:	4618      	mov	r0, r3
 8100ffc:	370c      	adds	r7, #12
 8100ffe:	46bd      	mov	sp, r7
 8101000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101004:	4770      	bx	lr

08101006 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8101006:	b480      	push	{r7}
 8101008:	b085      	sub	sp, #20
 810100a:	af00      	add	r7, sp, #0
 810100c:	6078      	str	r0, [r7, #4]
 810100e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101010:	687b      	ldr	r3, [r7, #4]
 8101012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101016:	b2db      	uxtb	r3, r3
 8101018:	2b20      	cmp	r3, #32
 810101a:	d139      	bne.n	8101090 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810101c:	687b      	ldr	r3, [r7, #4]
 810101e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101022:	2b01      	cmp	r3, #1
 8101024:	d101      	bne.n	810102a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8101026:	2302      	movs	r3, #2
 8101028:	e033      	b.n	8101092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	2201      	movs	r2, #1
 810102e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101032:	687b      	ldr	r3, [r7, #4]
 8101034:	2224      	movs	r2, #36	; 0x24
 8101036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810103a:	687b      	ldr	r3, [r7, #4]
 810103c:	681b      	ldr	r3, [r3, #0]
 810103e:	681a      	ldr	r2, [r3, #0]
 8101040:	687b      	ldr	r3, [r7, #4]
 8101042:	681b      	ldr	r3, [r3, #0]
 8101044:	f022 0201 	bic.w	r2, r2, #1
 8101048:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810104a:	687b      	ldr	r3, [r7, #4]
 810104c:	681b      	ldr	r3, [r3, #0]
 810104e:	681b      	ldr	r3, [r3, #0]
 8101050:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8101052:	68fb      	ldr	r3, [r7, #12]
 8101054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101058:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810105a:	683b      	ldr	r3, [r7, #0]
 810105c:	021b      	lsls	r3, r3, #8
 810105e:	68fa      	ldr	r2, [r7, #12]
 8101060:	4313      	orrs	r3, r2
 8101062:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8101064:	687b      	ldr	r3, [r7, #4]
 8101066:	681b      	ldr	r3, [r3, #0]
 8101068:	68fa      	ldr	r2, [r7, #12]
 810106a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810106c:	687b      	ldr	r3, [r7, #4]
 810106e:	681b      	ldr	r3, [r3, #0]
 8101070:	681a      	ldr	r2, [r3, #0]
 8101072:	687b      	ldr	r3, [r7, #4]
 8101074:	681b      	ldr	r3, [r3, #0]
 8101076:	f042 0201 	orr.w	r2, r2, #1
 810107a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810107c:	687b      	ldr	r3, [r7, #4]
 810107e:	2220      	movs	r2, #32
 8101080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101084:	687b      	ldr	r3, [r7, #4]
 8101086:	2200      	movs	r2, #0
 8101088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810108c:	2300      	movs	r3, #0
 810108e:	e000      	b.n	8101092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8101090:	2302      	movs	r3, #2
  }
}
 8101092:	4618      	mov	r0, r3
 8101094:	3714      	adds	r7, #20
 8101096:	46bd      	mov	sp, r7
 8101098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810109c:	4770      	bx	lr
	...

081010a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81010a0:	b480      	push	{r7}
 81010a2:	b089      	sub	sp, #36	; 0x24
 81010a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81010a6:	4bb3      	ldr	r3, [pc, #716]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010a8:	691b      	ldr	r3, [r3, #16]
 81010aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81010ae:	2b18      	cmp	r3, #24
 81010b0:	f200 8155 	bhi.w	810135e <HAL_RCC_GetSysClockFreq+0x2be>
 81010b4:	a201      	add	r2, pc, #4	; (adr r2, 81010bc <HAL_RCC_GetSysClockFreq+0x1c>)
 81010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81010ba:	bf00      	nop
 81010bc:	08101121 	.word	0x08101121
 81010c0:	0810135f 	.word	0x0810135f
 81010c4:	0810135f 	.word	0x0810135f
 81010c8:	0810135f 	.word	0x0810135f
 81010cc:	0810135f 	.word	0x0810135f
 81010d0:	0810135f 	.word	0x0810135f
 81010d4:	0810135f 	.word	0x0810135f
 81010d8:	0810135f 	.word	0x0810135f
 81010dc:	08101147 	.word	0x08101147
 81010e0:	0810135f 	.word	0x0810135f
 81010e4:	0810135f 	.word	0x0810135f
 81010e8:	0810135f 	.word	0x0810135f
 81010ec:	0810135f 	.word	0x0810135f
 81010f0:	0810135f 	.word	0x0810135f
 81010f4:	0810135f 	.word	0x0810135f
 81010f8:	0810135f 	.word	0x0810135f
 81010fc:	0810114d 	.word	0x0810114d
 8101100:	0810135f 	.word	0x0810135f
 8101104:	0810135f 	.word	0x0810135f
 8101108:	0810135f 	.word	0x0810135f
 810110c:	0810135f 	.word	0x0810135f
 8101110:	0810135f 	.word	0x0810135f
 8101114:	0810135f 	.word	0x0810135f
 8101118:	0810135f 	.word	0x0810135f
 810111c:	08101153 	.word	0x08101153
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101120:	4b94      	ldr	r3, [pc, #592]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101122:	681b      	ldr	r3, [r3, #0]
 8101124:	f003 0320 	and.w	r3, r3, #32
 8101128:	2b00      	cmp	r3, #0
 810112a:	d009      	beq.n	8101140 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810112c:	4b91      	ldr	r3, [pc, #580]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810112e:	681b      	ldr	r3, [r3, #0]
 8101130:	08db      	lsrs	r3, r3, #3
 8101132:	f003 0303 	and.w	r3, r3, #3
 8101136:	4a90      	ldr	r2, [pc, #576]	; (8101378 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101138:	fa22 f303 	lsr.w	r3, r2, r3
 810113c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810113e:	e111      	b.n	8101364 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101140:	4b8d      	ldr	r3, [pc, #564]	; (8101378 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101142:	61bb      	str	r3, [r7, #24]
    break;
 8101144:	e10e      	b.n	8101364 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101146:	4b8d      	ldr	r3, [pc, #564]	; (810137c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101148:	61bb      	str	r3, [r7, #24]
    break;
 810114a:	e10b      	b.n	8101364 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810114c:	4b8c      	ldr	r3, [pc, #560]	; (8101380 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810114e:	61bb      	str	r3, [r7, #24]
    break;
 8101150:	e108      	b.n	8101364 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101152:	4b88      	ldr	r3, [pc, #544]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101156:	f003 0303 	and.w	r3, r3, #3
 810115a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810115c:	4b85      	ldr	r3, [pc, #532]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101160:	091b      	lsrs	r3, r3, #4
 8101162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101166:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101168:	4b82      	ldr	r3, [pc, #520]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810116c:	f003 0301 	and.w	r3, r3, #1
 8101170:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101172:	4b80      	ldr	r3, [pc, #512]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101176:	08db      	lsrs	r3, r3, #3
 8101178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810117c:	68fa      	ldr	r2, [r7, #12]
 810117e:	fb02 f303 	mul.w	r3, r2, r3
 8101182:	ee07 3a90 	vmov	s15, r3
 8101186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810118a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810118e:	693b      	ldr	r3, [r7, #16]
 8101190:	2b00      	cmp	r3, #0
 8101192:	f000 80e1 	beq.w	8101358 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101196:	697b      	ldr	r3, [r7, #20]
 8101198:	2b02      	cmp	r3, #2
 810119a:	f000 8083 	beq.w	81012a4 <HAL_RCC_GetSysClockFreq+0x204>
 810119e:	697b      	ldr	r3, [r7, #20]
 81011a0:	2b02      	cmp	r3, #2
 81011a2:	f200 80a1 	bhi.w	81012e8 <HAL_RCC_GetSysClockFreq+0x248>
 81011a6:	697b      	ldr	r3, [r7, #20]
 81011a8:	2b00      	cmp	r3, #0
 81011aa:	d003      	beq.n	81011b4 <HAL_RCC_GetSysClockFreq+0x114>
 81011ac:	697b      	ldr	r3, [r7, #20]
 81011ae:	2b01      	cmp	r3, #1
 81011b0:	d056      	beq.n	8101260 <HAL_RCC_GetSysClockFreq+0x1c0>
 81011b2:	e099      	b.n	81012e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81011b4:	4b6f      	ldr	r3, [pc, #444]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011b6:	681b      	ldr	r3, [r3, #0]
 81011b8:	f003 0320 	and.w	r3, r3, #32
 81011bc:	2b00      	cmp	r3, #0
 81011be:	d02d      	beq.n	810121c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81011c0:	4b6c      	ldr	r3, [pc, #432]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011c2:	681b      	ldr	r3, [r3, #0]
 81011c4:	08db      	lsrs	r3, r3, #3
 81011c6:	f003 0303 	and.w	r3, r3, #3
 81011ca:	4a6b      	ldr	r2, [pc, #428]	; (8101378 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81011cc:	fa22 f303 	lsr.w	r3, r2, r3
 81011d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81011d2:	687b      	ldr	r3, [r7, #4]
 81011d4:	ee07 3a90 	vmov	s15, r3
 81011d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011dc:	693b      	ldr	r3, [r7, #16]
 81011de:	ee07 3a90 	vmov	s15, r3
 81011e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011ea:	4b62      	ldr	r3, [pc, #392]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81011ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81011f2:	ee07 3a90 	vmov	s15, r3
 81011f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81011fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101384 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810120a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810120e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101216:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810121a:	e087      	b.n	810132c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810121c:	693b      	ldr	r3, [r7, #16]
 810121e:	ee07 3a90 	vmov	s15, r3
 8101222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101226:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101388 <HAL_RCC_GetSysClockFreq+0x2e8>
 810122a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810122e:	4b51      	ldr	r3, [pc, #324]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101236:	ee07 3a90 	vmov	s15, r3
 810123a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810123e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101242:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101384 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810124a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810124e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101256:	ee67 7a27 	vmul.f32	s15, s14, s15
 810125a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810125e:	e065      	b.n	810132c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101260:	693b      	ldr	r3, [r7, #16]
 8101262:	ee07 3a90 	vmov	s15, r3
 8101266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810126a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810138c <HAL_RCC_GetSysClockFreq+0x2ec>
 810126e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101272:	4b40      	ldr	r3, [pc, #256]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810127a:	ee07 3a90 	vmov	s15, r3
 810127e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101282:	ed97 6a02 	vldr	s12, [r7, #8]
 8101286:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101384 <HAL_RCC_GetSysClockFreq+0x2e4>
 810128a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810128e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810129a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810129e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81012a2:	e043      	b.n	810132c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81012a4:	693b      	ldr	r3, [r7, #16]
 81012a6:	ee07 3a90 	vmov	s15, r3
 81012aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101390 <HAL_RCC_GetSysClockFreq+0x2f0>
 81012b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012b6:	4b2f      	ldr	r3, [pc, #188]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012be:	ee07 3a90 	vmov	s15, r3
 81012c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81012ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101384 <HAL_RCC_GetSysClockFreq+0x2e4>
 81012ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81012d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81012d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81012da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81012de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81012e6:	e021      	b.n	810132c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81012e8:	693b      	ldr	r3, [r7, #16]
 81012ea:	ee07 3a90 	vmov	s15, r3
 81012ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810138c <HAL_RCC_GetSysClockFreq+0x2ec>
 81012f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012fa:	4b1e      	ldr	r3, [pc, #120]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101302:	ee07 3a90 	vmov	s15, r3
 8101306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810130a:	ed97 6a02 	vldr	s12, [r7, #8]
 810130e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101384 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810131a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810131e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810132a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810132c:	4b11      	ldr	r3, [pc, #68]	; (8101374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101330:	0a5b      	lsrs	r3, r3, #9
 8101332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101336:	3301      	adds	r3, #1
 8101338:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810133a:	683b      	ldr	r3, [r7, #0]
 810133c:	ee07 3a90 	vmov	s15, r3
 8101340:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101344:	edd7 6a07 	vldr	s13, [r7, #28]
 8101348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810134c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101350:	ee17 3a90 	vmov	r3, s15
 8101354:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101356:	e005      	b.n	8101364 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101358:	2300      	movs	r3, #0
 810135a:	61bb      	str	r3, [r7, #24]
    break;
 810135c:	e002      	b.n	8101364 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810135e:	4b07      	ldr	r3, [pc, #28]	; (810137c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101360:	61bb      	str	r3, [r7, #24]
    break;
 8101362:	bf00      	nop
  }

  return sysclockfreq;
 8101364:	69bb      	ldr	r3, [r7, #24]
}
 8101366:	4618      	mov	r0, r3
 8101368:	3724      	adds	r7, #36	; 0x24
 810136a:	46bd      	mov	sp, r7
 810136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101370:	4770      	bx	lr
 8101372:	bf00      	nop
 8101374:	58024400 	.word	0x58024400
 8101378:	03d09000 	.word	0x03d09000
 810137c:	003d0900 	.word	0x003d0900
 8101380:	017d7840 	.word	0x017d7840
 8101384:	46000000 	.word	0x46000000
 8101388:	4c742400 	.word	0x4c742400
 810138c:	4a742400 	.word	0x4a742400
 8101390:	4bbebc20 	.word	0x4bbebc20

08101394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101394:	b580      	push	{r7, lr}
 8101396:	b082      	sub	sp, #8
 8101398:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810139a:	f7ff fe81 	bl	81010a0 <HAL_RCC_GetSysClockFreq>
 810139e:	4602      	mov	r2, r0
 81013a0:	4b11      	ldr	r3, [pc, #68]	; (81013e8 <HAL_RCC_GetHCLKFreq+0x54>)
 81013a2:	699b      	ldr	r3, [r3, #24]
 81013a4:	0a1b      	lsrs	r3, r3, #8
 81013a6:	f003 030f 	and.w	r3, r3, #15
 81013aa:	4910      	ldr	r1, [pc, #64]	; (81013ec <HAL_RCC_GetHCLKFreq+0x58>)
 81013ac:	5ccb      	ldrb	r3, [r1, r3]
 81013ae:	f003 031f 	and.w	r3, r3, #31
 81013b2:	fa22 f303 	lsr.w	r3, r2, r3
 81013b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81013b8:	4b0b      	ldr	r3, [pc, #44]	; (81013e8 <HAL_RCC_GetHCLKFreq+0x54>)
 81013ba:	699b      	ldr	r3, [r3, #24]
 81013bc:	f003 030f 	and.w	r3, r3, #15
 81013c0:	4a0a      	ldr	r2, [pc, #40]	; (81013ec <HAL_RCC_GetHCLKFreq+0x58>)
 81013c2:	5cd3      	ldrb	r3, [r2, r3]
 81013c4:	f003 031f 	and.w	r3, r3, #31
 81013c8:	687a      	ldr	r2, [r7, #4]
 81013ca:	fa22 f303 	lsr.w	r3, r2, r3
 81013ce:	4a08      	ldr	r2, [pc, #32]	; (81013f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81013d0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81013d2:	4b07      	ldr	r3, [pc, #28]	; (81013f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81013d4:	681b      	ldr	r3, [r3, #0]
 81013d6:	4a07      	ldr	r2, [pc, #28]	; (81013f4 <HAL_RCC_GetHCLKFreq+0x60>)
 81013d8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81013da:	4b05      	ldr	r3, [pc, #20]	; (81013f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81013dc:	681b      	ldr	r3, [r3, #0]
}
 81013de:	4618      	mov	r0, r3
 81013e0:	3708      	adds	r7, #8
 81013e2:	46bd      	mov	sp, r7
 81013e4:	bd80      	pop	{r7, pc}
 81013e6:	bf00      	nop
 81013e8:	58024400 	.word	0x58024400
 81013ec:	08105974 	.word	0x08105974
 81013f0:	10000004 	.word	0x10000004
 81013f4:	10000000 	.word	0x10000000

081013f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81013f8:	b580      	push	{r7, lr}
 81013fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81013fc:	f7ff ffca 	bl	8101394 <HAL_RCC_GetHCLKFreq>
 8101400:	4602      	mov	r2, r0
 8101402:	4b06      	ldr	r3, [pc, #24]	; (810141c <HAL_RCC_GetPCLK1Freq+0x24>)
 8101404:	69db      	ldr	r3, [r3, #28]
 8101406:	091b      	lsrs	r3, r3, #4
 8101408:	f003 0307 	and.w	r3, r3, #7
 810140c:	4904      	ldr	r1, [pc, #16]	; (8101420 <HAL_RCC_GetPCLK1Freq+0x28>)
 810140e:	5ccb      	ldrb	r3, [r1, r3]
 8101410:	f003 031f 	and.w	r3, r3, #31
 8101414:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101418:	4618      	mov	r0, r3
 810141a:	bd80      	pop	{r7, pc}
 810141c:	58024400 	.word	0x58024400
 8101420:	08105974 	.word	0x08105974

08101424 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101424:	b480      	push	{r7}
 8101426:	b083      	sub	sp, #12
 8101428:	af00      	add	r7, sp, #0
 810142a:	6078      	str	r0, [r7, #4]
 810142c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810142e:	687b      	ldr	r3, [r7, #4]
 8101430:	223f      	movs	r2, #63	; 0x3f
 8101432:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101434:	4b1a      	ldr	r3, [pc, #104]	; (81014a0 <HAL_RCC_GetClockConfig+0x7c>)
 8101436:	691b      	ldr	r3, [r3, #16]
 8101438:	f003 0207 	and.w	r2, r3, #7
 810143c:	687b      	ldr	r3, [r7, #4]
 810143e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101440:	4b17      	ldr	r3, [pc, #92]	; (81014a0 <HAL_RCC_GetClockConfig+0x7c>)
 8101442:	699b      	ldr	r3, [r3, #24]
 8101444:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101448:	687b      	ldr	r3, [r7, #4]
 810144a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810144c:	4b14      	ldr	r3, [pc, #80]	; (81014a0 <HAL_RCC_GetClockConfig+0x7c>)
 810144e:	699b      	ldr	r3, [r3, #24]
 8101450:	f003 020f 	and.w	r2, r3, #15
 8101454:	687b      	ldr	r3, [r7, #4]
 8101456:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101458:	4b11      	ldr	r3, [pc, #68]	; (81014a0 <HAL_RCC_GetClockConfig+0x7c>)
 810145a:	699b      	ldr	r3, [r3, #24]
 810145c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101460:	687b      	ldr	r3, [r7, #4]
 8101462:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101464:	4b0e      	ldr	r3, [pc, #56]	; (81014a0 <HAL_RCC_GetClockConfig+0x7c>)
 8101466:	69db      	ldr	r3, [r3, #28]
 8101468:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101470:	4b0b      	ldr	r3, [pc, #44]	; (81014a0 <HAL_RCC_GetClockConfig+0x7c>)
 8101472:	69db      	ldr	r3, [r3, #28]
 8101474:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101478:	687b      	ldr	r3, [r7, #4]
 810147a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810147c:	4b08      	ldr	r3, [pc, #32]	; (81014a0 <HAL_RCC_GetClockConfig+0x7c>)
 810147e:	6a1b      	ldr	r3, [r3, #32]
 8101480:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101488:	4b06      	ldr	r3, [pc, #24]	; (81014a4 <HAL_RCC_GetClockConfig+0x80>)
 810148a:	681b      	ldr	r3, [r3, #0]
 810148c:	f003 020f 	and.w	r2, r3, #15
 8101490:	683b      	ldr	r3, [r7, #0]
 8101492:	601a      	str	r2, [r3, #0]
}
 8101494:	bf00      	nop
 8101496:	370c      	adds	r7, #12
 8101498:	46bd      	mov	sp, r7
 810149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810149e:	4770      	bx	lr
 81014a0:	58024400 	.word	0x58024400
 81014a4:	52002000 	.word	0x52002000

081014a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81014a8:	b580      	push	{r7, lr}
 81014aa:	b086      	sub	sp, #24
 81014ac:	af00      	add	r7, sp, #0
 81014ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81014b0:	2300      	movs	r3, #0
 81014b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81014b4:	2300      	movs	r3, #0
 81014b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	681b      	ldr	r3, [r3, #0]
 81014bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81014c0:	2b00      	cmp	r3, #0
 81014c2:	d03f      	beq.n	8101544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81014c4:	687b      	ldr	r3, [r7, #4]
 81014c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81014c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81014cc:	d02a      	beq.n	8101524 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81014ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81014d2:	d824      	bhi.n	810151e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81014d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81014d8:	d018      	beq.n	810150c <HAL_RCCEx_PeriphCLKConfig+0x64>
 81014da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81014de:	d81e      	bhi.n	810151e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81014e0:	2b00      	cmp	r3, #0
 81014e2:	d003      	beq.n	81014ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 81014e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81014e8:	d007      	beq.n	81014fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 81014ea:	e018      	b.n	810151e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81014ec:	4ba3      	ldr	r3, [pc, #652]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81014f0:	4aa2      	ldr	r2, [pc, #648]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81014f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81014f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81014f8:	e015      	b.n	8101526 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81014fa:	687b      	ldr	r3, [r7, #4]
 81014fc:	3304      	adds	r3, #4
 81014fe:	2102      	movs	r1, #2
 8101500:	4618      	mov	r0, r3
 8101502:	f000 ff17 	bl	8102334 <RCCEx_PLL2_Config>
 8101506:	4603      	mov	r3, r0
 8101508:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810150a:	e00c      	b.n	8101526 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810150c:	687b      	ldr	r3, [r7, #4]
 810150e:	3324      	adds	r3, #36	; 0x24
 8101510:	2102      	movs	r1, #2
 8101512:	4618      	mov	r0, r3
 8101514:	f000 ffc0 	bl	8102498 <RCCEx_PLL3_Config>
 8101518:	4603      	mov	r3, r0
 810151a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810151c:	e003      	b.n	8101526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810151e:	2301      	movs	r3, #1
 8101520:	75fb      	strb	r3, [r7, #23]
      break;
 8101522:	e000      	b.n	8101526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8101524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101526:	7dfb      	ldrb	r3, [r7, #23]
 8101528:	2b00      	cmp	r3, #0
 810152a:	d109      	bne.n	8101540 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810152c:	4b93      	ldr	r3, [pc, #588]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810152e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101534:	687b      	ldr	r3, [r7, #4]
 8101536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101538:	4990      	ldr	r1, [pc, #576]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810153a:	4313      	orrs	r3, r2
 810153c:	650b      	str	r3, [r1, #80]	; 0x50
 810153e:	e001      	b.n	8101544 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101540:	7dfb      	ldrb	r3, [r7, #23]
 8101542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101544:	687b      	ldr	r3, [r7, #4]
 8101546:	681b      	ldr	r3, [r3, #0]
 8101548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810154c:	2b00      	cmp	r3, #0
 810154e:	d03d      	beq.n	81015cc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8101550:	687b      	ldr	r3, [r7, #4]
 8101552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101554:	2b04      	cmp	r3, #4
 8101556:	d826      	bhi.n	81015a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8101558:	a201      	add	r2, pc, #4	; (adr r2, 8101560 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810155e:	bf00      	nop
 8101560:	08101575 	.word	0x08101575
 8101564:	08101583 	.word	0x08101583
 8101568:	08101595 	.word	0x08101595
 810156c:	081015ad 	.word	0x081015ad
 8101570:	081015ad 	.word	0x081015ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101574:	4b81      	ldr	r3, [pc, #516]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101578:	4a80      	ldr	r2, [pc, #512]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810157a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810157e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101580:	e015      	b.n	81015ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101582:	687b      	ldr	r3, [r7, #4]
 8101584:	3304      	adds	r3, #4
 8101586:	2100      	movs	r1, #0
 8101588:	4618      	mov	r0, r3
 810158a:	f000 fed3 	bl	8102334 <RCCEx_PLL2_Config>
 810158e:	4603      	mov	r3, r0
 8101590:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101592:	e00c      	b.n	81015ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101594:	687b      	ldr	r3, [r7, #4]
 8101596:	3324      	adds	r3, #36	; 0x24
 8101598:	2100      	movs	r1, #0
 810159a:	4618      	mov	r0, r3
 810159c:	f000 ff7c 	bl	8102498 <RCCEx_PLL3_Config>
 81015a0:	4603      	mov	r3, r0
 81015a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81015a4:	e003      	b.n	81015ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81015a6:	2301      	movs	r3, #1
 81015a8:	75fb      	strb	r3, [r7, #23]
      break;
 81015aa:	e000      	b.n	81015ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81015ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 81015ae:	7dfb      	ldrb	r3, [r7, #23]
 81015b0:	2b00      	cmp	r3, #0
 81015b2:	d109      	bne.n	81015c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81015b4:	4b71      	ldr	r3, [pc, #452]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81015b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81015b8:	f023 0207 	bic.w	r2, r3, #7
 81015bc:	687b      	ldr	r3, [r7, #4]
 81015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81015c0:	496e      	ldr	r1, [pc, #440]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81015c2:	4313      	orrs	r3, r2
 81015c4:	650b      	str	r3, [r1, #80]	; 0x50
 81015c6:	e001      	b.n	81015cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81015c8:	7dfb      	ldrb	r3, [r7, #23]
 81015ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81015cc:	687b      	ldr	r3, [r7, #4]
 81015ce:	681b      	ldr	r3, [r3, #0]
 81015d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81015d4:	2b00      	cmp	r3, #0
 81015d6:	d042      	beq.n	810165e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81015d8:	687b      	ldr	r3, [r7, #4]
 81015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81015dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81015e0:	d02b      	beq.n	810163a <HAL_RCCEx_PeriphCLKConfig+0x192>
 81015e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81015e6:	d825      	bhi.n	8101634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81015e8:	2bc0      	cmp	r3, #192	; 0xc0
 81015ea:	d028      	beq.n	810163e <HAL_RCCEx_PeriphCLKConfig+0x196>
 81015ec:	2bc0      	cmp	r3, #192	; 0xc0
 81015ee:	d821      	bhi.n	8101634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81015f0:	2b80      	cmp	r3, #128	; 0x80
 81015f2:	d016      	beq.n	8101622 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81015f4:	2b80      	cmp	r3, #128	; 0x80
 81015f6:	d81d      	bhi.n	8101634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81015f8:	2b00      	cmp	r3, #0
 81015fa:	d002      	beq.n	8101602 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81015fc:	2b40      	cmp	r3, #64	; 0x40
 81015fe:	d007      	beq.n	8101610 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101600:	e018      	b.n	8101634 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101602:	4b5e      	ldr	r3, [pc, #376]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101606:	4a5d      	ldr	r2, [pc, #372]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810160c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810160e:	e017      	b.n	8101640 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101610:	687b      	ldr	r3, [r7, #4]
 8101612:	3304      	adds	r3, #4
 8101614:	2100      	movs	r1, #0
 8101616:	4618      	mov	r0, r3
 8101618:	f000 fe8c 	bl	8102334 <RCCEx_PLL2_Config>
 810161c:	4603      	mov	r3, r0
 810161e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101620:	e00e      	b.n	8101640 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101622:	687b      	ldr	r3, [r7, #4]
 8101624:	3324      	adds	r3, #36	; 0x24
 8101626:	2100      	movs	r1, #0
 8101628:	4618      	mov	r0, r3
 810162a:	f000 ff35 	bl	8102498 <RCCEx_PLL3_Config>
 810162e:	4603      	mov	r3, r0
 8101630:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101632:	e005      	b.n	8101640 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101634:	2301      	movs	r3, #1
 8101636:	75fb      	strb	r3, [r7, #23]
      break;
 8101638:	e002      	b.n	8101640 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810163a:	bf00      	nop
 810163c:	e000      	b.n	8101640 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810163e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101640:	7dfb      	ldrb	r3, [r7, #23]
 8101642:	2b00      	cmp	r3, #0
 8101644:	d109      	bne.n	810165a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101646:	4b4d      	ldr	r3, [pc, #308]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810164a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810164e:	687b      	ldr	r3, [r7, #4]
 8101650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101652:	494a      	ldr	r1, [pc, #296]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101654:	4313      	orrs	r3, r2
 8101656:	650b      	str	r3, [r1, #80]	; 0x50
 8101658:	e001      	b.n	810165e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810165a:	7dfb      	ldrb	r3, [r7, #23]
 810165c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810165e:	687b      	ldr	r3, [r7, #4]
 8101660:	681b      	ldr	r3, [r3, #0]
 8101662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101666:	2b00      	cmp	r3, #0
 8101668:	d049      	beq.n	81016fe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810166a:	687b      	ldr	r3, [r7, #4]
 810166c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101674:	d030      	beq.n	81016d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8101676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810167a:	d82a      	bhi.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810167c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101680:	d02c      	beq.n	81016dc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101682:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101686:	d824      	bhi.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810168c:	d018      	beq.n	81016c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 810168e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101692:	d81e      	bhi.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101694:	2b00      	cmp	r3, #0
 8101696:	d003      	beq.n	81016a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8101698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810169c:	d007      	beq.n	81016ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 810169e:	e018      	b.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016a0:	4b36      	ldr	r3, [pc, #216]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81016a4:	4a35      	ldr	r2, [pc, #212]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81016a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81016aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81016ac:	e017      	b.n	81016de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	3304      	adds	r3, #4
 81016b2:	2100      	movs	r1, #0
 81016b4:	4618      	mov	r0, r3
 81016b6:	f000 fe3d 	bl	8102334 <RCCEx_PLL2_Config>
 81016ba:	4603      	mov	r3, r0
 81016bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81016be:	e00e      	b.n	81016de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81016c0:	687b      	ldr	r3, [r7, #4]
 81016c2:	3324      	adds	r3, #36	; 0x24
 81016c4:	2100      	movs	r1, #0
 81016c6:	4618      	mov	r0, r3
 81016c8:	f000 fee6 	bl	8102498 <RCCEx_PLL3_Config>
 81016cc:	4603      	mov	r3, r0
 81016ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81016d0:	e005      	b.n	81016de <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81016d2:	2301      	movs	r3, #1
 81016d4:	75fb      	strb	r3, [r7, #23]
      break;
 81016d6:	e002      	b.n	81016de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81016d8:	bf00      	nop
 81016da:	e000      	b.n	81016de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81016dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81016de:	7dfb      	ldrb	r3, [r7, #23]
 81016e0:	2b00      	cmp	r3, #0
 81016e2:	d10a      	bne.n	81016fa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81016e4:	4b25      	ldr	r3, [pc, #148]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81016e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81016ec:	687b      	ldr	r3, [r7, #4]
 81016ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81016f2:	4922      	ldr	r1, [pc, #136]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81016f4:	4313      	orrs	r3, r2
 81016f6:	658b      	str	r3, [r1, #88]	; 0x58
 81016f8:	e001      	b.n	81016fe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81016fa:	7dfb      	ldrb	r3, [r7, #23]
 81016fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	681b      	ldr	r3, [r3, #0]
 8101702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101706:	2b00      	cmp	r3, #0
 8101708:	d04b      	beq.n	81017a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101714:	d030      	beq.n	8101778 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8101716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810171a:	d82a      	bhi.n	8101772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810171c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101720:	d02e      	beq.n	8101780 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8101722:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101726:	d824      	bhi.n	8101772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810172c:	d018      	beq.n	8101760 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810172e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101732:	d81e      	bhi.n	8101772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101734:	2b00      	cmp	r3, #0
 8101736:	d003      	beq.n	8101740 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810173c:	d007      	beq.n	810174e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810173e:	e018      	b.n	8101772 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101740:	4b0e      	ldr	r3, [pc, #56]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101744:	4a0d      	ldr	r2, [pc, #52]	; (810177c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810174a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810174c:	e019      	b.n	8101782 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810174e:	687b      	ldr	r3, [r7, #4]
 8101750:	3304      	adds	r3, #4
 8101752:	2100      	movs	r1, #0
 8101754:	4618      	mov	r0, r3
 8101756:	f000 fded 	bl	8102334 <RCCEx_PLL2_Config>
 810175a:	4603      	mov	r3, r0
 810175c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810175e:	e010      	b.n	8101782 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	3324      	adds	r3, #36	; 0x24
 8101764:	2100      	movs	r1, #0
 8101766:	4618      	mov	r0, r3
 8101768:	f000 fe96 	bl	8102498 <RCCEx_PLL3_Config>
 810176c:	4603      	mov	r3, r0
 810176e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101770:	e007      	b.n	8101782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101772:	2301      	movs	r3, #1
 8101774:	75fb      	strb	r3, [r7, #23]
      break;
 8101776:	e004      	b.n	8101782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8101778:	bf00      	nop
 810177a:	e002      	b.n	8101782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 810177c:	58024400 	.word	0x58024400
      break;
 8101780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101782:	7dfb      	ldrb	r3, [r7, #23]
 8101784:	2b00      	cmp	r3, #0
 8101786:	d10a      	bne.n	810179e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101788:	4b99      	ldr	r3, [pc, #612]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810178c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8101790:	687b      	ldr	r3, [r7, #4]
 8101792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101796:	4996      	ldr	r1, [pc, #600]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101798:	4313      	orrs	r3, r2
 810179a:	658b      	str	r3, [r1, #88]	; 0x58
 810179c:	e001      	b.n	81017a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810179e:	7dfb      	ldrb	r3, [r7, #23]
 81017a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81017a2:	687b      	ldr	r3, [r7, #4]
 81017a4:	681b      	ldr	r3, [r3, #0]
 81017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81017aa:	2b00      	cmp	r3, #0
 81017ac:	d032      	beq.n	8101814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81017ae:	687b      	ldr	r3, [r7, #4]
 81017b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81017b2:	2b30      	cmp	r3, #48	; 0x30
 81017b4:	d01c      	beq.n	81017f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 81017b6:	2b30      	cmp	r3, #48	; 0x30
 81017b8:	d817      	bhi.n	81017ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 81017ba:	2b20      	cmp	r3, #32
 81017bc:	d00c      	beq.n	81017d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 81017be:	2b20      	cmp	r3, #32
 81017c0:	d813      	bhi.n	81017ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 81017c2:	2b00      	cmp	r3, #0
 81017c4:	d016      	beq.n	81017f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 81017c6:	2b10      	cmp	r3, #16
 81017c8:	d10f      	bne.n	81017ea <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017ca:	4b89      	ldr	r3, [pc, #548]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017ce:	4a88      	ldr	r2, [pc, #544]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81017d6:	e00e      	b.n	81017f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81017d8:	687b      	ldr	r3, [r7, #4]
 81017da:	3304      	adds	r3, #4
 81017dc:	2102      	movs	r1, #2
 81017de:	4618      	mov	r0, r3
 81017e0:	f000 fda8 	bl	8102334 <RCCEx_PLL2_Config>
 81017e4:	4603      	mov	r3, r0
 81017e6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81017e8:	e005      	b.n	81017f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81017ea:	2301      	movs	r3, #1
 81017ec:	75fb      	strb	r3, [r7, #23]
      break;
 81017ee:	e002      	b.n	81017f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81017f0:	bf00      	nop
 81017f2:	e000      	b.n	81017f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81017f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81017f6:	7dfb      	ldrb	r3, [r7, #23]
 81017f8:	2b00      	cmp	r3, #0
 81017fa:	d109      	bne.n	8101810 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81017fc:	4b7c      	ldr	r3, [pc, #496]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8101804:	687b      	ldr	r3, [r7, #4]
 8101806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101808:	4979      	ldr	r1, [pc, #484]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810180a:	4313      	orrs	r3, r2
 810180c:	64cb      	str	r3, [r1, #76]	; 0x4c
 810180e:	e001      	b.n	8101814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101810:	7dfb      	ldrb	r3, [r7, #23]
 8101812:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101814:	687b      	ldr	r3, [r7, #4]
 8101816:	681b      	ldr	r3, [r3, #0]
 8101818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810181c:	2b00      	cmp	r3, #0
 810181e:	d047      	beq.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8101820:	687b      	ldr	r3, [r7, #4]
 8101822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101828:	d030      	beq.n	810188c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 810182a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810182e:	d82a      	bhi.n	8101886 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101830:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101834:	d02c      	beq.n	8101890 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8101836:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810183a:	d824      	bhi.n	8101886 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 810183c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101840:	d018      	beq.n	8101874 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8101842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101846:	d81e      	bhi.n	8101886 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101848:	2b00      	cmp	r3, #0
 810184a:	d003      	beq.n	8101854 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 810184c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101850:	d007      	beq.n	8101862 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8101852:	e018      	b.n	8101886 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101854:	4b66      	ldr	r3, [pc, #408]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101858:	4a65      	ldr	r2, [pc, #404]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810185a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810185e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101860:	e017      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101862:	687b      	ldr	r3, [r7, #4]
 8101864:	3304      	adds	r3, #4
 8101866:	2100      	movs	r1, #0
 8101868:	4618      	mov	r0, r3
 810186a:	f000 fd63 	bl	8102334 <RCCEx_PLL2_Config>
 810186e:	4603      	mov	r3, r0
 8101870:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101872:	e00e      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101874:	687b      	ldr	r3, [r7, #4]
 8101876:	3324      	adds	r3, #36	; 0x24
 8101878:	2100      	movs	r1, #0
 810187a:	4618      	mov	r0, r3
 810187c:	f000 fe0c 	bl	8102498 <RCCEx_PLL3_Config>
 8101880:	4603      	mov	r3, r0
 8101882:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101884:	e005      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101886:	2301      	movs	r3, #1
 8101888:	75fb      	strb	r3, [r7, #23]
      break;
 810188a:	e002      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 810188c:	bf00      	nop
 810188e:	e000      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8101890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101892:	7dfb      	ldrb	r3, [r7, #23]
 8101894:	2b00      	cmp	r3, #0
 8101896:	d109      	bne.n	81018ac <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101898:	4b55      	ldr	r3, [pc, #340]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810189a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810189c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81018a4:	4952      	ldr	r1, [pc, #328]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81018a6:	4313      	orrs	r3, r2
 81018a8:	650b      	str	r3, [r1, #80]	; 0x50
 81018aa:	e001      	b.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018ac:	7dfb      	ldrb	r3, [r7, #23]
 81018ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	681b      	ldr	r3, [r3, #0]
 81018b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81018b8:	2b00      	cmp	r3, #0
 81018ba:	d049      	beq.n	8101950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81018c4:	d02e      	beq.n	8101924 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 81018c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81018ca:	d828      	bhi.n	810191e <HAL_RCCEx_PeriphCLKConfig+0x476>
 81018cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81018d0:	d02a      	beq.n	8101928 <HAL_RCCEx_PeriphCLKConfig+0x480>
 81018d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81018d6:	d822      	bhi.n	810191e <HAL_RCCEx_PeriphCLKConfig+0x476>
 81018d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81018dc:	d026      	beq.n	810192c <HAL_RCCEx_PeriphCLKConfig+0x484>
 81018de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81018e2:	d81c      	bhi.n	810191e <HAL_RCCEx_PeriphCLKConfig+0x476>
 81018e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81018e8:	d010      	beq.n	810190c <HAL_RCCEx_PeriphCLKConfig+0x464>
 81018ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81018ee:	d816      	bhi.n	810191e <HAL_RCCEx_PeriphCLKConfig+0x476>
 81018f0:	2b00      	cmp	r3, #0
 81018f2:	d01d      	beq.n	8101930 <HAL_RCCEx_PeriphCLKConfig+0x488>
 81018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81018f8:	d111      	bne.n	810191e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81018fa:	687b      	ldr	r3, [r7, #4]
 81018fc:	3304      	adds	r3, #4
 81018fe:	2101      	movs	r1, #1
 8101900:	4618      	mov	r0, r3
 8101902:	f000 fd17 	bl	8102334 <RCCEx_PLL2_Config>
 8101906:	4603      	mov	r3, r0
 8101908:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810190a:	e012      	b.n	8101932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	3324      	adds	r3, #36	; 0x24
 8101910:	2101      	movs	r1, #1
 8101912:	4618      	mov	r0, r3
 8101914:	f000 fdc0 	bl	8102498 <RCCEx_PLL3_Config>
 8101918:	4603      	mov	r3, r0
 810191a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810191c:	e009      	b.n	8101932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810191e:	2301      	movs	r3, #1
 8101920:	75fb      	strb	r3, [r7, #23]
      break;
 8101922:	e006      	b.n	8101932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101924:	bf00      	nop
 8101926:	e004      	b.n	8101932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101928:	bf00      	nop
 810192a:	e002      	b.n	8101932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810192c:	bf00      	nop
 810192e:	e000      	b.n	8101932 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101932:	7dfb      	ldrb	r3, [r7, #23]
 8101934:	2b00      	cmp	r3, #0
 8101936:	d109      	bne.n	810194c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101938:	4b2d      	ldr	r3, [pc, #180]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810193a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810193c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101944:	492a      	ldr	r1, [pc, #168]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101946:	4313      	orrs	r3, r2
 8101948:	650b      	str	r3, [r1, #80]	; 0x50
 810194a:	e001      	b.n	8101950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810194c:	7dfb      	ldrb	r3, [r7, #23]
 810194e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101958:	2b00      	cmp	r3, #0
 810195a:	d04d      	beq.n	81019f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101966:	d02e      	beq.n	81019c6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8101968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810196c:	d828      	bhi.n	81019c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810196e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101972:	d02a      	beq.n	81019ca <HAL_RCCEx_PeriphCLKConfig+0x522>
 8101974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101978:	d822      	bhi.n	81019c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810197a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810197e:	d026      	beq.n	81019ce <HAL_RCCEx_PeriphCLKConfig+0x526>
 8101980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101984:	d81c      	bhi.n	81019c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810198a:	d010      	beq.n	81019ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 810198c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101990:	d816      	bhi.n	81019c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101992:	2b00      	cmp	r3, #0
 8101994:	d01d      	beq.n	81019d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8101996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810199a:	d111      	bne.n	81019c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	3304      	adds	r3, #4
 81019a0:	2101      	movs	r1, #1
 81019a2:	4618      	mov	r0, r3
 81019a4:	f000 fcc6 	bl	8102334 <RCCEx_PLL2_Config>
 81019a8:	4603      	mov	r3, r0
 81019aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81019ac:	e012      	b.n	81019d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81019ae:	687b      	ldr	r3, [r7, #4]
 81019b0:	3324      	adds	r3, #36	; 0x24
 81019b2:	2101      	movs	r1, #1
 81019b4:	4618      	mov	r0, r3
 81019b6:	f000 fd6f 	bl	8102498 <RCCEx_PLL3_Config>
 81019ba:	4603      	mov	r3, r0
 81019bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81019be:	e009      	b.n	81019d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81019c0:	2301      	movs	r3, #1
 81019c2:	75fb      	strb	r3, [r7, #23]
      break;
 81019c4:	e006      	b.n	81019d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81019c6:	bf00      	nop
 81019c8:	e004      	b.n	81019d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81019ca:	bf00      	nop
 81019cc:	e002      	b.n	81019d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81019ce:	bf00      	nop
 81019d0:	e000      	b.n	81019d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81019d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81019d4:	7dfb      	ldrb	r3, [r7, #23]
 81019d6:	2b00      	cmp	r3, #0
 81019d8:	d10c      	bne.n	81019f4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81019da:	4b05      	ldr	r3, [pc, #20]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81019de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81019e2:	687b      	ldr	r3, [r7, #4]
 81019e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81019e8:	4901      	ldr	r1, [pc, #4]	; (81019f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81019ea:	4313      	orrs	r3, r2
 81019ec:	658b      	str	r3, [r1, #88]	; 0x58
 81019ee:	e003      	b.n	81019f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 81019f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81019f4:	7dfb      	ldrb	r3, [r7, #23]
 81019f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	681b      	ldr	r3, [r3, #0]
 81019fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101a00:	2b00      	cmp	r3, #0
 8101a02:	d02f      	beq.n	8101a64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8101a04:	687b      	ldr	r3, [r7, #4]
 8101a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101a0c:	d00e      	beq.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8101a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101a12:	d814      	bhi.n	8101a3e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8101a14:	2b00      	cmp	r3, #0
 8101a16:	d015      	beq.n	8101a44 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8101a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101a1c:	d10f      	bne.n	8101a3e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a1e:	4bb0      	ldr	r3, [pc, #704]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101a22:	4aaf      	ldr	r2, [pc, #700]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101a2a:	e00c      	b.n	8101a46 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	3304      	adds	r3, #4
 8101a30:	2101      	movs	r1, #1
 8101a32:	4618      	mov	r0, r3
 8101a34:	f000 fc7e 	bl	8102334 <RCCEx_PLL2_Config>
 8101a38:	4603      	mov	r3, r0
 8101a3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101a3c:	e003      	b.n	8101a46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101a3e:	2301      	movs	r3, #1
 8101a40:	75fb      	strb	r3, [r7, #23]
      break;
 8101a42:	e000      	b.n	8101a46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8101a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a46:	7dfb      	ldrb	r3, [r7, #23]
 8101a48:	2b00      	cmp	r3, #0
 8101a4a:	d109      	bne.n	8101a60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101a4c:	4ba4      	ldr	r3, [pc, #656]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101a50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101a58:	49a1      	ldr	r1, [pc, #644]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a5a:	4313      	orrs	r3, r2
 8101a5c:	650b      	str	r3, [r1, #80]	; 0x50
 8101a5e:	e001      	b.n	8101a64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a60:	7dfb      	ldrb	r3, [r7, #23]
 8101a62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101a64:	687b      	ldr	r3, [r7, #4]
 8101a66:	681b      	ldr	r3, [r3, #0]
 8101a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101a6c:	2b00      	cmp	r3, #0
 8101a6e:	d032      	beq.n	8101ad6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8101a70:	687b      	ldr	r3, [r7, #4]
 8101a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101a74:	2b03      	cmp	r3, #3
 8101a76:	d81b      	bhi.n	8101ab0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8101a78:	a201      	add	r2, pc, #4	; (adr r2, 8101a80 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8101a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101a7e:	bf00      	nop
 8101a80:	08101ab7 	.word	0x08101ab7
 8101a84:	08101a91 	.word	0x08101a91
 8101a88:	08101a9f 	.word	0x08101a9f
 8101a8c:	08101ab7 	.word	0x08101ab7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a90:	4b93      	ldr	r3, [pc, #588]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101a94:	4a92      	ldr	r2, [pc, #584]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101a9c:	e00c      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	3304      	adds	r3, #4
 8101aa2:	2102      	movs	r1, #2
 8101aa4:	4618      	mov	r0, r3
 8101aa6:	f000 fc45 	bl	8102334 <RCCEx_PLL2_Config>
 8101aaa:	4603      	mov	r3, r0
 8101aac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101aae:	e003      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101ab0:	2301      	movs	r3, #1
 8101ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8101ab4:	e000      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8101ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ab8:	7dfb      	ldrb	r3, [r7, #23]
 8101aba:	2b00      	cmp	r3, #0
 8101abc:	d109      	bne.n	8101ad2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101abe:	4b88      	ldr	r3, [pc, #544]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101ac2:	f023 0203 	bic.w	r2, r3, #3
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101aca:	4985      	ldr	r1, [pc, #532]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101acc:	4313      	orrs	r3, r2
 8101ace:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101ad0:	e001      	b.n	8101ad6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ad2:	7dfb      	ldrb	r3, [r7, #23]
 8101ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101ade:	2b00      	cmp	r3, #0
 8101ae0:	f000 8088 	beq.w	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101ae4:	4b7f      	ldr	r3, [pc, #508]	; (8101ce4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101ae6:	681b      	ldr	r3, [r3, #0]
 8101ae8:	4a7e      	ldr	r2, [pc, #504]	; (8101ce4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101af0:	f7fe fee0 	bl	81008b4 <HAL_GetTick>
 8101af4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101af6:	e009      	b.n	8101b0c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101af8:	f7fe fedc 	bl	81008b4 <HAL_GetTick>
 8101afc:	4602      	mov	r2, r0
 8101afe:	693b      	ldr	r3, [r7, #16]
 8101b00:	1ad3      	subs	r3, r2, r3
 8101b02:	2b64      	cmp	r3, #100	; 0x64
 8101b04:	d902      	bls.n	8101b0c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8101b06:	2303      	movs	r3, #3
 8101b08:	75fb      	strb	r3, [r7, #23]
        break;
 8101b0a:	e005      	b.n	8101b18 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101b0c:	4b75      	ldr	r3, [pc, #468]	; (8101ce4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101b0e:	681b      	ldr	r3, [r3, #0]
 8101b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101b14:	2b00      	cmp	r3, #0
 8101b16:	d0ef      	beq.n	8101af8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101b18:	7dfb      	ldrb	r3, [r7, #23]
 8101b1a:	2b00      	cmp	r3, #0
 8101b1c:	d168      	bne.n	8101bf0 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101b1e:	4b70      	ldr	r3, [pc, #448]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101b28:	4053      	eors	r3, r2
 8101b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101b2e:	2b00      	cmp	r3, #0
 8101b30:	d013      	beq.n	8101b5a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101b32:	4b6b      	ldr	r3, [pc, #428]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101b3a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101b3c:	4b68      	ldr	r3, [pc, #416]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101b40:	4a67      	ldr	r2, [pc, #412]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101b46:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101b48:	4b65      	ldr	r3, [pc, #404]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101b4c:	4a64      	ldr	r2, [pc, #400]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101b52:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101b54:	4a62      	ldr	r2, [pc, #392]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b56:	68fb      	ldr	r3, [r7, #12]
 8101b58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101b5a:	687b      	ldr	r3, [r7, #4]
 8101b5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101b64:	d115      	bne.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101b66:	f7fe fea5 	bl	81008b4 <HAL_GetTick>
 8101b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101b6c:	e00b      	b.n	8101b86 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101b6e:	f7fe fea1 	bl	81008b4 <HAL_GetTick>
 8101b72:	4602      	mov	r2, r0
 8101b74:	693b      	ldr	r3, [r7, #16]
 8101b76:	1ad3      	subs	r3, r2, r3
 8101b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8101b7c:	4293      	cmp	r3, r2
 8101b7e:	d902      	bls.n	8101b86 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8101b80:	2303      	movs	r3, #3
 8101b82:	75fb      	strb	r3, [r7, #23]
            break;
 8101b84:	e005      	b.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101b86:	4b56      	ldr	r3, [pc, #344]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101b8a:	f003 0302 	and.w	r3, r3, #2
 8101b8e:	2b00      	cmp	r3, #0
 8101b90:	d0ed      	beq.n	8101b6e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8101b92:	7dfb      	ldrb	r3, [r7, #23]
 8101b94:	2b00      	cmp	r3, #0
 8101b96:	d128      	bne.n	8101bea <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101ba6:	d10f      	bne.n	8101bc8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8101ba8:	4b4d      	ldr	r3, [pc, #308]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101baa:	691b      	ldr	r3, [r3, #16]
 8101bac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8101bb0:	687b      	ldr	r3, [r7, #4]
 8101bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101bb6:	091b      	lsrs	r3, r3, #4
 8101bb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101bbc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101bc0:	4947      	ldr	r1, [pc, #284]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101bc2:	4313      	orrs	r3, r2
 8101bc4:	610b      	str	r3, [r1, #16]
 8101bc6:	e005      	b.n	8101bd4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8101bc8:	4b45      	ldr	r3, [pc, #276]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101bca:	691b      	ldr	r3, [r3, #16]
 8101bcc:	4a44      	ldr	r2, [pc, #272]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101bce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8101bd2:	6113      	str	r3, [r2, #16]
 8101bd4:	4b42      	ldr	r3, [pc, #264]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101bd8:	687b      	ldr	r3, [r7, #4]
 8101bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101be2:	493f      	ldr	r1, [pc, #252]	; (8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101be4:	4313      	orrs	r3, r2
 8101be6:	670b      	str	r3, [r1, #112]	; 0x70
 8101be8:	e004      	b.n	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101bea:	7dfb      	ldrb	r3, [r7, #23]
 8101bec:	75bb      	strb	r3, [r7, #22]
 8101bee:	e001      	b.n	8101bf4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bf0:	7dfb      	ldrb	r3, [r7, #23]
 8101bf2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	f003 0301 	and.w	r3, r3, #1
 8101bfc:	2b00      	cmp	r3, #0
 8101bfe:	f000 8083 	beq.w	8101d08 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101c06:	2b28      	cmp	r3, #40	; 0x28
 8101c08:	d866      	bhi.n	8101cd8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8101c0a:	a201      	add	r2, pc, #4	; (adr r2, 8101c10 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8101c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c10:	08101ce9 	.word	0x08101ce9
 8101c14:	08101cd9 	.word	0x08101cd9
 8101c18:	08101cd9 	.word	0x08101cd9
 8101c1c:	08101cd9 	.word	0x08101cd9
 8101c20:	08101cd9 	.word	0x08101cd9
 8101c24:	08101cd9 	.word	0x08101cd9
 8101c28:	08101cd9 	.word	0x08101cd9
 8101c2c:	08101cd9 	.word	0x08101cd9
 8101c30:	08101cb5 	.word	0x08101cb5
 8101c34:	08101cd9 	.word	0x08101cd9
 8101c38:	08101cd9 	.word	0x08101cd9
 8101c3c:	08101cd9 	.word	0x08101cd9
 8101c40:	08101cd9 	.word	0x08101cd9
 8101c44:	08101cd9 	.word	0x08101cd9
 8101c48:	08101cd9 	.word	0x08101cd9
 8101c4c:	08101cd9 	.word	0x08101cd9
 8101c50:	08101cc7 	.word	0x08101cc7
 8101c54:	08101cd9 	.word	0x08101cd9
 8101c58:	08101cd9 	.word	0x08101cd9
 8101c5c:	08101cd9 	.word	0x08101cd9
 8101c60:	08101cd9 	.word	0x08101cd9
 8101c64:	08101cd9 	.word	0x08101cd9
 8101c68:	08101cd9 	.word	0x08101cd9
 8101c6c:	08101cd9 	.word	0x08101cd9
 8101c70:	08101ce9 	.word	0x08101ce9
 8101c74:	08101cd9 	.word	0x08101cd9
 8101c78:	08101cd9 	.word	0x08101cd9
 8101c7c:	08101cd9 	.word	0x08101cd9
 8101c80:	08101cd9 	.word	0x08101cd9
 8101c84:	08101cd9 	.word	0x08101cd9
 8101c88:	08101cd9 	.word	0x08101cd9
 8101c8c:	08101cd9 	.word	0x08101cd9
 8101c90:	08101ce9 	.word	0x08101ce9
 8101c94:	08101cd9 	.word	0x08101cd9
 8101c98:	08101cd9 	.word	0x08101cd9
 8101c9c:	08101cd9 	.word	0x08101cd9
 8101ca0:	08101cd9 	.word	0x08101cd9
 8101ca4:	08101cd9 	.word	0x08101cd9
 8101ca8:	08101cd9 	.word	0x08101cd9
 8101cac:	08101cd9 	.word	0x08101cd9
 8101cb0:	08101ce9 	.word	0x08101ce9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	3304      	adds	r3, #4
 8101cb8:	2101      	movs	r1, #1
 8101cba:	4618      	mov	r0, r3
 8101cbc:	f000 fb3a 	bl	8102334 <RCCEx_PLL2_Config>
 8101cc0:	4603      	mov	r3, r0
 8101cc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101cc4:	e011      	b.n	8101cea <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	3324      	adds	r3, #36	; 0x24
 8101cca:	2101      	movs	r1, #1
 8101ccc:	4618      	mov	r0, r3
 8101cce:	f000 fbe3 	bl	8102498 <RCCEx_PLL3_Config>
 8101cd2:	4603      	mov	r3, r0
 8101cd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101cd6:	e008      	b.n	8101cea <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101cd8:	2301      	movs	r3, #1
 8101cda:	75fb      	strb	r3, [r7, #23]
      break;
 8101cdc:	e005      	b.n	8101cea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8101cde:	bf00      	nop
 8101ce0:	58024400 	.word	0x58024400
 8101ce4:	58024800 	.word	0x58024800
      break;
 8101ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101cea:	7dfb      	ldrb	r3, [r7, #23]
 8101cec:	2b00      	cmp	r3, #0
 8101cee:	d109      	bne.n	8101d04 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101cf0:	4b96      	ldr	r3, [pc, #600]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101cf4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8101cf8:	687b      	ldr	r3, [r7, #4]
 8101cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101cfc:	4993      	ldr	r1, [pc, #588]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101cfe:	4313      	orrs	r3, r2
 8101d00:	654b      	str	r3, [r1, #84]	; 0x54
 8101d02:	e001      	b.n	8101d08 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d04:	7dfb      	ldrb	r3, [r7, #23]
 8101d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	f003 0302 	and.w	r3, r3, #2
 8101d10:	2b00      	cmp	r3, #0
 8101d12:	d038      	beq.n	8101d86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101d18:	2b05      	cmp	r3, #5
 8101d1a:	d821      	bhi.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8101d1c:	a201      	add	r2, pc, #4	; (adr r2, 8101d24 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8101d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101d22:	bf00      	nop
 8101d24:	08101d67 	.word	0x08101d67
 8101d28:	08101d3d 	.word	0x08101d3d
 8101d2c:	08101d4f 	.word	0x08101d4f
 8101d30:	08101d67 	.word	0x08101d67
 8101d34:	08101d67 	.word	0x08101d67
 8101d38:	08101d67 	.word	0x08101d67
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101d3c:	687b      	ldr	r3, [r7, #4]
 8101d3e:	3304      	adds	r3, #4
 8101d40:	2101      	movs	r1, #1
 8101d42:	4618      	mov	r0, r3
 8101d44:	f000 faf6 	bl	8102334 <RCCEx_PLL2_Config>
 8101d48:	4603      	mov	r3, r0
 8101d4a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101d4c:	e00c      	b.n	8101d68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	3324      	adds	r3, #36	; 0x24
 8101d52:	2101      	movs	r1, #1
 8101d54:	4618      	mov	r0, r3
 8101d56:	f000 fb9f 	bl	8102498 <RCCEx_PLL3_Config>
 8101d5a:	4603      	mov	r3, r0
 8101d5c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101d5e:	e003      	b.n	8101d68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101d60:	2301      	movs	r3, #1
 8101d62:	75fb      	strb	r3, [r7, #23]
      break;
 8101d64:	e000      	b.n	8101d68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8101d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d68:	7dfb      	ldrb	r3, [r7, #23]
 8101d6a:	2b00      	cmp	r3, #0
 8101d6c:	d109      	bne.n	8101d82 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8101d6e:	4b77      	ldr	r3, [pc, #476]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d72:	f023 0207 	bic.w	r2, r3, #7
 8101d76:	687b      	ldr	r3, [r7, #4]
 8101d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101d7a:	4974      	ldr	r1, [pc, #464]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101d7c:	4313      	orrs	r3, r2
 8101d7e:	654b      	str	r3, [r1, #84]	; 0x54
 8101d80:	e001      	b.n	8101d86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d82:	7dfb      	ldrb	r3, [r7, #23]
 8101d84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	f003 0304 	and.w	r3, r3, #4
 8101d8e:	2b00      	cmp	r3, #0
 8101d90:	d03a      	beq.n	8101e08 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101d98:	2b05      	cmp	r3, #5
 8101d9a:	d821      	bhi.n	8101de0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8101d9c:	a201      	add	r2, pc, #4	; (adr r2, 8101da4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8101d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101da2:	bf00      	nop
 8101da4:	08101de7 	.word	0x08101de7
 8101da8:	08101dbd 	.word	0x08101dbd
 8101dac:	08101dcf 	.word	0x08101dcf
 8101db0:	08101de7 	.word	0x08101de7
 8101db4:	08101de7 	.word	0x08101de7
 8101db8:	08101de7 	.word	0x08101de7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	3304      	adds	r3, #4
 8101dc0:	2101      	movs	r1, #1
 8101dc2:	4618      	mov	r0, r3
 8101dc4:	f000 fab6 	bl	8102334 <RCCEx_PLL2_Config>
 8101dc8:	4603      	mov	r3, r0
 8101dca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101dcc:	e00c      	b.n	8101de8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	3324      	adds	r3, #36	; 0x24
 8101dd2:	2101      	movs	r1, #1
 8101dd4:	4618      	mov	r0, r3
 8101dd6:	f000 fb5f 	bl	8102498 <RCCEx_PLL3_Config>
 8101dda:	4603      	mov	r3, r0
 8101ddc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101dde:	e003      	b.n	8101de8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101de0:	2301      	movs	r3, #1
 8101de2:	75fb      	strb	r3, [r7, #23]
      break;
 8101de4:	e000      	b.n	8101de8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8101de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101de8:	7dfb      	ldrb	r3, [r7, #23]
 8101dea:	2b00      	cmp	r3, #0
 8101dec:	d10a      	bne.n	8101e04 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8101dee:	4b57      	ldr	r3, [pc, #348]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101df2:	f023 0207 	bic.w	r2, r3, #7
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101dfc:	4953      	ldr	r1, [pc, #332]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101dfe:	4313      	orrs	r3, r2
 8101e00:	658b      	str	r3, [r1, #88]	; 0x58
 8101e02:	e001      	b.n	8101e08 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e04:	7dfb      	ldrb	r3, [r7, #23]
 8101e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	f003 0320 	and.w	r3, r3, #32
 8101e10:	2b00      	cmp	r3, #0
 8101e12:	d04b      	beq.n	8101eac <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101e1e:	d02e      	beq.n	8101e7e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8101e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101e24:	d828      	bhi.n	8101e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101e2a:	d02a      	beq.n	8101e82 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8101e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101e30:	d822      	bhi.n	8101e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101e36:	d026      	beq.n	8101e86 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8101e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101e3c:	d81c      	bhi.n	8101e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101e42:	d010      	beq.n	8101e66 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8101e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101e48:	d816      	bhi.n	8101e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101e4a:	2b00      	cmp	r3, #0
 8101e4c:	d01d      	beq.n	8101e8a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8101e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101e52:	d111      	bne.n	8101e78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	3304      	adds	r3, #4
 8101e58:	2100      	movs	r1, #0
 8101e5a:	4618      	mov	r0, r3
 8101e5c:	f000 fa6a 	bl	8102334 <RCCEx_PLL2_Config>
 8101e60:	4603      	mov	r3, r0
 8101e62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8101e64:	e012      	b.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	3324      	adds	r3, #36	; 0x24
 8101e6a:	2102      	movs	r1, #2
 8101e6c:	4618      	mov	r0, r3
 8101e6e:	f000 fb13 	bl	8102498 <RCCEx_PLL3_Config>
 8101e72:	4603      	mov	r3, r0
 8101e74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8101e76:	e009      	b.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101e78:	2301      	movs	r3, #1
 8101e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8101e7c:	e006      	b.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101e7e:	bf00      	nop
 8101e80:	e004      	b.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101e82:	bf00      	nop
 8101e84:	e002      	b.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101e86:	bf00      	nop
 8101e88:	e000      	b.n	8101e8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e8c:	7dfb      	ldrb	r3, [r7, #23]
 8101e8e:	2b00      	cmp	r3, #0
 8101e90:	d10a      	bne.n	8101ea8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8101e92:	4b2e      	ldr	r3, [pc, #184]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101e96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101ea0:	492a      	ldr	r1, [pc, #168]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101ea2:	4313      	orrs	r3, r2
 8101ea4:	654b      	str	r3, [r1, #84]	; 0x54
 8101ea6:	e001      	b.n	8101eac <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ea8:	7dfb      	ldrb	r3, [r7, #23]
 8101eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	681b      	ldr	r3, [r3, #0]
 8101eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101eb4:	2b00      	cmp	r3, #0
 8101eb6:	d04d      	beq.n	8101f54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8101ebe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8101ec2:	d02e      	beq.n	8101f22 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8101ec4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8101ec8:	d828      	bhi.n	8101f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101ece:	d02a      	beq.n	8101f26 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8101ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101ed4:	d822      	bhi.n	8101f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101ed6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8101eda:	d026      	beq.n	8101f2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8101edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8101ee0:	d81c      	bhi.n	8101f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8101ee6:	d010      	beq.n	8101f0a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8101ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8101eec:	d816      	bhi.n	8101f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101eee:	2b00      	cmp	r3, #0
 8101ef0:	d01d      	beq.n	8101f2e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8101ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8101ef6:	d111      	bne.n	8101f1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	3304      	adds	r3, #4
 8101efc:	2100      	movs	r1, #0
 8101efe:	4618      	mov	r0, r3
 8101f00:	f000 fa18 	bl	8102334 <RCCEx_PLL2_Config>
 8101f04:	4603      	mov	r3, r0
 8101f06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8101f08:	e012      	b.n	8101f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	3324      	adds	r3, #36	; 0x24
 8101f0e:	2102      	movs	r1, #2
 8101f10:	4618      	mov	r0, r3
 8101f12:	f000 fac1 	bl	8102498 <RCCEx_PLL3_Config>
 8101f16:	4603      	mov	r3, r0
 8101f18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8101f1a:	e009      	b.n	8101f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f1c:	2301      	movs	r3, #1
 8101f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8101f20:	e006      	b.n	8101f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101f22:	bf00      	nop
 8101f24:	e004      	b.n	8101f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101f26:	bf00      	nop
 8101f28:	e002      	b.n	8101f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101f2a:	bf00      	nop
 8101f2c:	e000      	b.n	8101f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f30:	7dfb      	ldrb	r3, [r7, #23]
 8101f32:	2b00      	cmp	r3, #0
 8101f34:	d10c      	bne.n	8101f50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8101f36:	4b05      	ldr	r3, [pc, #20]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8101f3e:	687b      	ldr	r3, [r7, #4]
 8101f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8101f44:	4901      	ldr	r1, [pc, #4]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101f46:	4313      	orrs	r3, r2
 8101f48:	658b      	str	r3, [r1, #88]	; 0x58
 8101f4a:	e003      	b.n	8101f54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8101f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f50:	7dfb      	ldrb	r3, [r7, #23]
 8101f52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101f5c:	2b00      	cmp	r3, #0
 8101f5e:	d04b      	beq.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101f66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8101f6a:	d02e      	beq.n	8101fca <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8101f6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8101f70:	d828      	bhi.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8101f76:	d02a      	beq.n	8101fce <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8101f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8101f7c:	d822      	bhi.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101f7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8101f82:	d026      	beq.n	8101fd2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8101f84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8101f88:	d81c      	bhi.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101f8e:	d010      	beq.n	8101fb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8101f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101f94:	d816      	bhi.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101f96:	2b00      	cmp	r3, #0
 8101f98:	d01d      	beq.n	8101fd6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8101f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101f9e:	d111      	bne.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	3304      	adds	r3, #4
 8101fa4:	2100      	movs	r1, #0
 8101fa6:	4618      	mov	r0, r3
 8101fa8:	f000 f9c4 	bl	8102334 <RCCEx_PLL2_Config>
 8101fac:	4603      	mov	r3, r0
 8101fae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8101fb0:	e012      	b.n	8101fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	3324      	adds	r3, #36	; 0x24
 8101fb6:	2102      	movs	r1, #2
 8101fb8:	4618      	mov	r0, r3
 8101fba:	f000 fa6d 	bl	8102498 <RCCEx_PLL3_Config>
 8101fbe:	4603      	mov	r3, r0
 8101fc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8101fc2:	e009      	b.n	8101fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101fc4:	2301      	movs	r3, #1
 8101fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8101fc8:	e006      	b.n	8101fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101fca:	bf00      	nop
 8101fcc:	e004      	b.n	8101fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101fce:	bf00      	nop
 8101fd0:	e002      	b.n	8101fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101fd2:	bf00      	nop
 8101fd4:	e000      	b.n	8101fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101fd8:	7dfb      	ldrb	r3, [r7, #23]
 8101fda:	2b00      	cmp	r3, #0
 8101fdc:	d10a      	bne.n	8101ff4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8101fde:	4b9d      	ldr	r3, [pc, #628]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101fec:	4999      	ldr	r1, [pc, #612]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101fee:	4313      	orrs	r3, r2
 8101ff0:	658b      	str	r3, [r1, #88]	; 0x58
 8101ff2:	e001      	b.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ff4:	7dfb      	ldrb	r3, [r7, #23]
 8101ff6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	f003 0308 	and.w	r3, r3, #8
 8102000:	2b00      	cmp	r3, #0
 8102002:	d01a      	beq.n	810203a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810200a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810200e:	d10a      	bne.n	8102026 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	3324      	adds	r3, #36	; 0x24
 8102014:	2102      	movs	r1, #2
 8102016:	4618      	mov	r0, r3
 8102018:	f000 fa3e 	bl	8102498 <RCCEx_PLL3_Config>
 810201c:	4603      	mov	r3, r0
 810201e:	2b00      	cmp	r3, #0
 8102020:	d001      	beq.n	8102026 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8102022:	2301      	movs	r3, #1
 8102024:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102026:	4b8b      	ldr	r3, [pc, #556]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810202a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102034:	4987      	ldr	r1, [pc, #540]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102036:	4313      	orrs	r3, r2
 8102038:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	681b      	ldr	r3, [r3, #0]
 810203e:	f003 0310 	and.w	r3, r3, #16
 8102042:	2b00      	cmp	r3, #0
 8102044:	d01a      	beq.n	810207c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810204c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102050:	d10a      	bne.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	3324      	adds	r3, #36	; 0x24
 8102056:	2102      	movs	r1, #2
 8102058:	4618      	mov	r0, r3
 810205a:	f000 fa1d 	bl	8102498 <RCCEx_PLL3_Config>
 810205e:	4603      	mov	r3, r0
 8102060:	2b00      	cmp	r3, #0
 8102062:	d001      	beq.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8102064:	2301      	movs	r3, #1
 8102066:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102068:	4b7a      	ldr	r3, [pc, #488]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810206c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102076:	4977      	ldr	r1, [pc, #476]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102078:	4313      	orrs	r3, r2
 810207a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102084:	2b00      	cmp	r3, #0
 8102086:	d034      	beq.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810208e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102092:	d01d      	beq.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8102094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102098:	d817      	bhi.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 810209a:	2b00      	cmp	r3, #0
 810209c:	d003      	beq.n	81020a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 810209e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81020a2:	d009      	beq.n	81020b8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81020a4:	e011      	b.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	3304      	adds	r3, #4
 81020aa:	2100      	movs	r1, #0
 81020ac:	4618      	mov	r0, r3
 81020ae:	f000 f941 	bl	8102334 <RCCEx_PLL2_Config>
 81020b2:	4603      	mov	r3, r0
 81020b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81020b6:	e00c      	b.n	81020d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81020b8:	687b      	ldr	r3, [r7, #4]
 81020ba:	3324      	adds	r3, #36	; 0x24
 81020bc:	2102      	movs	r1, #2
 81020be:	4618      	mov	r0, r3
 81020c0:	f000 f9ea 	bl	8102498 <RCCEx_PLL3_Config>
 81020c4:	4603      	mov	r3, r0
 81020c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81020c8:	e003      	b.n	81020d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81020ca:	2301      	movs	r3, #1
 81020cc:	75fb      	strb	r3, [r7, #23]
      break;
 81020ce:	e000      	b.n	81020d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 81020d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81020d2:	7dfb      	ldrb	r3, [r7, #23]
 81020d4:	2b00      	cmp	r3, #0
 81020d6:	d10a      	bne.n	81020ee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81020d8:	4b5e      	ldr	r3, [pc, #376]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81020dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81020e0:	687b      	ldr	r3, [r7, #4]
 81020e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81020e6:	495b      	ldr	r1, [pc, #364]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81020e8:	4313      	orrs	r3, r2
 81020ea:	658b      	str	r3, [r1, #88]	; 0x58
 81020ec:	e001      	b.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020ee:	7dfb      	ldrb	r3, [r7, #23]
 81020f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	681b      	ldr	r3, [r3, #0]
 81020f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81020fa:	2b00      	cmp	r3, #0
 81020fc:	d033      	beq.n	8102166 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102104:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102108:	d01c      	beq.n	8102144 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810210a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810210e:	d816      	bhi.n	810213e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8102110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102114:	d003      	beq.n	810211e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8102116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810211a:	d007      	beq.n	810212c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810211c:	e00f      	b.n	810213e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810211e:	4b4d      	ldr	r3, [pc, #308]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102122:	4a4c      	ldr	r2, [pc, #304]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102128:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810212a:	e00c      	b.n	8102146 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	3324      	adds	r3, #36	; 0x24
 8102130:	2101      	movs	r1, #1
 8102132:	4618      	mov	r0, r3
 8102134:	f000 f9b0 	bl	8102498 <RCCEx_PLL3_Config>
 8102138:	4603      	mov	r3, r0
 810213a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810213c:	e003      	b.n	8102146 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810213e:	2301      	movs	r3, #1
 8102140:	75fb      	strb	r3, [r7, #23]
      break;
 8102142:	e000      	b.n	8102146 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8102144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102146:	7dfb      	ldrb	r3, [r7, #23]
 8102148:	2b00      	cmp	r3, #0
 810214a:	d10a      	bne.n	8102162 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810214c:	4b41      	ldr	r3, [pc, #260]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102154:	687b      	ldr	r3, [r7, #4]
 8102156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810215a:	493e      	ldr	r1, [pc, #248]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810215c:	4313      	orrs	r3, r2
 810215e:	654b      	str	r3, [r1, #84]	; 0x54
 8102160:	e001      	b.n	8102166 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102162:	7dfb      	ldrb	r3, [r7, #23]
 8102164:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	681b      	ldr	r3, [r3, #0]
 810216a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810216e:	2b00      	cmp	r3, #0
 8102170:	d029      	beq.n	81021c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102176:	2b00      	cmp	r3, #0
 8102178:	d003      	beq.n	8102182 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 810217a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810217e:	d007      	beq.n	8102190 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8102180:	e00f      	b.n	81021a2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102182:	4b34      	ldr	r3, [pc, #208]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102186:	4a33      	ldr	r2, [pc, #204]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810218c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810218e:	e00b      	b.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	3304      	adds	r3, #4
 8102194:	2102      	movs	r1, #2
 8102196:	4618      	mov	r0, r3
 8102198:	f000 f8cc 	bl	8102334 <RCCEx_PLL2_Config>
 810219c:	4603      	mov	r3, r0
 810219e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81021a0:	e002      	b.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81021a2:	2301      	movs	r3, #1
 81021a4:	75fb      	strb	r3, [r7, #23]
      break;
 81021a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81021a8:	7dfb      	ldrb	r3, [r7, #23]
 81021aa:	2b00      	cmp	r3, #0
 81021ac:	d109      	bne.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81021ae:	4b29      	ldr	r3, [pc, #164]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81021b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81021ba:	4926      	ldr	r1, [pc, #152]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81021bc:	4313      	orrs	r3, r2
 81021be:	64cb      	str	r3, [r1, #76]	; 0x4c
 81021c0:	e001      	b.n	81021c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021c2:	7dfb      	ldrb	r3, [r7, #23]
 81021c4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	681b      	ldr	r3, [r3, #0]
 81021ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81021ce:	2b00      	cmp	r3, #0
 81021d0:	d00a      	beq.n	81021e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	3324      	adds	r3, #36	; 0x24
 81021d6:	2102      	movs	r1, #2
 81021d8:	4618      	mov	r0, r3
 81021da:	f000 f95d 	bl	8102498 <RCCEx_PLL3_Config>
 81021de:	4603      	mov	r3, r0
 81021e0:	2b00      	cmp	r3, #0
 81021e2:	d001      	beq.n	81021e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 81021e4:	2301      	movs	r3, #1
 81021e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	681b      	ldr	r3, [r3, #0]
 81021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81021f0:	2b00      	cmp	r3, #0
 81021f2:	d033      	beq.n	810225c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81021f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81021fc:	d017      	beq.n	810222e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81021fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102202:	d811      	bhi.n	8102228 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8102204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102208:	d013      	beq.n	8102232 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810220a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810220e:	d80b      	bhi.n	8102228 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8102210:	2b00      	cmp	r3, #0
 8102212:	d010      	beq.n	8102236 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8102214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102218:	d106      	bne.n	8102228 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810221a:	4b0e      	ldr	r3, [pc, #56]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810221e:	4a0d      	ldr	r2, [pc, #52]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102226:	e007      	b.n	8102238 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102228:	2301      	movs	r3, #1
 810222a:	75fb      	strb	r3, [r7, #23]
      break;
 810222c:	e004      	b.n	8102238 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810222e:	bf00      	nop
 8102230:	e002      	b.n	8102238 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8102232:	bf00      	nop
 8102234:	e000      	b.n	8102238 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8102236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102238:	7dfb      	ldrb	r3, [r7, #23]
 810223a:	2b00      	cmp	r3, #0
 810223c:	d10c      	bne.n	8102258 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810223e:	4b05      	ldr	r3, [pc, #20]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810224a:	4902      	ldr	r1, [pc, #8]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810224c:	4313      	orrs	r3, r2
 810224e:	654b      	str	r3, [r1, #84]	; 0x54
 8102250:	e004      	b.n	810225c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8102252:	bf00      	nop
 8102254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102258:	7dfb      	ldrb	r3, [r7, #23]
 810225a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102264:	2b00      	cmp	r3, #0
 8102266:	d008      	beq.n	810227a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102268:	4b31      	ldr	r3, [pc, #196]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810226a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810226c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102274:	492e      	ldr	r1, [pc, #184]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102276:	4313      	orrs	r3, r2
 8102278:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102282:	2b00      	cmp	r3, #0
 8102284:	d009      	beq.n	810229a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102286:	4b2a      	ldr	r3, [pc, #168]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102288:	691b      	ldr	r3, [r3, #16]
 810228a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102294:	4926      	ldr	r1, [pc, #152]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102296:	4313      	orrs	r3, r2
 8102298:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	681b      	ldr	r3, [r3, #0]
 810229e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81022a2:	2b00      	cmp	r3, #0
 81022a4:	d008      	beq.n	81022b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81022a6:	4b22      	ldr	r3, [pc, #136]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81022a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81022aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81022b2:	491f      	ldr	r1, [pc, #124]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81022b4:	4313      	orrs	r3, r2
 81022b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	681b      	ldr	r3, [r3, #0]
 81022bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81022c0:	2b00      	cmp	r3, #0
 81022c2:	d00d      	beq.n	81022e0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81022c4:	4b1a      	ldr	r3, [pc, #104]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81022c6:	691b      	ldr	r3, [r3, #16]
 81022c8:	4a19      	ldr	r2, [pc, #100]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81022ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81022ce:	6113      	str	r3, [r2, #16]
 81022d0:	4b17      	ldr	r3, [pc, #92]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81022d2:	691a      	ldr	r2, [r3, #16]
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81022da:	4915      	ldr	r1, [pc, #84]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81022dc:	4313      	orrs	r3, r2
 81022de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	2b00      	cmp	r3, #0
 81022e6:	da08      	bge.n	81022fa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81022e8:	4b11      	ldr	r3, [pc, #68]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81022ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81022ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81022f0:	687b      	ldr	r3, [r7, #4]
 81022f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81022f4:	490e      	ldr	r1, [pc, #56]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81022f6:	4313      	orrs	r3, r2
 81022f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	681b      	ldr	r3, [r3, #0]
 81022fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102302:	2b00      	cmp	r3, #0
 8102304:	d009      	beq.n	810231a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102306:	4b0a      	ldr	r3, [pc, #40]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810230a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102314:	4906      	ldr	r1, [pc, #24]	; (8102330 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102316:	4313      	orrs	r3, r2
 8102318:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810231a:	7dbb      	ldrb	r3, [r7, #22]
 810231c:	2b00      	cmp	r3, #0
 810231e:	d101      	bne.n	8102324 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8102320:	2300      	movs	r3, #0
 8102322:	e000      	b.n	8102326 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8102324:	2301      	movs	r3, #1
}
 8102326:	4618      	mov	r0, r3
 8102328:	3718      	adds	r7, #24
 810232a:	46bd      	mov	sp, r7
 810232c:	bd80      	pop	{r7, pc}
 810232e:	bf00      	nop
 8102330:	58024400 	.word	0x58024400

08102334 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102334:	b580      	push	{r7, lr}
 8102336:	b084      	sub	sp, #16
 8102338:	af00      	add	r7, sp, #0
 810233a:	6078      	str	r0, [r7, #4]
 810233c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810233e:	2300      	movs	r3, #0
 8102340:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102342:	4b54      	ldr	r3, [pc, #336]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102346:	f003 0303 	and.w	r3, r3, #3
 810234a:	2b03      	cmp	r3, #3
 810234c:	d101      	bne.n	8102352 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810234e:	2301      	movs	r3, #1
 8102350:	e09b      	b.n	810248a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102352:	4b50      	ldr	r3, [pc, #320]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	4a4f      	ldr	r2, [pc, #316]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102358:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810235c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810235e:	f7fe faa9 	bl	81008b4 <HAL_GetTick>
 8102362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102364:	e008      	b.n	8102378 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102366:	f7fe faa5 	bl	81008b4 <HAL_GetTick>
 810236a:	4602      	mov	r2, r0
 810236c:	68bb      	ldr	r3, [r7, #8]
 810236e:	1ad3      	subs	r3, r2, r3
 8102370:	2b02      	cmp	r3, #2
 8102372:	d901      	bls.n	8102378 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102374:	2303      	movs	r3, #3
 8102376:	e088      	b.n	810248a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102378:	4b46      	ldr	r3, [pc, #280]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 810237a:	681b      	ldr	r3, [r3, #0]
 810237c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102380:	2b00      	cmp	r3, #0
 8102382:	d1f0      	bne.n	8102366 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102384:	4b43      	ldr	r3, [pc, #268]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102388:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	031b      	lsls	r3, r3, #12
 8102392:	4940      	ldr	r1, [pc, #256]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102394:	4313      	orrs	r3, r2
 8102396:	628b      	str	r3, [r1, #40]	; 0x28
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	685b      	ldr	r3, [r3, #4]
 810239c:	3b01      	subs	r3, #1
 810239e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	689b      	ldr	r3, [r3, #8]
 81023a6:	3b01      	subs	r3, #1
 81023a8:	025b      	lsls	r3, r3, #9
 81023aa:	b29b      	uxth	r3, r3
 81023ac:	431a      	orrs	r2, r3
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	68db      	ldr	r3, [r3, #12]
 81023b2:	3b01      	subs	r3, #1
 81023b4:	041b      	lsls	r3, r3, #16
 81023b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81023ba:	431a      	orrs	r2, r3
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	691b      	ldr	r3, [r3, #16]
 81023c0:	3b01      	subs	r3, #1
 81023c2:	061b      	lsls	r3, r3, #24
 81023c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81023c8:	4932      	ldr	r1, [pc, #200]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 81023ca:	4313      	orrs	r3, r2
 81023cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81023ce:	4b31      	ldr	r3, [pc, #196]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 81023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	695b      	ldr	r3, [r3, #20]
 81023da:	492e      	ldr	r1, [pc, #184]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 81023dc:	4313      	orrs	r3, r2
 81023de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81023e0:	4b2c      	ldr	r3, [pc, #176]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 81023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023e4:	f023 0220 	bic.w	r2, r3, #32
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	699b      	ldr	r3, [r3, #24]
 81023ec:	4929      	ldr	r1, [pc, #164]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 81023ee:	4313      	orrs	r3, r2
 81023f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81023f2:	4b28      	ldr	r3, [pc, #160]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 81023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023f6:	4a27      	ldr	r2, [pc, #156]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 81023f8:	f023 0310 	bic.w	r3, r3, #16
 81023fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81023fe:	4b25      	ldr	r3, [pc, #148]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102406:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810240a:	687a      	ldr	r2, [r7, #4]
 810240c:	69d2      	ldr	r2, [r2, #28]
 810240e:	00d2      	lsls	r2, r2, #3
 8102410:	4920      	ldr	r1, [pc, #128]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102412:	4313      	orrs	r3, r2
 8102414:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102416:	4b1f      	ldr	r3, [pc, #124]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810241a:	4a1e      	ldr	r2, [pc, #120]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 810241c:	f043 0310 	orr.w	r3, r3, #16
 8102420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102422:	683b      	ldr	r3, [r7, #0]
 8102424:	2b00      	cmp	r3, #0
 8102426:	d106      	bne.n	8102436 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102428:	4b1a      	ldr	r3, [pc, #104]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 810242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810242c:	4a19      	ldr	r2, [pc, #100]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 810242e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102432:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102434:	e00f      	b.n	8102456 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102436:	683b      	ldr	r3, [r7, #0]
 8102438:	2b01      	cmp	r3, #1
 810243a:	d106      	bne.n	810244a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810243c:	4b15      	ldr	r3, [pc, #84]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 810243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102440:	4a14      	ldr	r2, [pc, #80]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102446:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102448:	e005      	b.n	8102456 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810244a:	4b12      	ldr	r3, [pc, #72]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 810244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810244e:	4a11      	ldr	r2, [pc, #68]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102454:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102456:	4b0f      	ldr	r3, [pc, #60]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 8102458:	681b      	ldr	r3, [r3, #0]
 810245a:	4a0e      	ldr	r2, [pc, #56]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 810245c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102462:	f7fe fa27 	bl	81008b4 <HAL_GetTick>
 8102466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102468:	e008      	b.n	810247c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810246a:	f7fe fa23 	bl	81008b4 <HAL_GetTick>
 810246e:	4602      	mov	r2, r0
 8102470:	68bb      	ldr	r3, [r7, #8]
 8102472:	1ad3      	subs	r3, r2, r3
 8102474:	2b02      	cmp	r3, #2
 8102476:	d901      	bls.n	810247c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102478:	2303      	movs	r3, #3
 810247a:	e006      	b.n	810248a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810247c:	4b05      	ldr	r3, [pc, #20]	; (8102494 <RCCEx_PLL2_Config+0x160>)
 810247e:	681b      	ldr	r3, [r3, #0]
 8102480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102484:	2b00      	cmp	r3, #0
 8102486:	d0f0      	beq.n	810246a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102488:	7bfb      	ldrb	r3, [r7, #15]
}
 810248a:	4618      	mov	r0, r3
 810248c:	3710      	adds	r7, #16
 810248e:	46bd      	mov	sp, r7
 8102490:	bd80      	pop	{r7, pc}
 8102492:	bf00      	nop
 8102494:	58024400 	.word	0x58024400

08102498 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102498:	b580      	push	{r7, lr}
 810249a:	b084      	sub	sp, #16
 810249c:	af00      	add	r7, sp, #0
 810249e:	6078      	str	r0, [r7, #4]
 81024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81024a2:	2300      	movs	r3, #0
 81024a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81024a6:	4b54      	ldr	r3, [pc, #336]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024aa:	f003 0303 	and.w	r3, r3, #3
 81024ae:	2b03      	cmp	r3, #3
 81024b0:	d101      	bne.n	81024b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81024b2:	2301      	movs	r3, #1
 81024b4:	e09b      	b.n	81025ee <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81024b6:	4b50      	ldr	r3, [pc, #320]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	4a4f      	ldr	r2, [pc, #316]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81024bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81024c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81024c2:	f7fe f9f7 	bl	81008b4 <HAL_GetTick>
 81024c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81024c8:	e008      	b.n	81024dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81024ca:	f7fe f9f3 	bl	81008b4 <HAL_GetTick>
 81024ce:	4602      	mov	r2, r0
 81024d0:	68bb      	ldr	r3, [r7, #8]
 81024d2:	1ad3      	subs	r3, r2, r3
 81024d4:	2b02      	cmp	r3, #2
 81024d6:	d901      	bls.n	81024dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81024d8:	2303      	movs	r3, #3
 81024da:	e088      	b.n	81025ee <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81024dc:	4b46      	ldr	r3, [pc, #280]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81024de:	681b      	ldr	r3, [r3, #0]
 81024e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81024e4:	2b00      	cmp	r3, #0
 81024e6:	d1f0      	bne.n	81024ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81024e8:	4b43      	ldr	r3, [pc, #268]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	681b      	ldr	r3, [r3, #0]
 81024f4:	051b      	lsls	r3, r3, #20
 81024f6:	4940      	ldr	r1, [pc, #256]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81024f8:	4313      	orrs	r3, r2
 81024fa:	628b      	str	r3, [r1, #40]	; 0x28
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	685b      	ldr	r3, [r3, #4]
 8102500:	3b01      	subs	r3, #1
 8102502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	689b      	ldr	r3, [r3, #8]
 810250a:	3b01      	subs	r3, #1
 810250c:	025b      	lsls	r3, r3, #9
 810250e:	b29b      	uxth	r3, r3
 8102510:	431a      	orrs	r2, r3
 8102512:	687b      	ldr	r3, [r7, #4]
 8102514:	68db      	ldr	r3, [r3, #12]
 8102516:	3b01      	subs	r3, #1
 8102518:	041b      	lsls	r3, r3, #16
 810251a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810251e:	431a      	orrs	r2, r3
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	691b      	ldr	r3, [r3, #16]
 8102524:	3b01      	subs	r3, #1
 8102526:	061b      	lsls	r3, r3, #24
 8102528:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810252c:	4932      	ldr	r1, [pc, #200]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 810252e:	4313      	orrs	r3, r2
 8102530:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102532:	4b31      	ldr	r3, [pc, #196]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	695b      	ldr	r3, [r3, #20]
 810253e:	492e      	ldr	r1, [pc, #184]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102540:	4313      	orrs	r3, r2
 8102542:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102544:	4b2c      	ldr	r3, [pc, #176]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102548:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	699b      	ldr	r3, [r3, #24]
 8102550:	4929      	ldr	r1, [pc, #164]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102552:	4313      	orrs	r3, r2
 8102554:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102556:	4b28      	ldr	r3, [pc, #160]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810255a:	4a27      	ldr	r2, [pc, #156]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 810255c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102562:	4b25      	ldr	r3, [pc, #148]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810256a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810256e:	687a      	ldr	r2, [r7, #4]
 8102570:	69d2      	ldr	r2, [r2, #28]
 8102572:	00d2      	lsls	r2, r2, #3
 8102574:	4920      	ldr	r1, [pc, #128]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102576:	4313      	orrs	r3, r2
 8102578:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810257a:	4b1f      	ldr	r3, [pc, #124]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 810257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810257e:	4a1e      	ldr	r2, [pc, #120]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102586:	683b      	ldr	r3, [r7, #0]
 8102588:	2b00      	cmp	r3, #0
 810258a:	d106      	bne.n	810259a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810258c:	4b1a      	ldr	r3, [pc, #104]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 810258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102590:	4a19      	ldr	r2, [pc, #100]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 8102592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102598:	e00f      	b.n	81025ba <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810259a:	683b      	ldr	r3, [r7, #0]
 810259c:	2b01      	cmp	r3, #1
 810259e:	d106      	bne.n	81025ae <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81025a0:	4b15      	ldr	r3, [pc, #84]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025a4:	4a14      	ldr	r2, [pc, #80]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81025a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81025aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81025ac:	e005      	b.n	81025ba <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81025ae:	4b12      	ldr	r3, [pc, #72]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025b2:	4a11      	ldr	r2, [pc, #68]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81025b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81025b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81025ba:	4b0f      	ldr	r3, [pc, #60]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	4a0e      	ldr	r2, [pc, #56]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81025c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81025c6:	f7fe f975 	bl	81008b4 <HAL_GetTick>
 81025ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81025cc:	e008      	b.n	81025e0 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81025ce:	f7fe f971 	bl	81008b4 <HAL_GetTick>
 81025d2:	4602      	mov	r2, r0
 81025d4:	68bb      	ldr	r3, [r7, #8]
 81025d6:	1ad3      	subs	r3, r2, r3
 81025d8:	2b02      	cmp	r3, #2
 81025da:	d901      	bls.n	81025e0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81025dc:	2303      	movs	r3, #3
 81025de:	e006      	b.n	81025ee <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81025e0:	4b05      	ldr	r3, [pc, #20]	; (81025f8 <RCCEx_PLL3_Config+0x160>)
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81025e8:	2b00      	cmp	r3, #0
 81025ea:	d0f0      	beq.n	81025ce <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 81025ee:	4618      	mov	r0, r3
 81025f0:	3710      	adds	r7, #16
 81025f2:	46bd      	mov	sp, r7
 81025f4:	bd80      	pop	{r7, pc}
 81025f6:	bf00      	nop
 81025f8:	58024400 	.word	0x58024400

081025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81025fc:	b580      	push	{r7, lr}
 81025fe:	b082      	sub	sp, #8
 8102600:	af00      	add	r7, sp, #0
 8102602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	2b00      	cmp	r3, #0
 8102608:	d101      	bne.n	810260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810260a:	2301      	movs	r3, #1
 810260c:	e049      	b.n	81026a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102614:	b2db      	uxtb	r3, r3
 8102616:	2b00      	cmp	r3, #0
 8102618:	d106      	bne.n	8102628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	2200      	movs	r2, #0
 810261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8102622:	6878      	ldr	r0, [r7, #4]
 8102624:	f000 f841 	bl	81026aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	2202      	movs	r2, #2
 810262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8102630:	687b      	ldr	r3, [r7, #4]
 8102632:	681a      	ldr	r2, [r3, #0]
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	3304      	adds	r3, #4
 8102638:	4619      	mov	r1, r3
 810263a:	4610      	mov	r0, r2
 810263c:	f000 fa00 	bl	8102a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	2201      	movs	r2, #1
 8102644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	2201      	movs	r2, #1
 810264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	2201      	movs	r2, #1
 8102654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	2201      	movs	r2, #1
 810265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	2201      	movs	r2, #1
 8102664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	2201      	movs	r2, #1
 810266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	2201      	movs	r2, #1
 8102674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	2201      	movs	r2, #1
 810267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	2201      	movs	r2, #1
 8102684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	2201      	movs	r2, #1
 810268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	2201      	movs	r2, #1
 8102694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8102698:	687b      	ldr	r3, [r7, #4]
 810269a:	2201      	movs	r2, #1
 810269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81026a0:	2300      	movs	r3, #0
}
 81026a2:	4618      	mov	r0, r3
 81026a4:	3708      	adds	r7, #8
 81026a6:	46bd      	mov	sp, r7
 81026a8:	bd80      	pop	{r7, pc}

081026aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81026aa:	b480      	push	{r7}
 81026ac:	b083      	sub	sp, #12
 81026ae:	af00      	add	r7, sp, #0
 81026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81026b2:	bf00      	nop
 81026b4:	370c      	adds	r7, #12
 81026b6:	46bd      	mov	sp, r7
 81026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026bc:	4770      	bx	lr
	...

081026c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81026c0:	b480      	push	{r7}
 81026c2:	b085      	sub	sp, #20
 81026c4:	af00      	add	r7, sp, #0
 81026c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81026c8:	687b      	ldr	r3, [r7, #4]
 81026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81026ce:	b2db      	uxtb	r3, r3
 81026d0:	2b01      	cmp	r3, #1
 81026d2:	d001      	beq.n	81026d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81026d4:	2301      	movs	r3, #1
 81026d6:	e054      	b.n	8102782 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	2202      	movs	r2, #2
 81026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	681b      	ldr	r3, [r3, #0]
 81026e4:	68da      	ldr	r2, [r3, #12]
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	f042 0201 	orr.w	r2, r2, #1
 81026ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	681b      	ldr	r3, [r3, #0]
 81026f4:	4a26      	ldr	r2, [pc, #152]	; (8102790 <HAL_TIM_Base_Start_IT+0xd0>)
 81026f6:	4293      	cmp	r3, r2
 81026f8:	d022      	beq.n	8102740 <HAL_TIM_Base_Start_IT+0x80>
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	681b      	ldr	r3, [r3, #0]
 81026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102702:	d01d      	beq.n	8102740 <HAL_TIM_Base_Start_IT+0x80>
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	4a22      	ldr	r2, [pc, #136]	; (8102794 <HAL_TIM_Base_Start_IT+0xd4>)
 810270a:	4293      	cmp	r3, r2
 810270c:	d018      	beq.n	8102740 <HAL_TIM_Base_Start_IT+0x80>
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	681b      	ldr	r3, [r3, #0]
 8102712:	4a21      	ldr	r2, [pc, #132]	; (8102798 <HAL_TIM_Base_Start_IT+0xd8>)
 8102714:	4293      	cmp	r3, r2
 8102716:	d013      	beq.n	8102740 <HAL_TIM_Base_Start_IT+0x80>
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	4a1f      	ldr	r2, [pc, #124]	; (810279c <HAL_TIM_Base_Start_IT+0xdc>)
 810271e:	4293      	cmp	r3, r2
 8102720:	d00e      	beq.n	8102740 <HAL_TIM_Base_Start_IT+0x80>
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	4a1e      	ldr	r2, [pc, #120]	; (81027a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8102728:	4293      	cmp	r3, r2
 810272a:	d009      	beq.n	8102740 <HAL_TIM_Base_Start_IT+0x80>
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	4a1c      	ldr	r2, [pc, #112]	; (81027a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8102732:	4293      	cmp	r3, r2
 8102734:	d004      	beq.n	8102740 <HAL_TIM_Base_Start_IT+0x80>
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	681b      	ldr	r3, [r3, #0]
 810273a:	4a1b      	ldr	r2, [pc, #108]	; (81027a8 <HAL_TIM_Base_Start_IT+0xe8>)
 810273c:	4293      	cmp	r3, r2
 810273e:	d115      	bne.n	810276c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	689a      	ldr	r2, [r3, #8]
 8102746:	4b19      	ldr	r3, [pc, #100]	; (81027ac <HAL_TIM_Base_Start_IT+0xec>)
 8102748:	4013      	ands	r3, r2
 810274a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810274c:	68fb      	ldr	r3, [r7, #12]
 810274e:	2b06      	cmp	r3, #6
 8102750:	d015      	beq.n	810277e <HAL_TIM_Base_Start_IT+0xbe>
 8102752:	68fb      	ldr	r3, [r7, #12]
 8102754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102758:	d011      	beq.n	810277e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	681a      	ldr	r2, [r3, #0]
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	f042 0201 	orr.w	r2, r2, #1
 8102768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810276a:	e008      	b.n	810277e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	681b      	ldr	r3, [r3, #0]
 8102770:	681a      	ldr	r2, [r3, #0]
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	681b      	ldr	r3, [r3, #0]
 8102776:	f042 0201 	orr.w	r2, r2, #1
 810277a:	601a      	str	r2, [r3, #0]
 810277c:	e000      	b.n	8102780 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810277e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8102780:	2300      	movs	r3, #0
}
 8102782:	4618      	mov	r0, r3
 8102784:	3714      	adds	r7, #20
 8102786:	46bd      	mov	sp, r7
 8102788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810278c:	4770      	bx	lr
 810278e:	bf00      	nop
 8102790:	40010000 	.word	0x40010000
 8102794:	40000400 	.word	0x40000400
 8102798:	40000800 	.word	0x40000800
 810279c:	40000c00 	.word	0x40000c00
 81027a0:	40010400 	.word	0x40010400
 81027a4:	40001800 	.word	0x40001800
 81027a8:	40014000 	.word	0x40014000
 81027ac:	00010007 	.word	0x00010007

081027b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81027b0:	b580      	push	{r7, lr}
 81027b2:	b082      	sub	sp, #8
 81027b4:	af00      	add	r7, sp, #0
 81027b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	691b      	ldr	r3, [r3, #16]
 81027be:	f003 0302 	and.w	r3, r3, #2
 81027c2:	2b02      	cmp	r3, #2
 81027c4:	d122      	bne.n	810280c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	68db      	ldr	r3, [r3, #12]
 81027cc:	f003 0302 	and.w	r3, r3, #2
 81027d0:	2b02      	cmp	r3, #2
 81027d2:	d11b      	bne.n	810280c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	f06f 0202 	mvn.w	r2, #2
 81027dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	2201      	movs	r2, #1
 81027e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	699b      	ldr	r3, [r3, #24]
 81027ea:	f003 0303 	and.w	r3, r3, #3
 81027ee:	2b00      	cmp	r3, #0
 81027f0:	d003      	beq.n	81027fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81027f2:	6878      	ldr	r0, [r7, #4]
 81027f4:	f000 f905 	bl	8102a02 <HAL_TIM_IC_CaptureCallback>
 81027f8:	e005      	b.n	8102806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81027fa:	6878      	ldr	r0, [r7, #4]
 81027fc:	f000 f8f7 	bl	81029ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102800:	6878      	ldr	r0, [r7, #4]
 8102802:	f000 f908 	bl	8102a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	2200      	movs	r2, #0
 810280a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	691b      	ldr	r3, [r3, #16]
 8102812:	f003 0304 	and.w	r3, r3, #4
 8102816:	2b04      	cmp	r3, #4
 8102818:	d122      	bne.n	8102860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	68db      	ldr	r3, [r3, #12]
 8102820:	f003 0304 	and.w	r3, r3, #4
 8102824:	2b04      	cmp	r3, #4
 8102826:	d11b      	bne.n	8102860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	f06f 0204 	mvn.w	r2, #4
 8102830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	2202      	movs	r2, #2
 8102836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	699b      	ldr	r3, [r3, #24]
 810283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102842:	2b00      	cmp	r3, #0
 8102844:	d003      	beq.n	810284e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102846:	6878      	ldr	r0, [r7, #4]
 8102848:	f000 f8db 	bl	8102a02 <HAL_TIM_IC_CaptureCallback>
 810284c:	e005      	b.n	810285a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810284e:	6878      	ldr	r0, [r7, #4]
 8102850:	f000 f8cd 	bl	81029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102854:	6878      	ldr	r0, [r7, #4]
 8102856:	f000 f8de 	bl	8102a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	2200      	movs	r2, #0
 810285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	691b      	ldr	r3, [r3, #16]
 8102866:	f003 0308 	and.w	r3, r3, #8
 810286a:	2b08      	cmp	r3, #8
 810286c:	d122      	bne.n	81028b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	68db      	ldr	r3, [r3, #12]
 8102874:	f003 0308 	and.w	r3, r3, #8
 8102878:	2b08      	cmp	r3, #8
 810287a:	d11b      	bne.n	81028b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	f06f 0208 	mvn.w	r2, #8
 8102884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	2204      	movs	r2, #4
 810288a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	69db      	ldr	r3, [r3, #28]
 8102892:	f003 0303 	and.w	r3, r3, #3
 8102896:	2b00      	cmp	r3, #0
 8102898:	d003      	beq.n	81028a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810289a:	6878      	ldr	r0, [r7, #4]
 810289c:	f000 f8b1 	bl	8102a02 <HAL_TIM_IC_CaptureCallback>
 81028a0:	e005      	b.n	81028ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81028a2:	6878      	ldr	r0, [r7, #4]
 81028a4:	f000 f8a3 	bl	81029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81028a8:	6878      	ldr	r0, [r7, #4]
 81028aa:	f000 f8b4 	bl	8102a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81028ae:	687b      	ldr	r3, [r7, #4]
 81028b0:	2200      	movs	r2, #0
 81028b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	691b      	ldr	r3, [r3, #16]
 81028ba:	f003 0310 	and.w	r3, r3, #16
 81028be:	2b10      	cmp	r3, #16
 81028c0:	d122      	bne.n	8102908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	68db      	ldr	r3, [r3, #12]
 81028c8:	f003 0310 	and.w	r3, r3, #16
 81028cc:	2b10      	cmp	r3, #16
 81028ce:	d11b      	bne.n	8102908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	681b      	ldr	r3, [r3, #0]
 81028d4:	f06f 0210 	mvn.w	r2, #16
 81028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	2208      	movs	r2, #8
 81028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	69db      	ldr	r3, [r3, #28]
 81028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81028ea:	2b00      	cmp	r3, #0
 81028ec:	d003      	beq.n	81028f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81028ee:	6878      	ldr	r0, [r7, #4]
 81028f0:	f000 f887 	bl	8102a02 <HAL_TIM_IC_CaptureCallback>
 81028f4:	e005      	b.n	8102902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81028f6:	6878      	ldr	r0, [r7, #4]
 81028f8:	f000 f879 	bl	81029ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81028fc:	6878      	ldr	r0, [r7, #4]
 81028fe:	f000 f88a 	bl	8102a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	2200      	movs	r2, #0
 8102906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	691b      	ldr	r3, [r3, #16]
 810290e:	f003 0301 	and.w	r3, r3, #1
 8102912:	2b01      	cmp	r3, #1
 8102914:	d10e      	bne.n	8102934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8102916:	687b      	ldr	r3, [r7, #4]
 8102918:	681b      	ldr	r3, [r3, #0]
 810291a:	68db      	ldr	r3, [r3, #12]
 810291c:	f003 0301 	and.w	r3, r3, #1
 8102920:	2b01      	cmp	r3, #1
 8102922:	d107      	bne.n	8102934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	f06f 0201 	mvn.w	r2, #1
 810292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810292e:	6878      	ldr	r0, [r7, #4]
 8102930:	f7fd fdfe 	bl	8100530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	691b      	ldr	r3, [r3, #16]
 810293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810293e:	2b80      	cmp	r3, #128	; 0x80
 8102940:	d10e      	bne.n	8102960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	681b      	ldr	r3, [r3, #0]
 8102946:	68db      	ldr	r3, [r3, #12]
 8102948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810294c:	2b80      	cmp	r3, #128	; 0x80
 810294e:	d107      	bne.n	8102960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8102958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810295a:	6878      	ldr	r0, [r7, #4]
 810295c:	f000 f914 	bl	8102b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	691b      	ldr	r3, [r3, #16]
 8102966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810296a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810296e:	d10e      	bne.n	810298e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	68db      	ldr	r3, [r3, #12]
 8102976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810297a:	2b80      	cmp	r3, #128	; 0x80
 810297c:	d107      	bne.n	810298e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	681b      	ldr	r3, [r3, #0]
 8102982:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8102986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8102988:	6878      	ldr	r0, [r7, #4]
 810298a:	f000 f907 	bl	8102b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	691b      	ldr	r3, [r3, #16]
 8102994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102998:	2b40      	cmp	r3, #64	; 0x40
 810299a:	d10e      	bne.n	81029ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	68db      	ldr	r3, [r3, #12]
 81029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81029a6:	2b40      	cmp	r3, #64	; 0x40
 81029a8:	d107      	bne.n	81029ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81029b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81029b4:	6878      	ldr	r0, [r7, #4]
 81029b6:	f000 f838 	bl	8102a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81029ba:	687b      	ldr	r3, [r7, #4]
 81029bc:	681b      	ldr	r3, [r3, #0]
 81029be:	691b      	ldr	r3, [r3, #16]
 81029c0:	f003 0320 	and.w	r3, r3, #32
 81029c4:	2b20      	cmp	r3, #32
 81029c6:	d10e      	bne.n	81029e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	68db      	ldr	r3, [r3, #12]
 81029ce:	f003 0320 	and.w	r3, r3, #32
 81029d2:	2b20      	cmp	r3, #32
 81029d4:	d107      	bne.n	81029e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81029d6:	687b      	ldr	r3, [r7, #4]
 81029d8:	681b      	ldr	r3, [r3, #0]
 81029da:	f06f 0220 	mvn.w	r2, #32
 81029de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81029e0:	6878      	ldr	r0, [r7, #4]
 81029e2:	f000 f8c7 	bl	8102b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81029e6:	bf00      	nop
 81029e8:	3708      	adds	r7, #8
 81029ea:	46bd      	mov	sp, r7
 81029ec:	bd80      	pop	{r7, pc}

081029ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81029ee:	b480      	push	{r7}
 81029f0:	b083      	sub	sp, #12
 81029f2:	af00      	add	r7, sp, #0
 81029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81029f6:	bf00      	nop
 81029f8:	370c      	adds	r7, #12
 81029fa:	46bd      	mov	sp, r7
 81029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a00:	4770      	bx	lr

08102a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102a02:	b480      	push	{r7}
 8102a04:	b083      	sub	sp, #12
 8102a06:	af00      	add	r7, sp, #0
 8102a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8102a0a:	bf00      	nop
 8102a0c:	370c      	adds	r7, #12
 8102a0e:	46bd      	mov	sp, r7
 8102a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a14:	4770      	bx	lr

08102a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8102a16:	b480      	push	{r7}
 8102a18:	b083      	sub	sp, #12
 8102a1a:	af00      	add	r7, sp, #0
 8102a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8102a1e:	bf00      	nop
 8102a20:	370c      	adds	r7, #12
 8102a22:	46bd      	mov	sp, r7
 8102a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a28:	4770      	bx	lr

08102a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8102a2a:	b480      	push	{r7}
 8102a2c:	b083      	sub	sp, #12
 8102a2e:	af00      	add	r7, sp, #0
 8102a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8102a32:	bf00      	nop
 8102a34:	370c      	adds	r7, #12
 8102a36:	46bd      	mov	sp, r7
 8102a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a3c:	4770      	bx	lr
	...

08102a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8102a40:	b480      	push	{r7}
 8102a42:	b085      	sub	sp, #20
 8102a44:	af00      	add	r7, sp, #0
 8102a46:	6078      	str	r0, [r7, #4]
 8102a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	4a40      	ldr	r2, [pc, #256]	; (8102b54 <TIM_Base_SetConfig+0x114>)
 8102a54:	4293      	cmp	r3, r2
 8102a56:	d013      	beq.n	8102a80 <TIM_Base_SetConfig+0x40>
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102a5e:	d00f      	beq.n	8102a80 <TIM_Base_SetConfig+0x40>
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	4a3d      	ldr	r2, [pc, #244]	; (8102b58 <TIM_Base_SetConfig+0x118>)
 8102a64:	4293      	cmp	r3, r2
 8102a66:	d00b      	beq.n	8102a80 <TIM_Base_SetConfig+0x40>
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	4a3c      	ldr	r2, [pc, #240]	; (8102b5c <TIM_Base_SetConfig+0x11c>)
 8102a6c:	4293      	cmp	r3, r2
 8102a6e:	d007      	beq.n	8102a80 <TIM_Base_SetConfig+0x40>
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	4a3b      	ldr	r2, [pc, #236]	; (8102b60 <TIM_Base_SetConfig+0x120>)
 8102a74:	4293      	cmp	r3, r2
 8102a76:	d003      	beq.n	8102a80 <TIM_Base_SetConfig+0x40>
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	4a3a      	ldr	r2, [pc, #232]	; (8102b64 <TIM_Base_SetConfig+0x124>)
 8102a7c:	4293      	cmp	r3, r2
 8102a7e:	d108      	bne.n	8102a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8102a80:	68fb      	ldr	r3, [r7, #12]
 8102a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8102a88:	683b      	ldr	r3, [r7, #0]
 8102a8a:	685b      	ldr	r3, [r3, #4]
 8102a8c:	68fa      	ldr	r2, [r7, #12]
 8102a8e:	4313      	orrs	r3, r2
 8102a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	4a2f      	ldr	r2, [pc, #188]	; (8102b54 <TIM_Base_SetConfig+0x114>)
 8102a96:	4293      	cmp	r3, r2
 8102a98:	d01f      	beq.n	8102ada <TIM_Base_SetConfig+0x9a>
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102aa0:	d01b      	beq.n	8102ada <TIM_Base_SetConfig+0x9a>
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	4a2c      	ldr	r2, [pc, #176]	; (8102b58 <TIM_Base_SetConfig+0x118>)
 8102aa6:	4293      	cmp	r3, r2
 8102aa8:	d017      	beq.n	8102ada <TIM_Base_SetConfig+0x9a>
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	4a2b      	ldr	r2, [pc, #172]	; (8102b5c <TIM_Base_SetConfig+0x11c>)
 8102aae:	4293      	cmp	r3, r2
 8102ab0:	d013      	beq.n	8102ada <TIM_Base_SetConfig+0x9a>
 8102ab2:	687b      	ldr	r3, [r7, #4]
 8102ab4:	4a2a      	ldr	r2, [pc, #168]	; (8102b60 <TIM_Base_SetConfig+0x120>)
 8102ab6:	4293      	cmp	r3, r2
 8102ab8:	d00f      	beq.n	8102ada <TIM_Base_SetConfig+0x9a>
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	4a29      	ldr	r2, [pc, #164]	; (8102b64 <TIM_Base_SetConfig+0x124>)
 8102abe:	4293      	cmp	r3, r2
 8102ac0:	d00b      	beq.n	8102ada <TIM_Base_SetConfig+0x9a>
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	4a28      	ldr	r2, [pc, #160]	; (8102b68 <TIM_Base_SetConfig+0x128>)
 8102ac6:	4293      	cmp	r3, r2
 8102ac8:	d007      	beq.n	8102ada <TIM_Base_SetConfig+0x9a>
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	4a27      	ldr	r2, [pc, #156]	; (8102b6c <TIM_Base_SetConfig+0x12c>)
 8102ace:	4293      	cmp	r3, r2
 8102ad0:	d003      	beq.n	8102ada <TIM_Base_SetConfig+0x9a>
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	4a26      	ldr	r2, [pc, #152]	; (8102b70 <TIM_Base_SetConfig+0x130>)
 8102ad6:	4293      	cmp	r3, r2
 8102ad8:	d108      	bne.n	8102aec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8102ada:	68fb      	ldr	r3, [r7, #12]
 8102adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8102ae2:	683b      	ldr	r3, [r7, #0]
 8102ae4:	68db      	ldr	r3, [r3, #12]
 8102ae6:	68fa      	ldr	r2, [r7, #12]
 8102ae8:	4313      	orrs	r3, r2
 8102aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8102aec:	68fb      	ldr	r3, [r7, #12]
 8102aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8102af2:	683b      	ldr	r3, [r7, #0]
 8102af4:	695b      	ldr	r3, [r3, #20]
 8102af6:	4313      	orrs	r3, r2
 8102af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	68fa      	ldr	r2, [r7, #12]
 8102afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8102b00:	683b      	ldr	r3, [r7, #0]
 8102b02:	689a      	ldr	r2, [r3, #8]
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8102b08:	683b      	ldr	r3, [r7, #0]
 8102b0a:	681a      	ldr	r2, [r3, #0]
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	4a10      	ldr	r2, [pc, #64]	; (8102b54 <TIM_Base_SetConfig+0x114>)
 8102b14:	4293      	cmp	r3, r2
 8102b16:	d00f      	beq.n	8102b38 <TIM_Base_SetConfig+0xf8>
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	4a12      	ldr	r2, [pc, #72]	; (8102b64 <TIM_Base_SetConfig+0x124>)
 8102b1c:	4293      	cmp	r3, r2
 8102b1e:	d00b      	beq.n	8102b38 <TIM_Base_SetConfig+0xf8>
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	4a11      	ldr	r2, [pc, #68]	; (8102b68 <TIM_Base_SetConfig+0x128>)
 8102b24:	4293      	cmp	r3, r2
 8102b26:	d007      	beq.n	8102b38 <TIM_Base_SetConfig+0xf8>
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	4a10      	ldr	r2, [pc, #64]	; (8102b6c <TIM_Base_SetConfig+0x12c>)
 8102b2c:	4293      	cmp	r3, r2
 8102b2e:	d003      	beq.n	8102b38 <TIM_Base_SetConfig+0xf8>
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	4a0f      	ldr	r2, [pc, #60]	; (8102b70 <TIM_Base_SetConfig+0x130>)
 8102b34:	4293      	cmp	r3, r2
 8102b36:	d103      	bne.n	8102b40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8102b38:	683b      	ldr	r3, [r7, #0]
 8102b3a:	691a      	ldr	r2, [r3, #16]
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	2201      	movs	r2, #1
 8102b44:	615a      	str	r2, [r3, #20]
}
 8102b46:	bf00      	nop
 8102b48:	3714      	adds	r7, #20
 8102b4a:	46bd      	mov	sp, r7
 8102b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b50:	4770      	bx	lr
 8102b52:	bf00      	nop
 8102b54:	40010000 	.word	0x40010000
 8102b58:	40000400 	.word	0x40000400
 8102b5c:	40000800 	.word	0x40000800
 8102b60:	40000c00 	.word	0x40000c00
 8102b64:	40010400 	.word	0x40010400
 8102b68:	40014000 	.word	0x40014000
 8102b6c:	40014400 	.word	0x40014400
 8102b70:	40014800 	.word	0x40014800

08102b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8102b74:	b480      	push	{r7}
 8102b76:	b083      	sub	sp, #12
 8102b78:	af00      	add	r7, sp, #0
 8102b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8102b7c:	bf00      	nop
 8102b7e:	370c      	adds	r7, #12
 8102b80:	46bd      	mov	sp, r7
 8102b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b86:	4770      	bx	lr

08102b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8102b88:	b480      	push	{r7}
 8102b8a:	b083      	sub	sp, #12
 8102b8c:	af00      	add	r7, sp, #0
 8102b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8102b90:	bf00      	nop
 8102b92:	370c      	adds	r7, #12
 8102b94:	46bd      	mov	sp, r7
 8102b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b9a:	4770      	bx	lr

08102b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8102b9c:	b480      	push	{r7}
 8102b9e:	b083      	sub	sp, #12
 8102ba0:	af00      	add	r7, sp, #0
 8102ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8102ba4:	bf00      	nop
 8102ba6:	370c      	adds	r7, #12
 8102ba8:	46bd      	mov	sp, r7
 8102baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bae:	4770      	bx	lr

08102bb0 <__NVIC_SetPriority>:
{
 8102bb0:	b480      	push	{r7}
 8102bb2:	b083      	sub	sp, #12
 8102bb4:	af00      	add	r7, sp, #0
 8102bb6:	4603      	mov	r3, r0
 8102bb8:	6039      	str	r1, [r7, #0]
 8102bba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bc0:	2b00      	cmp	r3, #0
 8102bc2:	db0a      	blt.n	8102bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102bc4:	683b      	ldr	r3, [r7, #0]
 8102bc6:	b2da      	uxtb	r2, r3
 8102bc8:	490c      	ldr	r1, [pc, #48]	; (8102bfc <__NVIC_SetPriority+0x4c>)
 8102bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bce:	0112      	lsls	r2, r2, #4
 8102bd0:	b2d2      	uxtb	r2, r2
 8102bd2:	440b      	add	r3, r1
 8102bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8102bd8:	e00a      	b.n	8102bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102bda:	683b      	ldr	r3, [r7, #0]
 8102bdc:	b2da      	uxtb	r2, r3
 8102bde:	4908      	ldr	r1, [pc, #32]	; (8102c00 <__NVIC_SetPriority+0x50>)
 8102be0:	88fb      	ldrh	r3, [r7, #6]
 8102be2:	f003 030f 	and.w	r3, r3, #15
 8102be6:	3b04      	subs	r3, #4
 8102be8:	0112      	lsls	r2, r2, #4
 8102bea:	b2d2      	uxtb	r2, r2
 8102bec:	440b      	add	r3, r1
 8102bee:	761a      	strb	r2, [r3, #24]
}
 8102bf0:	bf00      	nop
 8102bf2:	370c      	adds	r7, #12
 8102bf4:	46bd      	mov	sp, r7
 8102bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bfa:	4770      	bx	lr
 8102bfc:	e000e100 	.word	0xe000e100
 8102c00:	e000ed00 	.word	0xe000ed00

08102c04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8102c04:	b580      	push	{r7, lr}
 8102c06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8102c08:	4b05      	ldr	r3, [pc, #20]	; (8102c20 <SysTick_Handler+0x1c>)
 8102c0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8102c0c:	f002 f960 	bl	8104ed0 <xTaskGetSchedulerState>
 8102c10:	4603      	mov	r3, r0
 8102c12:	2b01      	cmp	r3, #1
 8102c14:	d001      	beq.n	8102c1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8102c16:	f000 fd97 	bl	8103748 <xPortSysTickHandler>
  }
}
 8102c1a:	bf00      	nop
 8102c1c:	bd80      	pop	{r7, pc}
 8102c1e:	bf00      	nop
 8102c20:	e000e010 	.word	0xe000e010

08102c24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8102c24:	b580      	push	{r7, lr}
 8102c26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8102c28:	2100      	movs	r1, #0
 8102c2a:	f06f 0004 	mvn.w	r0, #4
 8102c2e:	f7ff ffbf 	bl	8102bb0 <__NVIC_SetPriority>
#endif
}
 8102c32:	bf00      	nop
 8102c34:	bd80      	pop	{r7, pc}
	...

08102c38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8102c38:	b480      	push	{r7}
 8102c3a:	b083      	sub	sp, #12
 8102c3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102c3e:	f3ef 8305 	mrs	r3, IPSR
 8102c42:	603b      	str	r3, [r7, #0]
  return(result);
 8102c44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8102c46:	2b00      	cmp	r3, #0
 8102c48:	d003      	beq.n	8102c52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8102c4a:	f06f 0305 	mvn.w	r3, #5
 8102c4e:	607b      	str	r3, [r7, #4]
 8102c50:	e00c      	b.n	8102c6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8102c52:	4b0a      	ldr	r3, [pc, #40]	; (8102c7c <osKernelInitialize+0x44>)
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	2b00      	cmp	r3, #0
 8102c58:	d105      	bne.n	8102c66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8102c5a:	4b08      	ldr	r3, [pc, #32]	; (8102c7c <osKernelInitialize+0x44>)
 8102c5c:	2201      	movs	r2, #1
 8102c5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8102c60:	2300      	movs	r3, #0
 8102c62:	607b      	str	r3, [r7, #4]
 8102c64:	e002      	b.n	8102c6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8102c66:	f04f 33ff 	mov.w	r3, #4294967295
 8102c6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8102c6c:	687b      	ldr	r3, [r7, #4]
}
 8102c6e:	4618      	mov	r0, r3
 8102c70:	370c      	adds	r7, #12
 8102c72:	46bd      	mov	sp, r7
 8102c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c78:	4770      	bx	lr
 8102c7a:	bf00      	nop
 8102c7c:	10000138 	.word	0x10000138

08102c80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8102c80:	b580      	push	{r7, lr}
 8102c82:	b082      	sub	sp, #8
 8102c84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102c86:	f3ef 8305 	mrs	r3, IPSR
 8102c8a:	603b      	str	r3, [r7, #0]
  return(result);
 8102c8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8102c8e:	2b00      	cmp	r3, #0
 8102c90:	d003      	beq.n	8102c9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8102c92:	f06f 0305 	mvn.w	r3, #5
 8102c96:	607b      	str	r3, [r7, #4]
 8102c98:	e010      	b.n	8102cbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8102c9a:	4b0b      	ldr	r3, [pc, #44]	; (8102cc8 <osKernelStart+0x48>)
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	2b01      	cmp	r3, #1
 8102ca0:	d109      	bne.n	8102cb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8102ca2:	f7ff ffbf 	bl	8102c24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8102ca6:	4b08      	ldr	r3, [pc, #32]	; (8102cc8 <osKernelStart+0x48>)
 8102ca8:	2202      	movs	r2, #2
 8102caa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8102cac:	f001 fcb4 	bl	8104618 <vTaskStartScheduler>
      stat = osOK;
 8102cb0:	2300      	movs	r3, #0
 8102cb2:	607b      	str	r3, [r7, #4]
 8102cb4:	e002      	b.n	8102cbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8102cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8102cba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8102cbc:	687b      	ldr	r3, [r7, #4]
}
 8102cbe:	4618      	mov	r0, r3
 8102cc0:	3708      	adds	r7, #8
 8102cc2:	46bd      	mov	sp, r7
 8102cc4:	bd80      	pop	{r7, pc}
 8102cc6:	bf00      	nop
 8102cc8:	10000138 	.word	0x10000138

08102ccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8102ccc:	b580      	push	{r7, lr}
 8102cce:	b08e      	sub	sp, #56	; 0x38
 8102cd0:	af04      	add	r7, sp, #16
 8102cd2:	60f8      	str	r0, [r7, #12]
 8102cd4:	60b9      	str	r1, [r7, #8]
 8102cd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8102cd8:	2300      	movs	r3, #0
 8102cda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102cdc:	f3ef 8305 	mrs	r3, IPSR
 8102ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8102ce2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8102ce4:	2b00      	cmp	r3, #0
 8102ce6:	d17e      	bne.n	8102de6 <osThreadNew+0x11a>
 8102ce8:	68fb      	ldr	r3, [r7, #12]
 8102cea:	2b00      	cmp	r3, #0
 8102cec:	d07b      	beq.n	8102de6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8102cee:	2380      	movs	r3, #128	; 0x80
 8102cf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8102cf2:	2318      	movs	r3, #24
 8102cf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8102cf6:	2300      	movs	r3, #0
 8102cf8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8102cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8102cfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	2b00      	cmp	r3, #0
 8102d04:	d045      	beq.n	8102d92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	2b00      	cmp	r3, #0
 8102d0c:	d002      	beq.n	8102d14 <osThreadNew+0x48>
        name = attr->name;
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	699b      	ldr	r3, [r3, #24]
 8102d18:	2b00      	cmp	r3, #0
 8102d1a:	d002      	beq.n	8102d22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	699b      	ldr	r3, [r3, #24]
 8102d20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8102d22:	69fb      	ldr	r3, [r7, #28]
 8102d24:	2b00      	cmp	r3, #0
 8102d26:	d008      	beq.n	8102d3a <osThreadNew+0x6e>
 8102d28:	69fb      	ldr	r3, [r7, #28]
 8102d2a:	2b38      	cmp	r3, #56	; 0x38
 8102d2c:	d805      	bhi.n	8102d3a <osThreadNew+0x6e>
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	685b      	ldr	r3, [r3, #4]
 8102d32:	f003 0301 	and.w	r3, r3, #1
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d001      	beq.n	8102d3e <osThreadNew+0x72>
        return (NULL);
 8102d3a:	2300      	movs	r3, #0
 8102d3c:	e054      	b.n	8102de8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	695b      	ldr	r3, [r3, #20]
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d003      	beq.n	8102d4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	695b      	ldr	r3, [r3, #20]
 8102d4a:	089b      	lsrs	r3, r3, #2
 8102d4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	689b      	ldr	r3, [r3, #8]
 8102d52:	2b00      	cmp	r3, #0
 8102d54:	d00e      	beq.n	8102d74 <osThreadNew+0xa8>
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	68db      	ldr	r3, [r3, #12]
 8102d5a:	2bbb      	cmp	r3, #187	; 0xbb
 8102d5c:	d90a      	bls.n	8102d74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8102d62:	2b00      	cmp	r3, #0
 8102d64:	d006      	beq.n	8102d74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	695b      	ldr	r3, [r3, #20]
 8102d6a:	2b00      	cmp	r3, #0
 8102d6c:	d002      	beq.n	8102d74 <osThreadNew+0xa8>
        mem = 1;
 8102d6e:	2301      	movs	r3, #1
 8102d70:	61bb      	str	r3, [r7, #24]
 8102d72:	e010      	b.n	8102d96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	689b      	ldr	r3, [r3, #8]
 8102d78:	2b00      	cmp	r3, #0
 8102d7a:	d10c      	bne.n	8102d96 <osThreadNew+0xca>
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	68db      	ldr	r3, [r3, #12]
 8102d80:	2b00      	cmp	r3, #0
 8102d82:	d108      	bne.n	8102d96 <osThreadNew+0xca>
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	691b      	ldr	r3, [r3, #16]
 8102d88:	2b00      	cmp	r3, #0
 8102d8a:	d104      	bne.n	8102d96 <osThreadNew+0xca>
          mem = 0;
 8102d8c:	2300      	movs	r3, #0
 8102d8e:	61bb      	str	r3, [r7, #24]
 8102d90:	e001      	b.n	8102d96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8102d92:	2300      	movs	r3, #0
 8102d94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8102d96:	69bb      	ldr	r3, [r7, #24]
 8102d98:	2b01      	cmp	r3, #1
 8102d9a:	d110      	bne.n	8102dbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8102da0:	687a      	ldr	r2, [r7, #4]
 8102da2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8102da4:	9202      	str	r2, [sp, #8]
 8102da6:	9301      	str	r3, [sp, #4]
 8102da8:	69fb      	ldr	r3, [r7, #28]
 8102daa:	9300      	str	r3, [sp, #0]
 8102dac:	68bb      	ldr	r3, [r7, #8]
 8102dae:	6a3a      	ldr	r2, [r7, #32]
 8102db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8102db2:	68f8      	ldr	r0, [r7, #12]
 8102db4:	f001 fa44 	bl	8104240 <xTaskCreateStatic>
 8102db8:	4603      	mov	r3, r0
 8102dba:	613b      	str	r3, [r7, #16]
 8102dbc:	e013      	b.n	8102de6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8102dbe:	69bb      	ldr	r3, [r7, #24]
 8102dc0:	2b00      	cmp	r3, #0
 8102dc2:	d110      	bne.n	8102de6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8102dc4:	6a3b      	ldr	r3, [r7, #32]
 8102dc6:	b29a      	uxth	r2, r3
 8102dc8:	f107 0310 	add.w	r3, r7, #16
 8102dcc:	9301      	str	r3, [sp, #4]
 8102dce:	69fb      	ldr	r3, [r7, #28]
 8102dd0:	9300      	str	r3, [sp, #0]
 8102dd2:	68bb      	ldr	r3, [r7, #8]
 8102dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8102dd6:	68f8      	ldr	r0, [r7, #12]
 8102dd8:	f001 fa8f 	bl	81042fa <xTaskCreate>
 8102ddc:	4603      	mov	r3, r0
 8102dde:	2b01      	cmp	r3, #1
 8102de0:	d001      	beq.n	8102de6 <osThreadNew+0x11a>
            hTask = NULL;
 8102de2:	2300      	movs	r3, #0
 8102de4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8102de6:	693b      	ldr	r3, [r7, #16]
}
 8102de8:	4618      	mov	r0, r3
 8102dea:	3728      	adds	r7, #40	; 0x28
 8102dec:	46bd      	mov	sp, r7
 8102dee:	bd80      	pop	{r7, pc}

08102df0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8102df0:	b580      	push	{r7, lr}
 8102df2:	b084      	sub	sp, #16
 8102df4:	af00      	add	r7, sp, #0
 8102df6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102df8:	f3ef 8305 	mrs	r3, IPSR
 8102dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8102dfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8102e00:	2b00      	cmp	r3, #0
 8102e02:	d003      	beq.n	8102e0c <osDelay+0x1c>
    stat = osErrorISR;
 8102e04:	f06f 0305 	mvn.w	r3, #5
 8102e08:	60fb      	str	r3, [r7, #12]
 8102e0a:	e007      	b.n	8102e1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8102e0c:	2300      	movs	r3, #0
 8102e0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8102e10:	687b      	ldr	r3, [r7, #4]
 8102e12:	2b00      	cmp	r3, #0
 8102e14:	d002      	beq.n	8102e1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8102e16:	6878      	ldr	r0, [r7, #4]
 8102e18:	f001 fbca 	bl	81045b0 <vTaskDelay>
    }
  }

  return (stat);
 8102e1c:	68fb      	ldr	r3, [r7, #12]
}
 8102e1e:	4618      	mov	r0, r3
 8102e20:	3710      	adds	r7, #16
 8102e22:	46bd      	mov	sp, r7
 8102e24:	bd80      	pop	{r7, pc}
	...

08102e28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8102e28:	b480      	push	{r7}
 8102e2a:	b085      	sub	sp, #20
 8102e2c:	af00      	add	r7, sp, #0
 8102e2e:	60f8      	str	r0, [r7, #12]
 8102e30:	60b9      	str	r1, [r7, #8]
 8102e32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	4a07      	ldr	r2, [pc, #28]	; (8102e54 <vApplicationGetIdleTaskMemory+0x2c>)
 8102e38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8102e3a:	68bb      	ldr	r3, [r7, #8]
 8102e3c:	4a06      	ldr	r2, [pc, #24]	; (8102e58 <vApplicationGetIdleTaskMemory+0x30>)
 8102e3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	2280      	movs	r2, #128	; 0x80
 8102e44:	601a      	str	r2, [r3, #0]
}
 8102e46:	bf00      	nop
 8102e48:	3714      	adds	r7, #20
 8102e4a:	46bd      	mov	sp, r7
 8102e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e50:	4770      	bx	lr
 8102e52:	bf00      	nop
 8102e54:	1000013c 	.word	0x1000013c
 8102e58:	100001f8 	.word	0x100001f8

08102e5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8102e5c:	b480      	push	{r7}
 8102e5e:	b085      	sub	sp, #20
 8102e60:	af00      	add	r7, sp, #0
 8102e62:	60f8      	str	r0, [r7, #12]
 8102e64:	60b9      	str	r1, [r7, #8]
 8102e66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8102e68:	68fb      	ldr	r3, [r7, #12]
 8102e6a:	4a07      	ldr	r2, [pc, #28]	; (8102e88 <vApplicationGetTimerTaskMemory+0x2c>)
 8102e6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8102e6e:	68bb      	ldr	r3, [r7, #8]
 8102e70:	4a06      	ldr	r2, [pc, #24]	; (8102e8c <vApplicationGetTimerTaskMemory+0x30>)
 8102e72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8102e74:	687b      	ldr	r3, [r7, #4]
 8102e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102e7a:	601a      	str	r2, [r3, #0]
}
 8102e7c:	bf00      	nop
 8102e7e:	3714      	adds	r7, #20
 8102e80:	46bd      	mov	sp, r7
 8102e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e86:	4770      	bx	lr
 8102e88:	100003f8 	.word	0x100003f8
 8102e8c:	100004b4 	.word	0x100004b4

08102e90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8102e90:	b580      	push	{r7, lr}
 8102e92:	b08a      	sub	sp, #40	; 0x28
 8102e94:	af00      	add	r7, sp, #0
 8102e96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8102e98:	2300      	movs	r3, #0
 8102e9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8102e9c:	f001 fc2c 	bl	81046f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8102ea0:	4b5b      	ldr	r3, [pc, #364]	; (8103010 <pvPortMalloc+0x180>)
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	2b00      	cmp	r3, #0
 8102ea6:	d101      	bne.n	8102eac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8102ea8:	f000 f920 	bl	81030ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8102eac:	4b59      	ldr	r3, [pc, #356]	; (8103014 <pvPortMalloc+0x184>)
 8102eae:	681a      	ldr	r2, [r3, #0]
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	4013      	ands	r3, r2
 8102eb4:	2b00      	cmp	r3, #0
 8102eb6:	f040 8093 	bne.w	8102fe0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	2b00      	cmp	r3, #0
 8102ebe:	d01d      	beq.n	8102efc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8102ec0:	2208      	movs	r2, #8
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	4413      	add	r3, r2
 8102ec6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	f003 0307 	and.w	r3, r3, #7
 8102ece:	2b00      	cmp	r3, #0
 8102ed0:	d014      	beq.n	8102efc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	f023 0307 	bic.w	r3, r3, #7
 8102ed8:	3308      	adds	r3, #8
 8102eda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	f003 0307 	and.w	r3, r3, #7
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	d00a      	beq.n	8102efc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8102ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102eea:	f383 8811 	msr	BASEPRI, r3
 8102eee:	f3bf 8f6f 	isb	sy
 8102ef2:	f3bf 8f4f 	dsb	sy
 8102ef6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8102ef8:	bf00      	nop
 8102efa:	e7fe      	b.n	8102efa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	2b00      	cmp	r3, #0
 8102f00:	d06e      	beq.n	8102fe0 <pvPortMalloc+0x150>
 8102f02:	4b45      	ldr	r3, [pc, #276]	; (8103018 <pvPortMalloc+0x188>)
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	687a      	ldr	r2, [r7, #4]
 8102f08:	429a      	cmp	r2, r3
 8102f0a:	d869      	bhi.n	8102fe0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8102f0c:	4b43      	ldr	r3, [pc, #268]	; (810301c <pvPortMalloc+0x18c>)
 8102f0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8102f10:	4b42      	ldr	r3, [pc, #264]	; (810301c <pvPortMalloc+0x18c>)
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8102f16:	e004      	b.n	8102f22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8102f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8102f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8102f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f24:	685b      	ldr	r3, [r3, #4]
 8102f26:	687a      	ldr	r2, [r7, #4]
 8102f28:	429a      	cmp	r2, r3
 8102f2a:	d903      	bls.n	8102f34 <pvPortMalloc+0xa4>
 8102f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	d1f1      	bne.n	8102f18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8102f34:	4b36      	ldr	r3, [pc, #216]	; (8103010 <pvPortMalloc+0x180>)
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102f3a:	429a      	cmp	r2, r3
 8102f3c:	d050      	beq.n	8102fe0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8102f3e:	6a3b      	ldr	r3, [r7, #32]
 8102f40:	681b      	ldr	r3, [r3, #0]
 8102f42:	2208      	movs	r2, #8
 8102f44:	4413      	add	r3, r2
 8102f46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8102f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f4a:	681a      	ldr	r2, [r3, #0]
 8102f4c:	6a3b      	ldr	r3, [r7, #32]
 8102f4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8102f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f52:	685a      	ldr	r2, [r3, #4]
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	1ad2      	subs	r2, r2, r3
 8102f58:	2308      	movs	r3, #8
 8102f5a:	005b      	lsls	r3, r3, #1
 8102f5c:	429a      	cmp	r2, r3
 8102f5e:	d91f      	bls.n	8102fa0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8102f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	4413      	add	r3, r2
 8102f66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8102f68:	69bb      	ldr	r3, [r7, #24]
 8102f6a:	f003 0307 	and.w	r3, r3, #7
 8102f6e:	2b00      	cmp	r3, #0
 8102f70:	d00a      	beq.n	8102f88 <pvPortMalloc+0xf8>
	__asm volatile
 8102f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102f76:	f383 8811 	msr	BASEPRI, r3
 8102f7a:	f3bf 8f6f 	isb	sy
 8102f7e:	f3bf 8f4f 	dsb	sy
 8102f82:	613b      	str	r3, [r7, #16]
}
 8102f84:	bf00      	nop
 8102f86:	e7fe      	b.n	8102f86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8102f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f8a:	685a      	ldr	r2, [r3, #4]
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	1ad2      	subs	r2, r2, r3
 8102f90:	69bb      	ldr	r3, [r7, #24]
 8102f92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8102f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102f96:	687a      	ldr	r2, [r7, #4]
 8102f98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8102f9a:	69b8      	ldr	r0, [r7, #24]
 8102f9c:	f000 f908 	bl	81031b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8102fa0:	4b1d      	ldr	r3, [pc, #116]	; (8103018 <pvPortMalloc+0x188>)
 8102fa2:	681a      	ldr	r2, [r3, #0]
 8102fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fa6:	685b      	ldr	r3, [r3, #4]
 8102fa8:	1ad3      	subs	r3, r2, r3
 8102faa:	4a1b      	ldr	r2, [pc, #108]	; (8103018 <pvPortMalloc+0x188>)
 8102fac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8102fae:	4b1a      	ldr	r3, [pc, #104]	; (8103018 <pvPortMalloc+0x188>)
 8102fb0:	681a      	ldr	r2, [r3, #0]
 8102fb2:	4b1b      	ldr	r3, [pc, #108]	; (8103020 <pvPortMalloc+0x190>)
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	429a      	cmp	r2, r3
 8102fb8:	d203      	bcs.n	8102fc2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8102fba:	4b17      	ldr	r3, [pc, #92]	; (8103018 <pvPortMalloc+0x188>)
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	4a18      	ldr	r2, [pc, #96]	; (8103020 <pvPortMalloc+0x190>)
 8102fc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8102fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fc4:	685a      	ldr	r2, [r3, #4]
 8102fc6:	4b13      	ldr	r3, [pc, #76]	; (8103014 <pvPortMalloc+0x184>)
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	431a      	orrs	r2, r3
 8102fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8102fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fd2:	2200      	movs	r2, #0
 8102fd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8102fd6:	4b13      	ldr	r3, [pc, #76]	; (8103024 <pvPortMalloc+0x194>)
 8102fd8:	681b      	ldr	r3, [r3, #0]
 8102fda:	3301      	adds	r3, #1
 8102fdc:	4a11      	ldr	r2, [pc, #68]	; (8103024 <pvPortMalloc+0x194>)
 8102fde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8102fe0:	f001 fb98 	bl	8104714 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8102fe4:	69fb      	ldr	r3, [r7, #28]
 8102fe6:	f003 0307 	and.w	r3, r3, #7
 8102fea:	2b00      	cmp	r3, #0
 8102fec:	d00a      	beq.n	8103004 <pvPortMalloc+0x174>
	__asm volatile
 8102fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102ff2:	f383 8811 	msr	BASEPRI, r3
 8102ff6:	f3bf 8f6f 	isb	sy
 8102ffa:	f3bf 8f4f 	dsb	sy
 8102ffe:	60fb      	str	r3, [r7, #12]
}
 8103000:	bf00      	nop
 8103002:	e7fe      	b.n	8103002 <pvPortMalloc+0x172>
	return pvReturn;
 8103004:	69fb      	ldr	r3, [r7, #28]
}
 8103006:	4618      	mov	r0, r3
 8103008:	3728      	adds	r7, #40	; 0x28
 810300a:	46bd      	mov	sp, r7
 810300c:	bd80      	pop	{r7, pc}
 810300e:	bf00      	nop
 8103010:	100044bc 	.word	0x100044bc
 8103014:	100044d0 	.word	0x100044d0
 8103018:	100044c0 	.word	0x100044c0
 810301c:	100044b4 	.word	0x100044b4
 8103020:	100044c4 	.word	0x100044c4
 8103024:	100044c8 	.word	0x100044c8

08103028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8103028:	b580      	push	{r7, lr}
 810302a:	b086      	sub	sp, #24
 810302c:	af00      	add	r7, sp, #0
 810302e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	2b00      	cmp	r3, #0
 8103038:	d04d      	beq.n	81030d6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810303a:	2308      	movs	r3, #8
 810303c:	425b      	negs	r3, r3
 810303e:	697a      	ldr	r2, [r7, #20]
 8103040:	4413      	add	r3, r2
 8103042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8103044:	697b      	ldr	r3, [r7, #20]
 8103046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8103048:	693b      	ldr	r3, [r7, #16]
 810304a:	685a      	ldr	r2, [r3, #4]
 810304c:	4b24      	ldr	r3, [pc, #144]	; (81030e0 <vPortFree+0xb8>)
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	4013      	ands	r3, r2
 8103052:	2b00      	cmp	r3, #0
 8103054:	d10a      	bne.n	810306c <vPortFree+0x44>
	__asm volatile
 8103056:	f04f 0350 	mov.w	r3, #80	; 0x50
 810305a:	f383 8811 	msr	BASEPRI, r3
 810305e:	f3bf 8f6f 	isb	sy
 8103062:	f3bf 8f4f 	dsb	sy
 8103066:	60fb      	str	r3, [r7, #12]
}
 8103068:	bf00      	nop
 810306a:	e7fe      	b.n	810306a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810306c:	693b      	ldr	r3, [r7, #16]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	2b00      	cmp	r3, #0
 8103072:	d00a      	beq.n	810308a <vPortFree+0x62>
	__asm volatile
 8103074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103078:	f383 8811 	msr	BASEPRI, r3
 810307c:	f3bf 8f6f 	isb	sy
 8103080:	f3bf 8f4f 	dsb	sy
 8103084:	60bb      	str	r3, [r7, #8]
}
 8103086:	bf00      	nop
 8103088:	e7fe      	b.n	8103088 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810308a:	693b      	ldr	r3, [r7, #16]
 810308c:	685a      	ldr	r2, [r3, #4]
 810308e:	4b14      	ldr	r3, [pc, #80]	; (81030e0 <vPortFree+0xb8>)
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	4013      	ands	r3, r2
 8103094:	2b00      	cmp	r3, #0
 8103096:	d01e      	beq.n	81030d6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8103098:	693b      	ldr	r3, [r7, #16]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	2b00      	cmp	r3, #0
 810309e:	d11a      	bne.n	81030d6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81030a0:	693b      	ldr	r3, [r7, #16]
 81030a2:	685a      	ldr	r2, [r3, #4]
 81030a4:	4b0e      	ldr	r3, [pc, #56]	; (81030e0 <vPortFree+0xb8>)
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	43db      	mvns	r3, r3
 81030aa:	401a      	ands	r2, r3
 81030ac:	693b      	ldr	r3, [r7, #16]
 81030ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81030b0:	f001 fb22 	bl	81046f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81030b4:	693b      	ldr	r3, [r7, #16]
 81030b6:	685a      	ldr	r2, [r3, #4]
 81030b8:	4b0a      	ldr	r3, [pc, #40]	; (81030e4 <vPortFree+0xbc>)
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	4413      	add	r3, r2
 81030be:	4a09      	ldr	r2, [pc, #36]	; (81030e4 <vPortFree+0xbc>)
 81030c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81030c2:	6938      	ldr	r0, [r7, #16]
 81030c4:	f000 f874 	bl	81031b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81030c8:	4b07      	ldr	r3, [pc, #28]	; (81030e8 <vPortFree+0xc0>)
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	3301      	adds	r3, #1
 81030ce:	4a06      	ldr	r2, [pc, #24]	; (81030e8 <vPortFree+0xc0>)
 81030d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81030d2:	f001 fb1f 	bl	8104714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81030d6:	bf00      	nop
 81030d8:	3718      	adds	r7, #24
 81030da:	46bd      	mov	sp, r7
 81030dc:	bd80      	pop	{r7, pc}
 81030de:	bf00      	nop
 81030e0:	100044d0 	.word	0x100044d0
 81030e4:	100044c0 	.word	0x100044c0
 81030e8:	100044cc 	.word	0x100044cc

081030ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81030ec:	b480      	push	{r7}
 81030ee:	b085      	sub	sp, #20
 81030f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81030f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 81030f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81030f8:	4b27      	ldr	r3, [pc, #156]	; (8103198 <prvHeapInit+0xac>)
 81030fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81030fc:	68fb      	ldr	r3, [r7, #12]
 81030fe:	f003 0307 	and.w	r3, r3, #7
 8103102:	2b00      	cmp	r3, #0
 8103104:	d00c      	beq.n	8103120 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8103106:	68fb      	ldr	r3, [r7, #12]
 8103108:	3307      	adds	r3, #7
 810310a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810310c:	68fb      	ldr	r3, [r7, #12]
 810310e:	f023 0307 	bic.w	r3, r3, #7
 8103112:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8103114:	68ba      	ldr	r2, [r7, #8]
 8103116:	68fb      	ldr	r3, [r7, #12]
 8103118:	1ad3      	subs	r3, r2, r3
 810311a:	4a1f      	ldr	r2, [pc, #124]	; (8103198 <prvHeapInit+0xac>)
 810311c:	4413      	add	r3, r2
 810311e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8103120:	68fb      	ldr	r3, [r7, #12]
 8103122:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8103124:	4a1d      	ldr	r2, [pc, #116]	; (810319c <prvHeapInit+0xb0>)
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810312a:	4b1c      	ldr	r3, [pc, #112]	; (810319c <prvHeapInit+0xb0>)
 810312c:	2200      	movs	r2, #0
 810312e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	68ba      	ldr	r2, [r7, #8]
 8103134:	4413      	add	r3, r2
 8103136:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8103138:	2208      	movs	r2, #8
 810313a:	68fb      	ldr	r3, [r7, #12]
 810313c:	1a9b      	subs	r3, r3, r2
 810313e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8103140:	68fb      	ldr	r3, [r7, #12]
 8103142:	f023 0307 	bic.w	r3, r3, #7
 8103146:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8103148:	68fb      	ldr	r3, [r7, #12]
 810314a:	4a15      	ldr	r2, [pc, #84]	; (81031a0 <prvHeapInit+0xb4>)
 810314c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810314e:	4b14      	ldr	r3, [pc, #80]	; (81031a0 <prvHeapInit+0xb4>)
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	2200      	movs	r2, #0
 8103154:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8103156:	4b12      	ldr	r3, [pc, #72]	; (81031a0 <prvHeapInit+0xb4>)
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	2200      	movs	r2, #0
 810315c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8103162:	683b      	ldr	r3, [r7, #0]
 8103164:	68fa      	ldr	r2, [r7, #12]
 8103166:	1ad2      	subs	r2, r2, r3
 8103168:	683b      	ldr	r3, [r7, #0]
 810316a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810316c:	4b0c      	ldr	r3, [pc, #48]	; (81031a0 <prvHeapInit+0xb4>)
 810316e:	681a      	ldr	r2, [r3, #0]
 8103170:	683b      	ldr	r3, [r7, #0]
 8103172:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8103174:	683b      	ldr	r3, [r7, #0]
 8103176:	685b      	ldr	r3, [r3, #4]
 8103178:	4a0a      	ldr	r2, [pc, #40]	; (81031a4 <prvHeapInit+0xb8>)
 810317a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810317c:	683b      	ldr	r3, [r7, #0]
 810317e:	685b      	ldr	r3, [r3, #4]
 8103180:	4a09      	ldr	r2, [pc, #36]	; (81031a8 <prvHeapInit+0xbc>)
 8103182:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8103184:	4b09      	ldr	r3, [pc, #36]	; (81031ac <prvHeapInit+0xc0>)
 8103186:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810318a:	601a      	str	r2, [r3, #0]
}
 810318c:	bf00      	nop
 810318e:	3714      	adds	r7, #20
 8103190:	46bd      	mov	sp, r7
 8103192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103196:	4770      	bx	lr
 8103198:	100008b4 	.word	0x100008b4
 810319c:	100044b4 	.word	0x100044b4
 81031a0:	100044bc 	.word	0x100044bc
 81031a4:	100044c4 	.word	0x100044c4
 81031a8:	100044c0 	.word	0x100044c0
 81031ac:	100044d0 	.word	0x100044d0

081031b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81031b0:	b480      	push	{r7}
 81031b2:	b085      	sub	sp, #20
 81031b4:	af00      	add	r7, sp, #0
 81031b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81031b8:	4b28      	ldr	r3, [pc, #160]	; (810325c <prvInsertBlockIntoFreeList+0xac>)
 81031ba:	60fb      	str	r3, [r7, #12]
 81031bc:	e002      	b.n	81031c4 <prvInsertBlockIntoFreeList+0x14>
 81031be:	68fb      	ldr	r3, [r7, #12]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	60fb      	str	r3, [r7, #12]
 81031c4:	68fb      	ldr	r3, [r7, #12]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	687a      	ldr	r2, [r7, #4]
 81031ca:	429a      	cmp	r2, r3
 81031cc:	d8f7      	bhi.n	81031be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81031ce:	68fb      	ldr	r3, [r7, #12]
 81031d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81031d2:	68fb      	ldr	r3, [r7, #12]
 81031d4:	685b      	ldr	r3, [r3, #4]
 81031d6:	68ba      	ldr	r2, [r7, #8]
 81031d8:	4413      	add	r3, r2
 81031da:	687a      	ldr	r2, [r7, #4]
 81031dc:	429a      	cmp	r2, r3
 81031de:	d108      	bne.n	81031f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81031e0:	68fb      	ldr	r3, [r7, #12]
 81031e2:	685a      	ldr	r2, [r3, #4]
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	685b      	ldr	r3, [r3, #4]
 81031e8:	441a      	add	r2, r3
 81031ea:	68fb      	ldr	r3, [r7, #12]
 81031ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81031ee:	68fb      	ldr	r3, [r7, #12]
 81031f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	685b      	ldr	r3, [r3, #4]
 81031fa:	68ba      	ldr	r2, [r7, #8]
 81031fc:	441a      	add	r2, r3
 81031fe:	68fb      	ldr	r3, [r7, #12]
 8103200:	681b      	ldr	r3, [r3, #0]
 8103202:	429a      	cmp	r2, r3
 8103204:	d118      	bne.n	8103238 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8103206:	68fb      	ldr	r3, [r7, #12]
 8103208:	681a      	ldr	r2, [r3, #0]
 810320a:	4b15      	ldr	r3, [pc, #84]	; (8103260 <prvInsertBlockIntoFreeList+0xb0>)
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	429a      	cmp	r2, r3
 8103210:	d00d      	beq.n	810322e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	685a      	ldr	r2, [r3, #4]
 8103216:	68fb      	ldr	r3, [r7, #12]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	685b      	ldr	r3, [r3, #4]
 810321c:	441a      	add	r2, r3
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8103222:	68fb      	ldr	r3, [r7, #12]
 8103224:	681b      	ldr	r3, [r3, #0]
 8103226:	681a      	ldr	r2, [r3, #0]
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	601a      	str	r2, [r3, #0]
 810322c:	e008      	b.n	8103240 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810322e:	4b0c      	ldr	r3, [pc, #48]	; (8103260 <prvInsertBlockIntoFreeList+0xb0>)
 8103230:	681a      	ldr	r2, [r3, #0]
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	601a      	str	r2, [r3, #0]
 8103236:	e003      	b.n	8103240 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8103238:	68fb      	ldr	r3, [r7, #12]
 810323a:	681a      	ldr	r2, [r3, #0]
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8103240:	68fa      	ldr	r2, [r7, #12]
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	429a      	cmp	r2, r3
 8103246:	d002      	beq.n	810324e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8103248:	68fb      	ldr	r3, [r7, #12]
 810324a:	687a      	ldr	r2, [r7, #4]
 810324c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810324e:	bf00      	nop
 8103250:	3714      	adds	r7, #20
 8103252:	46bd      	mov	sp, r7
 8103254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103258:	4770      	bx	lr
 810325a:	bf00      	nop
 810325c:	100044b4 	.word	0x100044b4
 8103260:	100044bc 	.word	0x100044bc

08103264 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8103264:	b480      	push	{r7}
 8103266:	b083      	sub	sp, #12
 8103268:	af00      	add	r7, sp, #0
 810326a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	f103 0208 	add.w	r2, r3, #8
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8103276:	687b      	ldr	r3, [r7, #4]
 8103278:	f04f 32ff 	mov.w	r2, #4294967295
 810327c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	f103 0208 	add.w	r2, r3, #8
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	f103 0208 	add.w	r2, r3, #8
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	2200      	movs	r2, #0
 8103296:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8103298:	bf00      	nop
 810329a:	370c      	adds	r7, #12
 810329c:	46bd      	mov	sp, r7
 810329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032a2:	4770      	bx	lr

081032a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81032a4:	b480      	push	{r7}
 81032a6:	b083      	sub	sp, #12
 81032a8:	af00      	add	r7, sp, #0
 81032aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	2200      	movs	r2, #0
 81032b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81032b2:	bf00      	nop
 81032b4:	370c      	adds	r7, #12
 81032b6:	46bd      	mov	sp, r7
 81032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032bc:	4770      	bx	lr

081032be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81032be:	b480      	push	{r7}
 81032c0:	b085      	sub	sp, #20
 81032c2:	af00      	add	r7, sp, #0
 81032c4:	6078      	str	r0, [r7, #4]
 81032c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	685b      	ldr	r3, [r3, #4]
 81032cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81032ce:	683b      	ldr	r3, [r7, #0]
 81032d0:	68fa      	ldr	r2, [r7, #12]
 81032d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81032d4:	68fb      	ldr	r3, [r7, #12]
 81032d6:	689a      	ldr	r2, [r3, #8]
 81032d8:	683b      	ldr	r3, [r7, #0]
 81032da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81032dc:	68fb      	ldr	r3, [r7, #12]
 81032de:	689b      	ldr	r3, [r3, #8]
 81032e0:	683a      	ldr	r2, [r7, #0]
 81032e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81032e4:	68fb      	ldr	r3, [r7, #12]
 81032e6:	683a      	ldr	r2, [r7, #0]
 81032e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81032ea:	683b      	ldr	r3, [r7, #0]
 81032ec:	687a      	ldr	r2, [r7, #4]
 81032ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	681b      	ldr	r3, [r3, #0]
 81032f4:	1c5a      	adds	r2, r3, #1
 81032f6:	687b      	ldr	r3, [r7, #4]
 81032f8:	601a      	str	r2, [r3, #0]
}
 81032fa:	bf00      	nop
 81032fc:	3714      	adds	r7, #20
 81032fe:	46bd      	mov	sp, r7
 8103300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103304:	4770      	bx	lr

08103306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8103306:	b480      	push	{r7}
 8103308:	b085      	sub	sp, #20
 810330a:	af00      	add	r7, sp, #0
 810330c:	6078      	str	r0, [r7, #4]
 810330e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8103310:	683b      	ldr	r3, [r7, #0]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8103316:	68bb      	ldr	r3, [r7, #8]
 8103318:	f1b3 3fff 	cmp.w	r3, #4294967295
 810331c:	d103      	bne.n	8103326 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	691b      	ldr	r3, [r3, #16]
 8103322:	60fb      	str	r3, [r7, #12]
 8103324:	e00c      	b.n	8103340 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	3308      	adds	r3, #8
 810332a:	60fb      	str	r3, [r7, #12]
 810332c:	e002      	b.n	8103334 <vListInsert+0x2e>
 810332e:	68fb      	ldr	r3, [r7, #12]
 8103330:	685b      	ldr	r3, [r3, #4]
 8103332:	60fb      	str	r3, [r7, #12]
 8103334:	68fb      	ldr	r3, [r7, #12]
 8103336:	685b      	ldr	r3, [r3, #4]
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	68ba      	ldr	r2, [r7, #8]
 810333c:	429a      	cmp	r2, r3
 810333e:	d2f6      	bcs.n	810332e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8103340:	68fb      	ldr	r3, [r7, #12]
 8103342:	685a      	ldr	r2, [r3, #4]
 8103344:	683b      	ldr	r3, [r7, #0]
 8103346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8103348:	683b      	ldr	r3, [r7, #0]
 810334a:	685b      	ldr	r3, [r3, #4]
 810334c:	683a      	ldr	r2, [r7, #0]
 810334e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8103350:	683b      	ldr	r3, [r7, #0]
 8103352:	68fa      	ldr	r2, [r7, #12]
 8103354:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8103356:	68fb      	ldr	r3, [r7, #12]
 8103358:	683a      	ldr	r2, [r7, #0]
 810335a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810335c:	683b      	ldr	r3, [r7, #0]
 810335e:	687a      	ldr	r2, [r7, #4]
 8103360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	681b      	ldr	r3, [r3, #0]
 8103366:	1c5a      	adds	r2, r3, #1
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	601a      	str	r2, [r3, #0]
}
 810336c:	bf00      	nop
 810336e:	3714      	adds	r7, #20
 8103370:	46bd      	mov	sp, r7
 8103372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103376:	4770      	bx	lr

08103378 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8103378:	b480      	push	{r7}
 810337a:	b085      	sub	sp, #20
 810337c:	af00      	add	r7, sp, #0
 810337e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	691b      	ldr	r3, [r3, #16]
 8103384:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	685b      	ldr	r3, [r3, #4]
 810338a:	687a      	ldr	r2, [r7, #4]
 810338c:	6892      	ldr	r2, [r2, #8]
 810338e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	689b      	ldr	r3, [r3, #8]
 8103394:	687a      	ldr	r2, [r7, #4]
 8103396:	6852      	ldr	r2, [r2, #4]
 8103398:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810339a:	68fb      	ldr	r3, [r7, #12]
 810339c:	685b      	ldr	r3, [r3, #4]
 810339e:	687a      	ldr	r2, [r7, #4]
 81033a0:	429a      	cmp	r2, r3
 81033a2:	d103      	bne.n	81033ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	689a      	ldr	r2, [r3, #8]
 81033a8:	68fb      	ldr	r3, [r7, #12]
 81033aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	2200      	movs	r2, #0
 81033b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81033b2:	68fb      	ldr	r3, [r7, #12]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	1e5a      	subs	r2, r3, #1
 81033b8:	68fb      	ldr	r3, [r7, #12]
 81033ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81033bc:	68fb      	ldr	r3, [r7, #12]
 81033be:	681b      	ldr	r3, [r3, #0]
}
 81033c0:	4618      	mov	r0, r3
 81033c2:	3714      	adds	r7, #20
 81033c4:	46bd      	mov	sp, r7
 81033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ca:	4770      	bx	lr

081033cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81033cc:	b480      	push	{r7}
 81033ce:	b085      	sub	sp, #20
 81033d0:	af00      	add	r7, sp, #0
 81033d2:	60f8      	str	r0, [r7, #12]
 81033d4:	60b9      	str	r1, [r7, #8]
 81033d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81033d8:	68fb      	ldr	r3, [r7, #12]
 81033da:	3b04      	subs	r3, #4
 81033dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81033de:	68fb      	ldr	r3, [r7, #12]
 81033e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81033e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81033e6:	68fb      	ldr	r3, [r7, #12]
 81033e8:	3b04      	subs	r3, #4
 81033ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81033ec:	68bb      	ldr	r3, [r7, #8]
 81033ee:	f023 0201 	bic.w	r2, r3, #1
 81033f2:	68fb      	ldr	r3, [r7, #12]
 81033f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81033f6:	68fb      	ldr	r3, [r7, #12]
 81033f8:	3b04      	subs	r3, #4
 81033fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81033fc:	4a0c      	ldr	r2, [pc, #48]	; (8103430 <pxPortInitialiseStack+0x64>)
 81033fe:	68fb      	ldr	r3, [r7, #12]
 8103400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8103402:	68fb      	ldr	r3, [r7, #12]
 8103404:	3b14      	subs	r3, #20
 8103406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8103408:	687a      	ldr	r2, [r7, #4]
 810340a:	68fb      	ldr	r3, [r7, #12]
 810340c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810340e:	68fb      	ldr	r3, [r7, #12]
 8103410:	3b04      	subs	r3, #4
 8103412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8103414:	68fb      	ldr	r3, [r7, #12]
 8103416:	f06f 0202 	mvn.w	r2, #2
 810341a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810341c:	68fb      	ldr	r3, [r7, #12]
 810341e:	3b20      	subs	r3, #32
 8103420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8103422:	68fb      	ldr	r3, [r7, #12]
}
 8103424:	4618      	mov	r0, r3
 8103426:	3714      	adds	r7, #20
 8103428:	46bd      	mov	sp, r7
 810342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342e:	4770      	bx	lr
 8103430:	08103435 	.word	0x08103435

08103434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8103434:	b480      	push	{r7}
 8103436:	b085      	sub	sp, #20
 8103438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810343a:	2300      	movs	r3, #0
 810343c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810343e:	4b12      	ldr	r3, [pc, #72]	; (8103488 <prvTaskExitError+0x54>)
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103446:	d00a      	beq.n	810345e <prvTaskExitError+0x2a>
	__asm volatile
 8103448:	f04f 0350 	mov.w	r3, #80	; 0x50
 810344c:	f383 8811 	msr	BASEPRI, r3
 8103450:	f3bf 8f6f 	isb	sy
 8103454:	f3bf 8f4f 	dsb	sy
 8103458:	60fb      	str	r3, [r7, #12]
}
 810345a:	bf00      	nop
 810345c:	e7fe      	b.n	810345c <prvTaskExitError+0x28>
	__asm volatile
 810345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103462:	f383 8811 	msr	BASEPRI, r3
 8103466:	f3bf 8f6f 	isb	sy
 810346a:	f3bf 8f4f 	dsb	sy
 810346e:	60bb      	str	r3, [r7, #8]
}
 8103470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8103472:	bf00      	nop
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	2b00      	cmp	r3, #0
 8103478:	d0fc      	beq.n	8103474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810347a:	bf00      	nop
 810347c:	bf00      	nop
 810347e:	3714      	adds	r7, #20
 8103480:	46bd      	mov	sp, r7
 8103482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103486:	4770      	bx	lr
 8103488:	10000010 	.word	0x10000010
 810348c:	00000000 	.word	0x00000000

08103490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8103490:	4b07      	ldr	r3, [pc, #28]	; (81034b0 <pxCurrentTCBConst2>)
 8103492:	6819      	ldr	r1, [r3, #0]
 8103494:	6808      	ldr	r0, [r1, #0]
 8103496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810349a:	f380 8809 	msr	PSP, r0
 810349e:	f3bf 8f6f 	isb	sy
 81034a2:	f04f 0000 	mov.w	r0, #0
 81034a6:	f380 8811 	msr	BASEPRI, r0
 81034aa:	4770      	bx	lr
 81034ac:	f3af 8000 	nop.w

081034b0 <pxCurrentTCBConst2>:
 81034b0:	1000451c 	.word	0x1000451c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81034b4:	bf00      	nop
 81034b6:	bf00      	nop

081034b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81034b8:	4808      	ldr	r0, [pc, #32]	; (81034dc <prvPortStartFirstTask+0x24>)
 81034ba:	6800      	ldr	r0, [r0, #0]
 81034bc:	6800      	ldr	r0, [r0, #0]
 81034be:	f380 8808 	msr	MSP, r0
 81034c2:	f04f 0000 	mov.w	r0, #0
 81034c6:	f380 8814 	msr	CONTROL, r0
 81034ca:	b662      	cpsie	i
 81034cc:	b661      	cpsie	f
 81034ce:	f3bf 8f4f 	dsb	sy
 81034d2:	f3bf 8f6f 	isb	sy
 81034d6:	df00      	svc	0
 81034d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81034da:	bf00      	nop
 81034dc:	e000ed08 	.word	0xe000ed08

081034e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81034e0:	b580      	push	{r7, lr}
 81034e2:	b086      	sub	sp, #24
 81034e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81034e6:	4b46      	ldr	r3, [pc, #280]	; (8103600 <xPortStartScheduler+0x120>)
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	4a46      	ldr	r2, [pc, #280]	; (8103604 <xPortStartScheduler+0x124>)
 81034ec:	4293      	cmp	r3, r2
 81034ee:	d10a      	bne.n	8103506 <xPortStartScheduler+0x26>
	__asm volatile
 81034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81034f4:	f383 8811 	msr	BASEPRI, r3
 81034f8:	f3bf 8f6f 	isb	sy
 81034fc:	f3bf 8f4f 	dsb	sy
 8103500:	613b      	str	r3, [r7, #16]
}
 8103502:	bf00      	nop
 8103504:	e7fe      	b.n	8103504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8103506:	4b3e      	ldr	r3, [pc, #248]	; (8103600 <xPortStartScheduler+0x120>)
 8103508:	681b      	ldr	r3, [r3, #0]
 810350a:	4a3f      	ldr	r2, [pc, #252]	; (8103608 <xPortStartScheduler+0x128>)
 810350c:	4293      	cmp	r3, r2
 810350e:	d10a      	bne.n	8103526 <xPortStartScheduler+0x46>
	__asm volatile
 8103510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103514:	f383 8811 	msr	BASEPRI, r3
 8103518:	f3bf 8f6f 	isb	sy
 810351c:	f3bf 8f4f 	dsb	sy
 8103520:	60fb      	str	r3, [r7, #12]
}
 8103522:	bf00      	nop
 8103524:	e7fe      	b.n	8103524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8103526:	4b39      	ldr	r3, [pc, #228]	; (810360c <xPortStartScheduler+0x12c>)
 8103528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810352a:	697b      	ldr	r3, [r7, #20]
 810352c:	781b      	ldrb	r3, [r3, #0]
 810352e:	b2db      	uxtb	r3, r3
 8103530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8103532:	697b      	ldr	r3, [r7, #20]
 8103534:	22ff      	movs	r2, #255	; 0xff
 8103536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8103538:	697b      	ldr	r3, [r7, #20]
 810353a:	781b      	ldrb	r3, [r3, #0]
 810353c:	b2db      	uxtb	r3, r3
 810353e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8103540:	78fb      	ldrb	r3, [r7, #3]
 8103542:	b2db      	uxtb	r3, r3
 8103544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8103548:	b2da      	uxtb	r2, r3
 810354a:	4b31      	ldr	r3, [pc, #196]	; (8103610 <xPortStartScheduler+0x130>)
 810354c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810354e:	4b31      	ldr	r3, [pc, #196]	; (8103614 <xPortStartScheduler+0x134>)
 8103550:	2207      	movs	r2, #7
 8103552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8103554:	e009      	b.n	810356a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8103556:	4b2f      	ldr	r3, [pc, #188]	; (8103614 <xPortStartScheduler+0x134>)
 8103558:	681b      	ldr	r3, [r3, #0]
 810355a:	3b01      	subs	r3, #1
 810355c:	4a2d      	ldr	r2, [pc, #180]	; (8103614 <xPortStartScheduler+0x134>)
 810355e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8103560:	78fb      	ldrb	r3, [r7, #3]
 8103562:	b2db      	uxtb	r3, r3
 8103564:	005b      	lsls	r3, r3, #1
 8103566:	b2db      	uxtb	r3, r3
 8103568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810356a:	78fb      	ldrb	r3, [r7, #3]
 810356c:	b2db      	uxtb	r3, r3
 810356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103572:	2b80      	cmp	r3, #128	; 0x80
 8103574:	d0ef      	beq.n	8103556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8103576:	4b27      	ldr	r3, [pc, #156]	; (8103614 <xPortStartScheduler+0x134>)
 8103578:	681b      	ldr	r3, [r3, #0]
 810357a:	f1c3 0307 	rsb	r3, r3, #7
 810357e:	2b04      	cmp	r3, #4
 8103580:	d00a      	beq.n	8103598 <xPortStartScheduler+0xb8>
	__asm volatile
 8103582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103586:	f383 8811 	msr	BASEPRI, r3
 810358a:	f3bf 8f6f 	isb	sy
 810358e:	f3bf 8f4f 	dsb	sy
 8103592:	60bb      	str	r3, [r7, #8]
}
 8103594:	bf00      	nop
 8103596:	e7fe      	b.n	8103596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8103598:	4b1e      	ldr	r3, [pc, #120]	; (8103614 <xPortStartScheduler+0x134>)
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	021b      	lsls	r3, r3, #8
 810359e:	4a1d      	ldr	r2, [pc, #116]	; (8103614 <xPortStartScheduler+0x134>)
 81035a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 81035a2:	4b1c      	ldr	r3, [pc, #112]	; (8103614 <xPortStartScheduler+0x134>)
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81035aa:	4a1a      	ldr	r2, [pc, #104]	; (8103614 <xPortStartScheduler+0x134>)
 81035ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	b2da      	uxtb	r2, r3
 81035b2:	697b      	ldr	r3, [r7, #20]
 81035b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81035b6:	4b18      	ldr	r3, [pc, #96]	; (8103618 <xPortStartScheduler+0x138>)
 81035b8:	681b      	ldr	r3, [r3, #0]
 81035ba:	4a17      	ldr	r2, [pc, #92]	; (8103618 <xPortStartScheduler+0x138>)
 81035bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81035c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81035c2:	4b15      	ldr	r3, [pc, #84]	; (8103618 <xPortStartScheduler+0x138>)
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	4a14      	ldr	r2, [pc, #80]	; (8103618 <xPortStartScheduler+0x138>)
 81035c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 81035cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81035ce:	f000 f8dd 	bl	810378c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81035d2:	4b12      	ldr	r3, [pc, #72]	; (810361c <xPortStartScheduler+0x13c>)
 81035d4:	2200      	movs	r2, #0
 81035d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81035d8:	f000 f8fc 	bl	81037d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81035dc:	4b10      	ldr	r3, [pc, #64]	; (8103620 <xPortStartScheduler+0x140>)
 81035de:	681b      	ldr	r3, [r3, #0]
 81035e0:	4a0f      	ldr	r2, [pc, #60]	; (8103620 <xPortStartScheduler+0x140>)
 81035e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 81035e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81035e8:	f7ff ff66 	bl	81034b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81035ec:	f001 f9fa 	bl	81049e4 <vTaskSwitchContext>
	prvTaskExitError();
 81035f0:	f7ff ff20 	bl	8103434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81035f4:	2300      	movs	r3, #0
}
 81035f6:	4618      	mov	r0, r3
 81035f8:	3718      	adds	r7, #24
 81035fa:	46bd      	mov	sp, r7
 81035fc:	bd80      	pop	{r7, pc}
 81035fe:	bf00      	nop
 8103600:	e000ed00 	.word	0xe000ed00
 8103604:	410fc271 	.word	0x410fc271
 8103608:	410fc270 	.word	0x410fc270
 810360c:	e000e400 	.word	0xe000e400
 8103610:	100044d4 	.word	0x100044d4
 8103614:	100044d8 	.word	0x100044d8
 8103618:	e000ed20 	.word	0xe000ed20
 810361c:	10000010 	.word	0x10000010
 8103620:	e000ef34 	.word	0xe000ef34

08103624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8103624:	b480      	push	{r7}
 8103626:	b083      	sub	sp, #12
 8103628:	af00      	add	r7, sp, #0
	__asm volatile
 810362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810362e:	f383 8811 	msr	BASEPRI, r3
 8103632:	f3bf 8f6f 	isb	sy
 8103636:	f3bf 8f4f 	dsb	sy
 810363a:	607b      	str	r3, [r7, #4]
}
 810363c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810363e:	4b0f      	ldr	r3, [pc, #60]	; (810367c <vPortEnterCritical+0x58>)
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	3301      	adds	r3, #1
 8103644:	4a0d      	ldr	r2, [pc, #52]	; (810367c <vPortEnterCritical+0x58>)
 8103646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8103648:	4b0c      	ldr	r3, [pc, #48]	; (810367c <vPortEnterCritical+0x58>)
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	2b01      	cmp	r3, #1
 810364e:	d10f      	bne.n	8103670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8103650:	4b0b      	ldr	r3, [pc, #44]	; (8103680 <vPortEnterCritical+0x5c>)
 8103652:	681b      	ldr	r3, [r3, #0]
 8103654:	b2db      	uxtb	r3, r3
 8103656:	2b00      	cmp	r3, #0
 8103658:	d00a      	beq.n	8103670 <vPortEnterCritical+0x4c>
	__asm volatile
 810365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810365e:	f383 8811 	msr	BASEPRI, r3
 8103662:	f3bf 8f6f 	isb	sy
 8103666:	f3bf 8f4f 	dsb	sy
 810366a:	603b      	str	r3, [r7, #0]
}
 810366c:	bf00      	nop
 810366e:	e7fe      	b.n	810366e <vPortEnterCritical+0x4a>
	}
}
 8103670:	bf00      	nop
 8103672:	370c      	adds	r7, #12
 8103674:	46bd      	mov	sp, r7
 8103676:	f85d 7b04 	ldr.w	r7, [sp], #4
 810367a:	4770      	bx	lr
 810367c:	10000010 	.word	0x10000010
 8103680:	e000ed04 	.word	0xe000ed04

08103684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8103684:	b480      	push	{r7}
 8103686:	b083      	sub	sp, #12
 8103688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810368a:	4b12      	ldr	r3, [pc, #72]	; (81036d4 <vPortExitCritical+0x50>)
 810368c:	681b      	ldr	r3, [r3, #0]
 810368e:	2b00      	cmp	r3, #0
 8103690:	d10a      	bne.n	81036a8 <vPortExitCritical+0x24>
	__asm volatile
 8103692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103696:	f383 8811 	msr	BASEPRI, r3
 810369a:	f3bf 8f6f 	isb	sy
 810369e:	f3bf 8f4f 	dsb	sy
 81036a2:	607b      	str	r3, [r7, #4]
}
 81036a4:	bf00      	nop
 81036a6:	e7fe      	b.n	81036a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81036a8:	4b0a      	ldr	r3, [pc, #40]	; (81036d4 <vPortExitCritical+0x50>)
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	3b01      	subs	r3, #1
 81036ae:	4a09      	ldr	r2, [pc, #36]	; (81036d4 <vPortExitCritical+0x50>)
 81036b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81036b2:	4b08      	ldr	r3, [pc, #32]	; (81036d4 <vPortExitCritical+0x50>)
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	2b00      	cmp	r3, #0
 81036b8:	d105      	bne.n	81036c6 <vPortExitCritical+0x42>
 81036ba:	2300      	movs	r3, #0
 81036bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81036be:	683b      	ldr	r3, [r7, #0]
 81036c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81036c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81036c6:	bf00      	nop
 81036c8:	370c      	adds	r7, #12
 81036ca:	46bd      	mov	sp, r7
 81036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036d0:	4770      	bx	lr
 81036d2:	bf00      	nop
 81036d4:	10000010 	.word	0x10000010
	...

081036e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81036e0:	f3ef 8009 	mrs	r0, PSP
 81036e4:	f3bf 8f6f 	isb	sy
 81036e8:	4b15      	ldr	r3, [pc, #84]	; (8103740 <pxCurrentTCBConst>)
 81036ea:	681a      	ldr	r2, [r3, #0]
 81036ec:	f01e 0f10 	tst.w	lr, #16
 81036f0:	bf08      	it	eq
 81036f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81036f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81036fa:	6010      	str	r0, [r2, #0]
 81036fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8103700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8103704:	f380 8811 	msr	BASEPRI, r0
 8103708:	f3bf 8f4f 	dsb	sy
 810370c:	f3bf 8f6f 	isb	sy
 8103710:	f001 f968 	bl	81049e4 <vTaskSwitchContext>
 8103714:	f04f 0000 	mov.w	r0, #0
 8103718:	f380 8811 	msr	BASEPRI, r0
 810371c:	bc09      	pop	{r0, r3}
 810371e:	6819      	ldr	r1, [r3, #0]
 8103720:	6808      	ldr	r0, [r1, #0]
 8103722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8103726:	f01e 0f10 	tst.w	lr, #16
 810372a:	bf08      	it	eq
 810372c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8103730:	f380 8809 	msr	PSP, r0
 8103734:	f3bf 8f6f 	isb	sy
 8103738:	4770      	bx	lr
 810373a:	bf00      	nop
 810373c:	f3af 8000 	nop.w

08103740 <pxCurrentTCBConst>:
 8103740:	1000451c 	.word	0x1000451c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8103744:	bf00      	nop
 8103746:	bf00      	nop

08103748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8103748:	b580      	push	{r7, lr}
 810374a:	b082      	sub	sp, #8
 810374c:	af00      	add	r7, sp, #0
	__asm volatile
 810374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103752:	f383 8811 	msr	BASEPRI, r3
 8103756:	f3bf 8f6f 	isb	sy
 810375a:	f3bf 8f4f 	dsb	sy
 810375e:	607b      	str	r3, [r7, #4]
}
 8103760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8103762:	f001 f885 	bl	8104870 <xTaskIncrementTick>
 8103766:	4603      	mov	r3, r0
 8103768:	2b00      	cmp	r3, #0
 810376a:	d003      	beq.n	8103774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810376c:	4b06      	ldr	r3, [pc, #24]	; (8103788 <xPortSysTickHandler+0x40>)
 810376e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103772:	601a      	str	r2, [r3, #0]
 8103774:	2300      	movs	r3, #0
 8103776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8103778:	683b      	ldr	r3, [r7, #0]
 810377a:	f383 8811 	msr	BASEPRI, r3
}
 810377e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8103780:	bf00      	nop
 8103782:	3708      	adds	r7, #8
 8103784:	46bd      	mov	sp, r7
 8103786:	bd80      	pop	{r7, pc}
 8103788:	e000ed04 	.word	0xe000ed04

0810378c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810378c:	b480      	push	{r7}
 810378e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8103790:	4b0b      	ldr	r3, [pc, #44]	; (81037c0 <vPortSetupTimerInterrupt+0x34>)
 8103792:	2200      	movs	r2, #0
 8103794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8103796:	4b0b      	ldr	r3, [pc, #44]	; (81037c4 <vPortSetupTimerInterrupt+0x38>)
 8103798:	2200      	movs	r2, #0
 810379a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810379c:	4b0a      	ldr	r3, [pc, #40]	; (81037c8 <vPortSetupTimerInterrupt+0x3c>)
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	4a0a      	ldr	r2, [pc, #40]	; (81037cc <vPortSetupTimerInterrupt+0x40>)
 81037a2:	fba2 2303 	umull	r2, r3, r2, r3
 81037a6:	099b      	lsrs	r3, r3, #6
 81037a8:	4a09      	ldr	r2, [pc, #36]	; (81037d0 <vPortSetupTimerInterrupt+0x44>)
 81037aa:	3b01      	subs	r3, #1
 81037ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81037ae:	4b04      	ldr	r3, [pc, #16]	; (81037c0 <vPortSetupTimerInterrupt+0x34>)
 81037b0:	2207      	movs	r2, #7
 81037b2:	601a      	str	r2, [r3, #0]
}
 81037b4:	bf00      	nop
 81037b6:	46bd      	mov	sp, r7
 81037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037bc:	4770      	bx	lr
 81037be:	bf00      	nop
 81037c0:	e000e010 	.word	0xe000e010
 81037c4:	e000e018 	.word	0xe000e018
 81037c8:	10000004 	.word	0x10000004
 81037cc:	10624dd3 	.word	0x10624dd3
 81037d0:	e000e014 	.word	0xe000e014

081037d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81037d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81037e4 <vPortEnableVFP+0x10>
 81037d8:	6801      	ldr	r1, [r0, #0]
 81037da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81037de:	6001      	str	r1, [r0, #0]
 81037e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81037e2:	bf00      	nop
 81037e4:	e000ed88 	.word	0xe000ed88

081037e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81037e8:	b480      	push	{r7}
 81037ea:	b085      	sub	sp, #20
 81037ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81037ee:	f3ef 8305 	mrs	r3, IPSR
 81037f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81037f4:	68fb      	ldr	r3, [r7, #12]
 81037f6:	2b0f      	cmp	r3, #15
 81037f8:	d914      	bls.n	8103824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81037fa:	4a17      	ldr	r2, [pc, #92]	; (8103858 <vPortValidateInterruptPriority+0x70>)
 81037fc:	68fb      	ldr	r3, [r7, #12]
 81037fe:	4413      	add	r3, r2
 8103800:	781b      	ldrb	r3, [r3, #0]
 8103802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8103804:	4b15      	ldr	r3, [pc, #84]	; (810385c <vPortValidateInterruptPriority+0x74>)
 8103806:	781b      	ldrb	r3, [r3, #0]
 8103808:	7afa      	ldrb	r2, [r7, #11]
 810380a:	429a      	cmp	r2, r3
 810380c:	d20a      	bcs.n	8103824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 810380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103812:	f383 8811 	msr	BASEPRI, r3
 8103816:	f3bf 8f6f 	isb	sy
 810381a:	f3bf 8f4f 	dsb	sy
 810381e:	607b      	str	r3, [r7, #4]
}
 8103820:	bf00      	nop
 8103822:	e7fe      	b.n	8103822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8103824:	4b0e      	ldr	r3, [pc, #56]	; (8103860 <vPortValidateInterruptPriority+0x78>)
 8103826:	681b      	ldr	r3, [r3, #0]
 8103828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810382c:	4b0d      	ldr	r3, [pc, #52]	; (8103864 <vPortValidateInterruptPriority+0x7c>)
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	429a      	cmp	r2, r3
 8103832:	d90a      	bls.n	810384a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8103834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103838:	f383 8811 	msr	BASEPRI, r3
 810383c:	f3bf 8f6f 	isb	sy
 8103840:	f3bf 8f4f 	dsb	sy
 8103844:	603b      	str	r3, [r7, #0]
}
 8103846:	bf00      	nop
 8103848:	e7fe      	b.n	8103848 <vPortValidateInterruptPriority+0x60>
	}
 810384a:	bf00      	nop
 810384c:	3714      	adds	r7, #20
 810384e:	46bd      	mov	sp, r7
 8103850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103854:	4770      	bx	lr
 8103856:	bf00      	nop
 8103858:	e000e3f0 	.word	0xe000e3f0
 810385c:	100044d4 	.word	0x100044d4
 8103860:	e000ed0c 	.word	0xe000ed0c
 8103864:	100044d8 	.word	0x100044d8

08103868 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8103868:	b580      	push	{r7, lr}
 810386a:	b084      	sub	sp, #16
 810386c:	af00      	add	r7, sp, #0
 810386e:	6078      	str	r0, [r7, #4]
 8103870:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8103876:	68fb      	ldr	r3, [r7, #12]
 8103878:	2b00      	cmp	r3, #0
 810387a:	d10a      	bne.n	8103892 <xQueueGenericReset+0x2a>
	__asm volatile
 810387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103880:	f383 8811 	msr	BASEPRI, r3
 8103884:	f3bf 8f6f 	isb	sy
 8103888:	f3bf 8f4f 	dsb	sy
 810388c:	60bb      	str	r3, [r7, #8]
}
 810388e:	bf00      	nop
 8103890:	e7fe      	b.n	8103890 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8103892:	f7ff fec7 	bl	8103624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8103896:	68fb      	ldr	r3, [r7, #12]
 8103898:	681a      	ldr	r2, [r3, #0]
 810389a:	68fb      	ldr	r3, [r7, #12]
 810389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810389e:	68f9      	ldr	r1, [r7, #12]
 81038a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81038a2:	fb01 f303 	mul.w	r3, r1, r3
 81038a6:	441a      	add	r2, r3
 81038a8:	68fb      	ldr	r3, [r7, #12]
 81038aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81038ac:	68fb      	ldr	r3, [r7, #12]
 81038ae:	2200      	movs	r2, #0
 81038b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81038b2:	68fb      	ldr	r3, [r7, #12]
 81038b4:	681a      	ldr	r2, [r3, #0]
 81038b6:	68fb      	ldr	r3, [r7, #12]
 81038b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81038ba:	68fb      	ldr	r3, [r7, #12]
 81038bc:	681a      	ldr	r2, [r3, #0]
 81038be:	68fb      	ldr	r3, [r7, #12]
 81038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81038c2:	3b01      	subs	r3, #1
 81038c4:	68f9      	ldr	r1, [r7, #12]
 81038c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81038c8:	fb01 f303 	mul.w	r3, r1, r3
 81038cc:	441a      	add	r2, r3
 81038ce:	68fb      	ldr	r3, [r7, #12]
 81038d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81038d2:	68fb      	ldr	r3, [r7, #12]
 81038d4:	22ff      	movs	r2, #255	; 0xff
 81038d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81038da:	68fb      	ldr	r3, [r7, #12]
 81038dc:	22ff      	movs	r2, #255	; 0xff
 81038de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 81038e2:	683b      	ldr	r3, [r7, #0]
 81038e4:	2b00      	cmp	r3, #0
 81038e6:	d114      	bne.n	8103912 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81038e8:	68fb      	ldr	r3, [r7, #12]
 81038ea:	691b      	ldr	r3, [r3, #16]
 81038ec:	2b00      	cmp	r3, #0
 81038ee:	d01a      	beq.n	8103926 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81038f0:	68fb      	ldr	r3, [r7, #12]
 81038f2:	3310      	adds	r3, #16
 81038f4:	4618      	mov	r0, r3
 81038f6:	f001 f929 	bl	8104b4c <xTaskRemoveFromEventList>
 81038fa:	4603      	mov	r3, r0
 81038fc:	2b00      	cmp	r3, #0
 81038fe:	d012      	beq.n	8103926 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8103900:	4b0c      	ldr	r3, [pc, #48]	; (8103934 <xQueueGenericReset+0xcc>)
 8103902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103906:	601a      	str	r2, [r3, #0]
 8103908:	f3bf 8f4f 	dsb	sy
 810390c:	f3bf 8f6f 	isb	sy
 8103910:	e009      	b.n	8103926 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8103912:	68fb      	ldr	r3, [r7, #12]
 8103914:	3310      	adds	r3, #16
 8103916:	4618      	mov	r0, r3
 8103918:	f7ff fca4 	bl	8103264 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810391c:	68fb      	ldr	r3, [r7, #12]
 810391e:	3324      	adds	r3, #36	; 0x24
 8103920:	4618      	mov	r0, r3
 8103922:	f7ff fc9f 	bl	8103264 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8103926:	f7ff fead 	bl	8103684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810392a:	2301      	movs	r3, #1
}
 810392c:	4618      	mov	r0, r3
 810392e:	3710      	adds	r7, #16
 8103930:	46bd      	mov	sp, r7
 8103932:	bd80      	pop	{r7, pc}
 8103934:	e000ed04 	.word	0xe000ed04

08103938 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8103938:	b580      	push	{r7, lr}
 810393a:	b08e      	sub	sp, #56	; 0x38
 810393c:	af02      	add	r7, sp, #8
 810393e:	60f8      	str	r0, [r7, #12]
 8103940:	60b9      	str	r1, [r7, #8]
 8103942:	607a      	str	r2, [r7, #4]
 8103944:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8103946:	68fb      	ldr	r3, [r7, #12]
 8103948:	2b00      	cmp	r3, #0
 810394a:	d10a      	bne.n	8103962 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103950:	f383 8811 	msr	BASEPRI, r3
 8103954:	f3bf 8f6f 	isb	sy
 8103958:	f3bf 8f4f 	dsb	sy
 810395c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810395e:	bf00      	nop
 8103960:	e7fe      	b.n	8103960 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8103962:	683b      	ldr	r3, [r7, #0]
 8103964:	2b00      	cmp	r3, #0
 8103966:	d10a      	bne.n	810397e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8103968:	f04f 0350 	mov.w	r3, #80	; 0x50
 810396c:	f383 8811 	msr	BASEPRI, r3
 8103970:	f3bf 8f6f 	isb	sy
 8103974:	f3bf 8f4f 	dsb	sy
 8103978:	627b      	str	r3, [r7, #36]	; 0x24
}
 810397a:	bf00      	nop
 810397c:	e7fe      	b.n	810397c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	2b00      	cmp	r3, #0
 8103982:	d002      	beq.n	810398a <xQueueGenericCreateStatic+0x52>
 8103984:	68bb      	ldr	r3, [r7, #8]
 8103986:	2b00      	cmp	r3, #0
 8103988:	d001      	beq.n	810398e <xQueueGenericCreateStatic+0x56>
 810398a:	2301      	movs	r3, #1
 810398c:	e000      	b.n	8103990 <xQueueGenericCreateStatic+0x58>
 810398e:	2300      	movs	r3, #0
 8103990:	2b00      	cmp	r3, #0
 8103992:	d10a      	bne.n	81039aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8103994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103998:	f383 8811 	msr	BASEPRI, r3
 810399c:	f3bf 8f6f 	isb	sy
 81039a0:	f3bf 8f4f 	dsb	sy
 81039a4:	623b      	str	r3, [r7, #32]
}
 81039a6:	bf00      	nop
 81039a8:	e7fe      	b.n	81039a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	2b00      	cmp	r3, #0
 81039ae:	d102      	bne.n	81039b6 <xQueueGenericCreateStatic+0x7e>
 81039b0:	68bb      	ldr	r3, [r7, #8]
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	d101      	bne.n	81039ba <xQueueGenericCreateStatic+0x82>
 81039b6:	2301      	movs	r3, #1
 81039b8:	e000      	b.n	81039bc <xQueueGenericCreateStatic+0x84>
 81039ba:	2300      	movs	r3, #0
 81039bc:	2b00      	cmp	r3, #0
 81039be:	d10a      	bne.n	81039d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 81039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81039c4:	f383 8811 	msr	BASEPRI, r3
 81039c8:	f3bf 8f6f 	isb	sy
 81039cc:	f3bf 8f4f 	dsb	sy
 81039d0:	61fb      	str	r3, [r7, #28]
}
 81039d2:	bf00      	nop
 81039d4:	e7fe      	b.n	81039d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81039d6:	2350      	movs	r3, #80	; 0x50
 81039d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81039da:	697b      	ldr	r3, [r7, #20]
 81039dc:	2b50      	cmp	r3, #80	; 0x50
 81039de:	d00a      	beq.n	81039f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 81039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81039e4:	f383 8811 	msr	BASEPRI, r3
 81039e8:	f3bf 8f6f 	isb	sy
 81039ec:	f3bf 8f4f 	dsb	sy
 81039f0:	61bb      	str	r3, [r7, #24]
}
 81039f2:	bf00      	nop
 81039f4:	e7fe      	b.n	81039f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81039f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81039f8:	683b      	ldr	r3, [r7, #0]
 81039fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 81039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81039fe:	2b00      	cmp	r3, #0
 8103a00:	d00d      	beq.n	8103a1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8103a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a04:	2201      	movs	r2, #1
 8103a06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8103a0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8103a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a10:	9300      	str	r3, [sp, #0]
 8103a12:	4613      	mov	r3, r2
 8103a14:	687a      	ldr	r2, [r7, #4]
 8103a16:	68b9      	ldr	r1, [r7, #8]
 8103a18:	68f8      	ldr	r0, [r7, #12]
 8103a1a:	f000 f805 	bl	8103a28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8103a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8103a20:	4618      	mov	r0, r3
 8103a22:	3730      	adds	r7, #48	; 0x30
 8103a24:	46bd      	mov	sp, r7
 8103a26:	bd80      	pop	{r7, pc}

08103a28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8103a28:	b580      	push	{r7, lr}
 8103a2a:	b084      	sub	sp, #16
 8103a2c:	af00      	add	r7, sp, #0
 8103a2e:	60f8      	str	r0, [r7, #12]
 8103a30:	60b9      	str	r1, [r7, #8]
 8103a32:	607a      	str	r2, [r7, #4]
 8103a34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8103a36:	68bb      	ldr	r3, [r7, #8]
 8103a38:	2b00      	cmp	r3, #0
 8103a3a:	d103      	bne.n	8103a44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8103a3c:	69bb      	ldr	r3, [r7, #24]
 8103a3e:	69ba      	ldr	r2, [r7, #24]
 8103a40:	601a      	str	r2, [r3, #0]
 8103a42:	e002      	b.n	8103a4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8103a44:	69bb      	ldr	r3, [r7, #24]
 8103a46:	687a      	ldr	r2, [r7, #4]
 8103a48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8103a4a:	69bb      	ldr	r3, [r7, #24]
 8103a4c:	68fa      	ldr	r2, [r7, #12]
 8103a4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8103a50:	69bb      	ldr	r3, [r7, #24]
 8103a52:	68ba      	ldr	r2, [r7, #8]
 8103a54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8103a56:	2101      	movs	r1, #1
 8103a58:	69b8      	ldr	r0, [r7, #24]
 8103a5a:	f7ff ff05 	bl	8103868 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8103a5e:	69bb      	ldr	r3, [r7, #24]
 8103a60:	78fa      	ldrb	r2, [r7, #3]
 8103a62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8103a66:	bf00      	nop
 8103a68:	3710      	adds	r7, #16
 8103a6a:	46bd      	mov	sp, r7
 8103a6c:	bd80      	pop	{r7, pc}
	...

08103a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8103a70:	b580      	push	{r7, lr}
 8103a72:	b08e      	sub	sp, #56	; 0x38
 8103a74:	af00      	add	r7, sp, #0
 8103a76:	60f8      	str	r0, [r7, #12]
 8103a78:	60b9      	str	r1, [r7, #8]
 8103a7a:	607a      	str	r2, [r7, #4]
 8103a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8103a7e:	2300      	movs	r3, #0
 8103a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8103a82:	68fb      	ldr	r3, [r7, #12]
 8103a84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8103a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103a88:	2b00      	cmp	r3, #0
 8103a8a:	d10a      	bne.n	8103aa2 <xQueueGenericSend+0x32>
	__asm volatile
 8103a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103a90:	f383 8811 	msr	BASEPRI, r3
 8103a94:	f3bf 8f6f 	isb	sy
 8103a98:	f3bf 8f4f 	dsb	sy
 8103a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8103a9e:	bf00      	nop
 8103aa0:	e7fe      	b.n	8103aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8103aa2:	68bb      	ldr	r3, [r7, #8]
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	d103      	bne.n	8103ab0 <xQueueGenericSend+0x40>
 8103aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103aac:	2b00      	cmp	r3, #0
 8103aae:	d101      	bne.n	8103ab4 <xQueueGenericSend+0x44>
 8103ab0:	2301      	movs	r3, #1
 8103ab2:	e000      	b.n	8103ab6 <xQueueGenericSend+0x46>
 8103ab4:	2300      	movs	r3, #0
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d10a      	bne.n	8103ad0 <xQueueGenericSend+0x60>
	__asm volatile
 8103aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103abe:	f383 8811 	msr	BASEPRI, r3
 8103ac2:	f3bf 8f6f 	isb	sy
 8103ac6:	f3bf 8f4f 	dsb	sy
 8103aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8103acc:	bf00      	nop
 8103ace:	e7fe      	b.n	8103ace <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8103ad0:	683b      	ldr	r3, [r7, #0]
 8103ad2:	2b02      	cmp	r3, #2
 8103ad4:	d103      	bne.n	8103ade <xQueueGenericSend+0x6e>
 8103ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103ada:	2b01      	cmp	r3, #1
 8103adc:	d101      	bne.n	8103ae2 <xQueueGenericSend+0x72>
 8103ade:	2301      	movs	r3, #1
 8103ae0:	e000      	b.n	8103ae4 <xQueueGenericSend+0x74>
 8103ae2:	2300      	movs	r3, #0
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d10a      	bne.n	8103afe <xQueueGenericSend+0x8e>
	__asm volatile
 8103ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103aec:	f383 8811 	msr	BASEPRI, r3
 8103af0:	f3bf 8f6f 	isb	sy
 8103af4:	f3bf 8f4f 	dsb	sy
 8103af8:	623b      	str	r3, [r7, #32]
}
 8103afa:	bf00      	nop
 8103afc:	e7fe      	b.n	8103afc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8103afe:	f001 f9e7 	bl	8104ed0 <xTaskGetSchedulerState>
 8103b02:	4603      	mov	r3, r0
 8103b04:	2b00      	cmp	r3, #0
 8103b06:	d102      	bne.n	8103b0e <xQueueGenericSend+0x9e>
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	2b00      	cmp	r3, #0
 8103b0c:	d101      	bne.n	8103b12 <xQueueGenericSend+0xa2>
 8103b0e:	2301      	movs	r3, #1
 8103b10:	e000      	b.n	8103b14 <xQueueGenericSend+0xa4>
 8103b12:	2300      	movs	r3, #0
 8103b14:	2b00      	cmp	r3, #0
 8103b16:	d10a      	bne.n	8103b2e <xQueueGenericSend+0xbe>
	__asm volatile
 8103b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b1c:	f383 8811 	msr	BASEPRI, r3
 8103b20:	f3bf 8f6f 	isb	sy
 8103b24:	f3bf 8f4f 	dsb	sy
 8103b28:	61fb      	str	r3, [r7, #28]
}
 8103b2a:	bf00      	nop
 8103b2c:	e7fe      	b.n	8103b2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8103b2e:	f7ff fd79 	bl	8103624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8103b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103b3a:	429a      	cmp	r2, r3
 8103b3c:	d302      	bcc.n	8103b44 <xQueueGenericSend+0xd4>
 8103b3e:	683b      	ldr	r3, [r7, #0]
 8103b40:	2b02      	cmp	r3, #2
 8103b42:	d129      	bne.n	8103b98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8103b44:	683a      	ldr	r2, [r7, #0]
 8103b46:	68b9      	ldr	r1, [r7, #8]
 8103b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103b4a:	f000 fa0b 	bl	8103f64 <prvCopyDataToQueue>
 8103b4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b54:	2b00      	cmp	r3, #0
 8103b56:	d010      	beq.n	8103b7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8103b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103b5a:	3324      	adds	r3, #36	; 0x24
 8103b5c:	4618      	mov	r0, r3
 8103b5e:	f000 fff5 	bl	8104b4c <xTaskRemoveFromEventList>
 8103b62:	4603      	mov	r3, r0
 8103b64:	2b00      	cmp	r3, #0
 8103b66:	d013      	beq.n	8103b90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8103b68:	4b3f      	ldr	r3, [pc, #252]	; (8103c68 <xQueueGenericSend+0x1f8>)
 8103b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103b6e:	601a      	str	r2, [r3, #0]
 8103b70:	f3bf 8f4f 	dsb	sy
 8103b74:	f3bf 8f6f 	isb	sy
 8103b78:	e00a      	b.n	8103b90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8103b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b7c:	2b00      	cmp	r3, #0
 8103b7e:	d007      	beq.n	8103b90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8103b80:	4b39      	ldr	r3, [pc, #228]	; (8103c68 <xQueueGenericSend+0x1f8>)
 8103b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103b86:	601a      	str	r2, [r3, #0]
 8103b88:	f3bf 8f4f 	dsb	sy
 8103b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8103b90:	f7ff fd78 	bl	8103684 <vPortExitCritical>
				return pdPASS;
 8103b94:	2301      	movs	r3, #1
 8103b96:	e063      	b.n	8103c60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	2b00      	cmp	r3, #0
 8103b9c:	d103      	bne.n	8103ba6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8103b9e:	f7ff fd71 	bl	8103684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8103ba2:	2300      	movs	r3, #0
 8103ba4:	e05c      	b.n	8103c60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8103ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103ba8:	2b00      	cmp	r3, #0
 8103baa:	d106      	bne.n	8103bba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8103bac:	f107 0314 	add.w	r3, r7, #20
 8103bb0:	4618      	mov	r0, r3
 8103bb2:	f001 f82f 	bl	8104c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8103bb6:	2301      	movs	r3, #1
 8103bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8103bba:	f7ff fd63 	bl	8103684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8103bbe:	f000 fd9b 	bl	81046f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8103bc2:	f7ff fd2f 	bl	8103624 <vPortEnterCritical>
 8103bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103bcc:	b25b      	sxtb	r3, r3
 8103bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103bd2:	d103      	bne.n	8103bdc <xQueueGenericSend+0x16c>
 8103bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103bd6:	2200      	movs	r2, #0
 8103bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103be2:	b25b      	sxtb	r3, r3
 8103be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103be8:	d103      	bne.n	8103bf2 <xQueueGenericSend+0x182>
 8103bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103bec:	2200      	movs	r2, #0
 8103bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103bf2:	f7ff fd47 	bl	8103684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8103bf6:	1d3a      	adds	r2, r7, #4
 8103bf8:	f107 0314 	add.w	r3, r7, #20
 8103bfc:	4611      	mov	r1, r2
 8103bfe:	4618      	mov	r0, r3
 8103c00:	f001 f81e 	bl	8104c40 <xTaskCheckForTimeOut>
 8103c04:	4603      	mov	r3, r0
 8103c06:	2b00      	cmp	r3, #0
 8103c08:	d124      	bne.n	8103c54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8103c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103c0c:	f000 faa2 	bl	8104154 <prvIsQueueFull>
 8103c10:	4603      	mov	r3, r0
 8103c12:	2b00      	cmp	r3, #0
 8103c14:	d018      	beq.n	8103c48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8103c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103c18:	3310      	adds	r3, #16
 8103c1a:	687a      	ldr	r2, [r7, #4]
 8103c1c:	4611      	mov	r1, r2
 8103c1e:	4618      	mov	r0, r3
 8103c20:	f000 ff44 	bl	8104aac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8103c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103c26:	f000 fa2d 	bl	8104084 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8103c2a:	f000 fd73 	bl	8104714 <xTaskResumeAll>
 8103c2e:	4603      	mov	r3, r0
 8103c30:	2b00      	cmp	r3, #0
 8103c32:	f47f af7c 	bne.w	8103b2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8103c36:	4b0c      	ldr	r3, [pc, #48]	; (8103c68 <xQueueGenericSend+0x1f8>)
 8103c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103c3c:	601a      	str	r2, [r3, #0]
 8103c3e:	f3bf 8f4f 	dsb	sy
 8103c42:	f3bf 8f6f 	isb	sy
 8103c46:	e772      	b.n	8103b2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8103c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103c4a:	f000 fa1b 	bl	8104084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8103c4e:	f000 fd61 	bl	8104714 <xTaskResumeAll>
 8103c52:	e76c      	b.n	8103b2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8103c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103c56:	f000 fa15 	bl	8104084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8103c5a:	f000 fd5b 	bl	8104714 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8103c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8103c60:	4618      	mov	r0, r3
 8103c62:	3738      	adds	r7, #56	; 0x38
 8103c64:	46bd      	mov	sp, r7
 8103c66:	bd80      	pop	{r7, pc}
 8103c68:	e000ed04 	.word	0xe000ed04

08103c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8103c6c:	b580      	push	{r7, lr}
 8103c6e:	b090      	sub	sp, #64	; 0x40
 8103c70:	af00      	add	r7, sp, #0
 8103c72:	60f8      	str	r0, [r7, #12]
 8103c74:	60b9      	str	r1, [r7, #8]
 8103c76:	607a      	str	r2, [r7, #4]
 8103c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8103c7a:	68fb      	ldr	r3, [r7, #12]
 8103c7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8103c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103c80:	2b00      	cmp	r3, #0
 8103c82:	d10a      	bne.n	8103c9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8103c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103c88:	f383 8811 	msr	BASEPRI, r3
 8103c8c:	f3bf 8f6f 	isb	sy
 8103c90:	f3bf 8f4f 	dsb	sy
 8103c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8103c96:	bf00      	nop
 8103c98:	e7fe      	b.n	8103c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8103c9a:	68bb      	ldr	r3, [r7, #8]
 8103c9c:	2b00      	cmp	r3, #0
 8103c9e:	d103      	bne.n	8103ca8 <xQueueGenericSendFromISR+0x3c>
 8103ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ca4:	2b00      	cmp	r3, #0
 8103ca6:	d101      	bne.n	8103cac <xQueueGenericSendFromISR+0x40>
 8103ca8:	2301      	movs	r3, #1
 8103caa:	e000      	b.n	8103cae <xQueueGenericSendFromISR+0x42>
 8103cac:	2300      	movs	r3, #0
 8103cae:	2b00      	cmp	r3, #0
 8103cb0:	d10a      	bne.n	8103cc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8103cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103cb6:	f383 8811 	msr	BASEPRI, r3
 8103cba:	f3bf 8f6f 	isb	sy
 8103cbe:	f3bf 8f4f 	dsb	sy
 8103cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8103cc4:	bf00      	nop
 8103cc6:	e7fe      	b.n	8103cc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8103cc8:	683b      	ldr	r3, [r7, #0]
 8103cca:	2b02      	cmp	r3, #2
 8103ccc:	d103      	bne.n	8103cd6 <xQueueGenericSendFromISR+0x6a>
 8103cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cd2:	2b01      	cmp	r3, #1
 8103cd4:	d101      	bne.n	8103cda <xQueueGenericSendFromISR+0x6e>
 8103cd6:	2301      	movs	r3, #1
 8103cd8:	e000      	b.n	8103cdc <xQueueGenericSendFromISR+0x70>
 8103cda:	2300      	movs	r3, #0
 8103cdc:	2b00      	cmp	r3, #0
 8103cde:	d10a      	bne.n	8103cf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8103ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103ce4:	f383 8811 	msr	BASEPRI, r3
 8103ce8:	f3bf 8f6f 	isb	sy
 8103cec:	f3bf 8f4f 	dsb	sy
 8103cf0:	623b      	str	r3, [r7, #32]
}
 8103cf2:	bf00      	nop
 8103cf4:	e7fe      	b.n	8103cf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8103cf6:	f7ff fd77 	bl	81037e8 <vPortValidateInterruptPriority>
	__asm volatile
 8103cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8103cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d02:	f383 8811 	msr	BASEPRI, r3
 8103d06:	f3bf 8f6f 	isb	sy
 8103d0a:	f3bf 8f4f 	dsb	sy
 8103d0e:	61fa      	str	r2, [r7, #28]
 8103d10:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8103d12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8103d14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8103d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d1e:	429a      	cmp	r2, r3
 8103d20:	d302      	bcc.n	8103d28 <xQueueGenericSendFromISR+0xbc>
 8103d22:	683b      	ldr	r3, [r7, #0]
 8103d24:	2b02      	cmp	r3, #2
 8103d26:	d12f      	bne.n	8103d88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8103d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8103d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8103d38:	683a      	ldr	r2, [r7, #0]
 8103d3a:	68b9      	ldr	r1, [r7, #8]
 8103d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8103d3e:	f000 f911 	bl	8103f64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8103d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8103d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103d4a:	d112      	bne.n	8103d72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d50:	2b00      	cmp	r3, #0
 8103d52:	d016      	beq.n	8103d82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8103d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103d56:	3324      	adds	r3, #36	; 0x24
 8103d58:	4618      	mov	r0, r3
 8103d5a:	f000 fef7 	bl	8104b4c <xTaskRemoveFromEventList>
 8103d5e:	4603      	mov	r3, r0
 8103d60:	2b00      	cmp	r3, #0
 8103d62:	d00e      	beq.n	8103d82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d00b      	beq.n	8103d82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	2201      	movs	r2, #1
 8103d6e:	601a      	str	r2, [r3, #0]
 8103d70:	e007      	b.n	8103d82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8103d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8103d76:	3301      	adds	r3, #1
 8103d78:	b2db      	uxtb	r3, r3
 8103d7a:	b25a      	sxtb	r2, r3
 8103d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8103d82:	2301      	movs	r3, #1
 8103d84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8103d86:	e001      	b.n	8103d8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8103d88:	2300      	movs	r3, #0
 8103d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103d8e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8103d90:	697b      	ldr	r3, [r7, #20]
 8103d92:	f383 8811 	msr	BASEPRI, r3
}
 8103d96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8103d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8103d9a:	4618      	mov	r0, r3
 8103d9c:	3740      	adds	r7, #64	; 0x40
 8103d9e:	46bd      	mov	sp, r7
 8103da0:	bd80      	pop	{r7, pc}
	...

08103da4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8103da4:	b580      	push	{r7, lr}
 8103da6:	b08c      	sub	sp, #48	; 0x30
 8103da8:	af00      	add	r7, sp, #0
 8103daa:	60f8      	str	r0, [r7, #12]
 8103dac:	60b9      	str	r1, [r7, #8]
 8103dae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8103db0:	2300      	movs	r3, #0
 8103db2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8103db4:	68fb      	ldr	r3, [r7, #12]
 8103db6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8103db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103dba:	2b00      	cmp	r3, #0
 8103dbc:	d10a      	bne.n	8103dd4 <xQueueReceive+0x30>
	__asm volatile
 8103dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103dc2:	f383 8811 	msr	BASEPRI, r3
 8103dc6:	f3bf 8f6f 	isb	sy
 8103dca:	f3bf 8f4f 	dsb	sy
 8103dce:	623b      	str	r3, [r7, #32]
}
 8103dd0:	bf00      	nop
 8103dd2:	e7fe      	b.n	8103dd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8103dd4:	68bb      	ldr	r3, [r7, #8]
 8103dd6:	2b00      	cmp	r3, #0
 8103dd8:	d103      	bne.n	8103de2 <xQueueReceive+0x3e>
 8103dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103dde:	2b00      	cmp	r3, #0
 8103de0:	d101      	bne.n	8103de6 <xQueueReceive+0x42>
 8103de2:	2301      	movs	r3, #1
 8103de4:	e000      	b.n	8103de8 <xQueueReceive+0x44>
 8103de6:	2300      	movs	r3, #0
 8103de8:	2b00      	cmp	r3, #0
 8103dea:	d10a      	bne.n	8103e02 <xQueueReceive+0x5e>
	__asm volatile
 8103dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103df0:	f383 8811 	msr	BASEPRI, r3
 8103df4:	f3bf 8f6f 	isb	sy
 8103df8:	f3bf 8f4f 	dsb	sy
 8103dfc:	61fb      	str	r3, [r7, #28]
}
 8103dfe:	bf00      	nop
 8103e00:	e7fe      	b.n	8103e00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8103e02:	f001 f865 	bl	8104ed0 <xTaskGetSchedulerState>
 8103e06:	4603      	mov	r3, r0
 8103e08:	2b00      	cmp	r3, #0
 8103e0a:	d102      	bne.n	8103e12 <xQueueReceive+0x6e>
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	2b00      	cmp	r3, #0
 8103e10:	d101      	bne.n	8103e16 <xQueueReceive+0x72>
 8103e12:	2301      	movs	r3, #1
 8103e14:	e000      	b.n	8103e18 <xQueueReceive+0x74>
 8103e16:	2300      	movs	r3, #0
 8103e18:	2b00      	cmp	r3, #0
 8103e1a:	d10a      	bne.n	8103e32 <xQueueReceive+0x8e>
	__asm volatile
 8103e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103e20:	f383 8811 	msr	BASEPRI, r3
 8103e24:	f3bf 8f6f 	isb	sy
 8103e28:	f3bf 8f4f 	dsb	sy
 8103e2c:	61bb      	str	r3, [r7, #24]
}
 8103e2e:	bf00      	nop
 8103e30:	e7fe      	b.n	8103e30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8103e32:	f7ff fbf7 	bl	8103624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8103e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103e3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8103e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103e3e:	2b00      	cmp	r3, #0
 8103e40:	d01f      	beq.n	8103e82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8103e42:	68b9      	ldr	r1, [r7, #8]
 8103e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103e46:	f000 f8f7 	bl	8104038 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8103e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103e4c:	1e5a      	subs	r2, r3, #1
 8103e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8103e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e54:	691b      	ldr	r3, [r3, #16]
 8103e56:	2b00      	cmp	r3, #0
 8103e58:	d00f      	beq.n	8103e7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8103e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e5c:	3310      	adds	r3, #16
 8103e5e:	4618      	mov	r0, r3
 8103e60:	f000 fe74 	bl	8104b4c <xTaskRemoveFromEventList>
 8103e64:	4603      	mov	r3, r0
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	d007      	beq.n	8103e7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8103e6a:	4b3d      	ldr	r3, [pc, #244]	; (8103f60 <xQueueReceive+0x1bc>)
 8103e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103e70:	601a      	str	r2, [r3, #0]
 8103e72:	f3bf 8f4f 	dsb	sy
 8103e76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8103e7a:	f7ff fc03 	bl	8103684 <vPortExitCritical>
				return pdPASS;
 8103e7e:	2301      	movs	r3, #1
 8103e80:	e069      	b.n	8103f56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	d103      	bne.n	8103e90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8103e88:	f7ff fbfc 	bl	8103684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8103e8c:	2300      	movs	r3, #0
 8103e8e:	e062      	b.n	8103f56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8103e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103e92:	2b00      	cmp	r3, #0
 8103e94:	d106      	bne.n	8103ea4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8103e96:	f107 0310 	add.w	r3, r7, #16
 8103e9a:	4618      	mov	r0, r3
 8103e9c:	f000 feba 	bl	8104c14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8103ea0:	2301      	movs	r3, #1
 8103ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8103ea4:	f7ff fbee 	bl	8103684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8103ea8:	f000 fc26 	bl	81046f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8103eac:	f7ff fbba 	bl	8103624 <vPortEnterCritical>
 8103eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103eb6:	b25b      	sxtb	r3, r3
 8103eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103ebc:	d103      	bne.n	8103ec6 <xQueueReceive+0x122>
 8103ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103ec0:	2200      	movs	r2, #0
 8103ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103ecc:	b25b      	sxtb	r3, r3
 8103ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103ed2:	d103      	bne.n	8103edc <xQueueReceive+0x138>
 8103ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103ed6:	2200      	movs	r2, #0
 8103ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103edc:	f7ff fbd2 	bl	8103684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8103ee0:	1d3a      	adds	r2, r7, #4
 8103ee2:	f107 0310 	add.w	r3, r7, #16
 8103ee6:	4611      	mov	r1, r2
 8103ee8:	4618      	mov	r0, r3
 8103eea:	f000 fea9 	bl	8104c40 <xTaskCheckForTimeOut>
 8103eee:	4603      	mov	r3, r0
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d123      	bne.n	8103f3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8103ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103ef6:	f000 f917 	bl	8104128 <prvIsQueueEmpty>
 8103efa:	4603      	mov	r3, r0
 8103efc:	2b00      	cmp	r3, #0
 8103efe:	d017      	beq.n	8103f30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8103f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f02:	3324      	adds	r3, #36	; 0x24
 8103f04:	687a      	ldr	r2, [r7, #4]
 8103f06:	4611      	mov	r1, r2
 8103f08:	4618      	mov	r0, r3
 8103f0a:	f000 fdcf 	bl	8104aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8103f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103f10:	f000 f8b8 	bl	8104084 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8103f14:	f000 fbfe 	bl	8104714 <xTaskResumeAll>
 8103f18:	4603      	mov	r3, r0
 8103f1a:	2b00      	cmp	r3, #0
 8103f1c:	d189      	bne.n	8103e32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8103f1e:	4b10      	ldr	r3, [pc, #64]	; (8103f60 <xQueueReceive+0x1bc>)
 8103f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103f24:	601a      	str	r2, [r3, #0]
 8103f26:	f3bf 8f4f 	dsb	sy
 8103f2a:	f3bf 8f6f 	isb	sy
 8103f2e:	e780      	b.n	8103e32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8103f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103f32:	f000 f8a7 	bl	8104084 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8103f36:	f000 fbed 	bl	8104714 <xTaskResumeAll>
 8103f3a:	e77a      	b.n	8103e32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8103f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103f3e:	f000 f8a1 	bl	8104084 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8103f42:	f000 fbe7 	bl	8104714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8103f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8103f48:	f000 f8ee 	bl	8104128 <prvIsQueueEmpty>
 8103f4c:	4603      	mov	r3, r0
 8103f4e:	2b00      	cmp	r3, #0
 8103f50:	f43f af6f 	beq.w	8103e32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8103f54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8103f56:	4618      	mov	r0, r3
 8103f58:	3730      	adds	r7, #48	; 0x30
 8103f5a:	46bd      	mov	sp, r7
 8103f5c:	bd80      	pop	{r7, pc}
 8103f5e:	bf00      	nop
 8103f60:	e000ed04 	.word	0xe000ed04

08103f64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8103f64:	b580      	push	{r7, lr}
 8103f66:	b086      	sub	sp, #24
 8103f68:	af00      	add	r7, sp, #0
 8103f6a:	60f8      	str	r0, [r7, #12]
 8103f6c:	60b9      	str	r1, [r7, #8]
 8103f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8103f70:	2300      	movs	r3, #0
 8103f72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8103f74:	68fb      	ldr	r3, [r7, #12]
 8103f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103f78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8103f7a:	68fb      	ldr	r3, [r7, #12]
 8103f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f7e:	2b00      	cmp	r3, #0
 8103f80:	d10d      	bne.n	8103f9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8103f82:	68fb      	ldr	r3, [r7, #12]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	d14d      	bne.n	8104026 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8103f8a:	68fb      	ldr	r3, [r7, #12]
 8103f8c:	689b      	ldr	r3, [r3, #8]
 8103f8e:	4618      	mov	r0, r3
 8103f90:	f000 ffbc 	bl	8104f0c <xTaskPriorityDisinherit>
 8103f94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8103f96:	68fb      	ldr	r3, [r7, #12]
 8103f98:	2200      	movs	r2, #0
 8103f9a:	609a      	str	r2, [r3, #8]
 8103f9c:	e043      	b.n	8104026 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	2b00      	cmp	r3, #0
 8103fa2:	d119      	bne.n	8103fd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8103fa4:	68fb      	ldr	r3, [r7, #12]
 8103fa6:	6858      	ldr	r0, [r3, #4]
 8103fa8:	68fb      	ldr	r3, [r7, #12]
 8103faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fac:	461a      	mov	r2, r3
 8103fae:	68b9      	ldr	r1, [r7, #8]
 8103fb0:	f001 fbe2 	bl	8105778 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	685a      	ldr	r2, [r3, #4]
 8103fb8:	68fb      	ldr	r3, [r7, #12]
 8103fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fbc:	441a      	add	r2, r3
 8103fbe:	68fb      	ldr	r3, [r7, #12]
 8103fc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8103fc2:	68fb      	ldr	r3, [r7, #12]
 8103fc4:	685a      	ldr	r2, [r3, #4]
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	689b      	ldr	r3, [r3, #8]
 8103fca:	429a      	cmp	r2, r3
 8103fcc:	d32b      	bcc.n	8104026 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8103fce:	68fb      	ldr	r3, [r7, #12]
 8103fd0:	681a      	ldr	r2, [r3, #0]
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	605a      	str	r2, [r3, #4]
 8103fd6:	e026      	b.n	8104026 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8103fd8:	68fb      	ldr	r3, [r7, #12]
 8103fda:	68d8      	ldr	r0, [r3, #12]
 8103fdc:	68fb      	ldr	r3, [r7, #12]
 8103fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fe0:	461a      	mov	r2, r3
 8103fe2:	68b9      	ldr	r1, [r7, #8]
 8103fe4:	f001 fbc8 	bl	8105778 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8103fe8:	68fb      	ldr	r3, [r7, #12]
 8103fea:	68da      	ldr	r2, [r3, #12]
 8103fec:	68fb      	ldr	r3, [r7, #12]
 8103fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ff0:	425b      	negs	r3, r3
 8103ff2:	441a      	add	r2, r3
 8103ff4:	68fb      	ldr	r3, [r7, #12]
 8103ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	68da      	ldr	r2, [r3, #12]
 8103ffc:	68fb      	ldr	r3, [r7, #12]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	429a      	cmp	r2, r3
 8104002:	d207      	bcs.n	8104014 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	689a      	ldr	r2, [r3, #8]
 8104008:	68fb      	ldr	r3, [r7, #12]
 810400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810400c:	425b      	negs	r3, r3
 810400e:	441a      	add	r2, r3
 8104010:	68fb      	ldr	r3, [r7, #12]
 8104012:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	2b02      	cmp	r3, #2
 8104018:	d105      	bne.n	8104026 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810401a:	693b      	ldr	r3, [r7, #16]
 810401c:	2b00      	cmp	r3, #0
 810401e:	d002      	beq.n	8104026 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8104020:	693b      	ldr	r3, [r7, #16]
 8104022:	3b01      	subs	r3, #1
 8104024:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8104026:	693b      	ldr	r3, [r7, #16]
 8104028:	1c5a      	adds	r2, r3, #1
 810402a:	68fb      	ldr	r3, [r7, #12]
 810402c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810402e:	697b      	ldr	r3, [r7, #20]
}
 8104030:	4618      	mov	r0, r3
 8104032:	3718      	adds	r7, #24
 8104034:	46bd      	mov	sp, r7
 8104036:	bd80      	pop	{r7, pc}

08104038 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8104038:	b580      	push	{r7, lr}
 810403a:	b082      	sub	sp, #8
 810403c:	af00      	add	r7, sp, #0
 810403e:	6078      	str	r0, [r7, #4]
 8104040:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104046:	2b00      	cmp	r3, #0
 8104048:	d018      	beq.n	810407c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	68da      	ldr	r2, [r3, #12]
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104052:	441a      	add	r2, r3
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	68da      	ldr	r2, [r3, #12]
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	689b      	ldr	r3, [r3, #8]
 8104060:	429a      	cmp	r2, r3
 8104062:	d303      	bcc.n	810406c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	681a      	ldr	r2, [r3, #0]
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	68d9      	ldr	r1, [r3, #12]
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104074:	461a      	mov	r2, r3
 8104076:	6838      	ldr	r0, [r7, #0]
 8104078:	f001 fb7e 	bl	8105778 <memcpy>
	}
}
 810407c:	bf00      	nop
 810407e:	3708      	adds	r7, #8
 8104080:	46bd      	mov	sp, r7
 8104082:	bd80      	pop	{r7, pc}

08104084 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8104084:	b580      	push	{r7, lr}
 8104086:	b084      	sub	sp, #16
 8104088:	af00      	add	r7, sp, #0
 810408a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810408c:	f7ff faca 	bl	8103624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104096:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8104098:	e011      	b.n	81040be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810409e:	2b00      	cmp	r3, #0
 81040a0:	d012      	beq.n	81040c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81040a2:	687b      	ldr	r3, [r7, #4]
 81040a4:	3324      	adds	r3, #36	; 0x24
 81040a6:	4618      	mov	r0, r3
 81040a8:	f000 fd50 	bl	8104b4c <xTaskRemoveFromEventList>
 81040ac:	4603      	mov	r3, r0
 81040ae:	2b00      	cmp	r3, #0
 81040b0:	d001      	beq.n	81040b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81040b2:	f000 fe27 	bl	8104d04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81040b6:	7bfb      	ldrb	r3, [r7, #15]
 81040b8:	3b01      	subs	r3, #1
 81040ba:	b2db      	uxtb	r3, r3
 81040bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81040be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81040c2:	2b00      	cmp	r3, #0
 81040c4:	dce9      	bgt.n	810409a <prvUnlockQueue+0x16>
 81040c6:	e000      	b.n	81040ca <prvUnlockQueue+0x46>
					break;
 81040c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81040ca:	687b      	ldr	r3, [r7, #4]
 81040cc:	22ff      	movs	r2, #255	; 0xff
 81040ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 81040d2:	f7ff fad7 	bl	8103684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81040d6:	f7ff faa5 	bl	8103624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81040da:	687b      	ldr	r3, [r7, #4]
 81040dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81040e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81040e2:	e011      	b.n	8104108 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	691b      	ldr	r3, [r3, #16]
 81040e8:	2b00      	cmp	r3, #0
 81040ea:	d012      	beq.n	8104112 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	3310      	adds	r3, #16
 81040f0:	4618      	mov	r0, r3
 81040f2:	f000 fd2b 	bl	8104b4c <xTaskRemoveFromEventList>
 81040f6:	4603      	mov	r3, r0
 81040f8:	2b00      	cmp	r3, #0
 81040fa:	d001      	beq.n	8104100 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81040fc:	f000 fe02 	bl	8104d04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8104100:	7bbb      	ldrb	r3, [r7, #14]
 8104102:	3b01      	subs	r3, #1
 8104104:	b2db      	uxtb	r3, r3
 8104106:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8104108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810410c:	2b00      	cmp	r3, #0
 810410e:	dce9      	bgt.n	81040e4 <prvUnlockQueue+0x60>
 8104110:	e000      	b.n	8104114 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8104112:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	22ff      	movs	r2, #255	; 0xff
 8104118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810411c:	f7ff fab2 	bl	8103684 <vPortExitCritical>
}
 8104120:	bf00      	nop
 8104122:	3710      	adds	r7, #16
 8104124:	46bd      	mov	sp, r7
 8104126:	bd80      	pop	{r7, pc}

08104128 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8104128:	b580      	push	{r7, lr}
 810412a:	b084      	sub	sp, #16
 810412c:	af00      	add	r7, sp, #0
 810412e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8104130:	f7ff fa78 	bl	8103624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104138:	2b00      	cmp	r3, #0
 810413a:	d102      	bne.n	8104142 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810413c:	2301      	movs	r3, #1
 810413e:	60fb      	str	r3, [r7, #12]
 8104140:	e001      	b.n	8104146 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8104142:	2300      	movs	r3, #0
 8104144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8104146:	f7ff fa9d 	bl	8103684 <vPortExitCritical>

	return xReturn;
 810414a:	68fb      	ldr	r3, [r7, #12]
}
 810414c:	4618      	mov	r0, r3
 810414e:	3710      	adds	r7, #16
 8104150:	46bd      	mov	sp, r7
 8104152:	bd80      	pop	{r7, pc}

08104154 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8104154:	b580      	push	{r7, lr}
 8104156:	b084      	sub	sp, #16
 8104158:	af00      	add	r7, sp, #0
 810415a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810415c:	f7ff fa62 	bl	8103624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104168:	429a      	cmp	r2, r3
 810416a:	d102      	bne.n	8104172 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810416c:	2301      	movs	r3, #1
 810416e:	60fb      	str	r3, [r7, #12]
 8104170:	e001      	b.n	8104176 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8104172:	2300      	movs	r3, #0
 8104174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8104176:	f7ff fa85 	bl	8103684 <vPortExitCritical>

	return xReturn;
 810417a:	68fb      	ldr	r3, [r7, #12]
}
 810417c:	4618      	mov	r0, r3
 810417e:	3710      	adds	r7, #16
 8104180:	46bd      	mov	sp, r7
 8104182:	bd80      	pop	{r7, pc}

08104184 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8104184:	b480      	push	{r7}
 8104186:	b085      	sub	sp, #20
 8104188:	af00      	add	r7, sp, #0
 810418a:	6078      	str	r0, [r7, #4]
 810418c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810418e:	2300      	movs	r3, #0
 8104190:	60fb      	str	r3, [r7, #12]
 8104192:	e014      	b.n	81041be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8104194:	4a0f      	ldr	r2, [pc, #60]	; (81041d4 <vQueueAddToRegistry+0x50>)
 8104196:	68fb      	ldr	r3, [r7, #12]
 8104198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810419c:	2b00      	cmp	r3, #0
 810419e:	d10b      	bne.n	81041b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81041a0:	490c      	ldr	r1, [pc, #48]	; (81041d4 <vQueueAddToRegistry+0x50>)
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	683a      	ldr	r2, [r7, #0]
 81041a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81041aa:	4a0a      	ldr	r2, [pc, #40]	; (81041d4 <vQueueAddToRegistry+0x50>)
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	00db      	lsls	r3, r3, #3
 81041b0:	4413      	add	r3, r2
 81041b2:	687a      	ldr	r2, [r7, #4]
 81041b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81041b6:	e006      	b.n	81041c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81041b8:	68fb      	ldr	r3, [r7, #12]
 81041ba:	3301      	adds	r3, #1
 81041bc:	60fb      	str	r3, [r7, #12]
 81041be:	68fb      	ldr	r3, [r7, #12]
 81041c0:	2b07      	cmp	r3, #7
 81041c2:	d9e7      	bls.n	8104194 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81041c4:	bf00      	nop
 81041c6:	bf00      	nop
 81041c8:	3714      	adds	r7, #20
 81041ca:	46bd      	mov	sp, r7
 81041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041d0:	4770      	bx	lr
 81041d2:	bf00      	nop
 81041d4:	100044dc 	.word	0x100044dc

081041d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81041d8:	b580      	push	{r7, lr}
 81041da:	b086      	sub	sp, #24
 81041dc:	af00      	add	r7, sp, #0
 81041de:	60f8      	str	r0, [r7, #12]
 81041e0:	60b9      	str	r1, [r7, #8]
 81041e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81041e4:	68fb      	ldr	r3, [r7, #12]
 81041e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81041e8:	f7ff fa1c 	bl	8103624 <vPortEnterCritical>
 81041ec:	697b      	ldr	r3, [r7, #20]
 81041ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81041f2:	b25b      	sxtb	r3, r3
 81041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81041f8:	d103      	bne.n	8104202 <vQueueWaitForMessageRestricted+0x2a>
 81041fa:	697b      	ldr	r3, [r7, #20]
 81041fc:	2200      	movs	r2, #0
 81041fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104202:	697b      	ldr	r3, [r7, #20]
 8104204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104208:	b25b      	sxtb	r3, r3
 810420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810420e:	d103      	bne.n	8104218 <vQueueWaitForMessageRestricted+0x40>
 8104210:	697b      	ldr	r3, [r7, #20]
 8104212:	2200      	movs	r2, #0
 8104214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104218:	f7ff fa34 	bl	8103684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810421c:	697b      	ldr	r3, [r7, #20]
 810421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104220:	2b00      	cmp	r3, #0
 8104222:	d106      	bne.n	8104232 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8104224:	697b      	ldr	r3, [r7, #20]
 8104226:	3324      	adds	r3, #36	; 0x24
 8104228:	687a      	ldr	r2, [r7, #4]
 810422a:	68b9      	ldr	r1, [r7, #8]
 810422c:	4618      	mov	r0, r3
 810422e:	f000 fc61 	bl	8104af4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8104232:	6978      	ldr	r0, [r7, #20]
 8104234:	f7ff ff26 	bl	8104084 <prvUnlockQueue>
	}
 8104238:	bf00      	nop
 810423a:	3718      	adds	r7, #24
 810423c:	46bd      	mov	sp, r7
 810423e:	bd80      	pop	{r7, pc}

08104240 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8104240:	b580      	push	{r7, lr}
 8104242:	b08e      	sub	sp, #56	; 0x38
 8104244:	af04      	add	r7, sp, #16
 8104246:	60f8      	str	r0, [r7, #12]
 8104248:	60b9      	str	r1, [r7, #8]
 810424a:	607a      	str	r2, [r7, #4]
 810424c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104250:	2b00      	cmp	r3, #0
 8104252:	d10a      	bne.n	810426a <xTaskCreateStatic+0x2a>
	__asm volatile
 8104254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104258:	f383 8811 	msr	BASEPRI, r3
 810425c:	f3bf 8f6f 	isb	sy
 8104260:	f3bf 8f4f 	dsb	sy
 8104264:	623b      	str	r3, [r7, #32]
}
 8104266:	bf00      	nop
 8104268:	e7fe      	b.n	8104268 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810426c:	2b00      	cmp	r3, #0
 810426e:	d10a      	bne.n	8104286 <xTaskCreateStatic+0x46>
	__asm volatile
 8104270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104274:	f383 8811 	msr	BASEPRI, r3
 8104278:	f3bf 8f6f 	isb	sy
 810427c:	f3bf 8f4f 	dsb	sy
 8104280:	61fb      	str	r3, [r7, #28]
}
 8104282:	bf00      	nop
 8104284:	e7fe      	b.n	8104284 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8104286:	23bc      	movs	r3, #188	; 0xbc
 8104288:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810428a:	693b      	ldr	r3, [r7, #16]
 810428c:	2bbc      	cmp	r3, #188	; 0xbc
 810428e:	d00a      	beq.n	81042a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8104290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104294:	f383 8811 	msr	BASEPRI, r3
 8104298:	f3bf 8f6f 	isb	sy
 810429c:	f3bf 8f4f 	dsb	sy
 81042a0:	61bb      	str	r3, [r7, #24]
}
 81042a2:	bf00      	nop
 81042a4:	e7fe      	b.n	81042a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81042a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81042aa:	2b00      	cmp	r3, #0
 81042ac:	d01e      	beq.n	81042ec <xTaskCreateStatic+0xac>
 81042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81042b0:	2b00      	cmp	r3, #0
 81042b2:	d01b      	beq.n	81042ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81042b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81042ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81042bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81042c0:	2202      	movs	r2, #2
 81042c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81042c6:	2300      	movs	r3, #0
 81042c8:	9303      	str	r3, [sp, #12]
 81042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81042cc:	9302      	str	r3, [sp, #8]
 81042ce:	f107 0314 	add.w	r3, r7, #20
 81042d2:	9301      	str	r3, [sp, #4]
 81042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81042d6:	9300      	str	r3, [sp, #0]
 81042d8:	683b      	ldr	r3, [r7, #0]
 81042da:	687a      	ldr	r2, [r7, #4]
 81042dc:	68b9      	ldr	r1, [r7, #8]
 81042de:	68f8      	ldr	r0, [r7, #12]
 81042e0:	f000 f850 	bl	8104384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81042e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81042e6:	f000 f8f3 	bl	81044d0 <prvAddNewTaskToReadyList>
 81042ea:	e001      	b.n	81042f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 81042ec:	2300      	movs	r3, #0
 81042ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81042f0:	697b      	ldr	r3, [r7, #20]
	}
 81042f2:	4618      	mov	r0, r3
 81042f4:	3728      	adds	r7, #40	; 0x28
 81042f6:	46bd      	mov	sp, r7
 81042f8:	bd80      	pop	{r7, pc}

081042fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81042fa:	b580      	push	{r7, lr}
 81042fc:	b08c      	sub	sp, #48	; 0x30
 81042fe:	af04      	add	r7, sp, #16
 8104300:	60f8      	str	r0, [r7, #12]
 8104302:	60b9      	str	r1, [r7, #8]
 8104304:	603b      	str	r3, [r7, #0]
 8104306:	4613      	mov	r3, r2
 8104308:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810430a:	88fb      	ldrh	r3, [r7, #6]
 810430c:	009b      	lsls	r3, r3, #2
 810430e:	4618      	mov	r0, r3
 8104310:	f7fe fdbe 	bl	8102e90 <pvPortMalloc>
 8104314:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8104316:	697b      	ldr	r3, [r7, #20]
 8104318:	2b00      	cmp	r3, #0
 810431a:	d00e      	beq.n	810433a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810431c:	20bc      	movs	r0, #188	; 0xbc
 810431e:	f7fe fdb7 	bl	8102e90 <pvPortMalloc>
 8104322:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8104324:	69fb      	ldr	r3, [r7, #28]
 8104326:	2b00      	cmp	r3, #0
 8104328:	d003      	beq.n	8104332 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810432a:	69fb      	ldr	r3, [r7, #28]
 810432c:	697a      	ldr	r2, [r7, #20]
 810432e:	631a      	str	r2, [r3, #48]	; 0x30
 8104330:	e005      	b.n	810433e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8104332:	6978      	ldr	r0, [r7, #20]
 8104334:	f7fe fe78 	bl	8103028 <vPortFree>
 8104338:	e001      	b.n	810433e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810433a:	2300      	movs	r3, #0
 810433c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810433e:	69fb      	ldr	r3, [r7, #28]
 8104340:	2b00      	cmp	r3, #0
 8104342:	d017      	beq.n	8104374 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8104344:	69fb      	ldr	r3, [r7, #28]
 8104346:	2200      	movs	r2, #0
 8104348:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810434c:	88fa      	ldrh	r2, [r7, #6]
 810434e:	2300      	movs	r3, #0
 8104350:	9303      	str	r3, [sp, #12]
 8104352:	69fb      	ldr	r3, [r7, #28]
 8104354:	9302      	str	r3, [sp, #8]
 8104356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104358:	9301      	str	r3, [sp, #4]
 810435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810435c:	9300      	str	r3, [sp, #0]
 810435e:	683b      	ldr	r3, [r7, #0]
 8104360:	68b9      	ldr	r1, [r7, #8]
 8104362:	68f8      	ldr	r0, [r7, #12]
 8104364:	f000 f80e 	bl	8104384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8104368:	69f8      	ldr	r0, [r7, #28]
 810436a:	f000 f8b1 	bl	81044d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810436e:	2301      	movs	r3, #1
 8104370:	61bb      	str	r3, [r7, #24]
 8104372:	e002      	b.n	810437a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8104374:	f04f 33ff 	mov.w	r3, #4294967295
 8104378:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810437a:	69bb      	ldr	r3, [r7, #24]
	}
 810437c:	4618      	mov	r0, r3
 810437e:	3720      	adds	r7, #32
 8104380:	46bd      	mov	sp, r7
 8104382:	bd80      	pop	{r7, pc}

08104384 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8104384:	b580      	push	{r7, lr}
 8104386:	b088      	sub	sp, #32
 8104388:	af00      	add	r7, sp, #0
 810438a:	60f8      	str	r0, [r7, #12]
 810438c:	60b9      	str	r1, [r7, #8]
 810438e:	607a      	str	r2, [r7, #4]
 8104390:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8104392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104394:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	009b      	lsls	r3, r3, #2
 810439a:	461a      	mov	r2, r3
 810439c:	21a5      	movs	r1, #165	; 0xa5
 810439e:	f001 f9f9 	bl	8105794 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81043a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81043ac:	3b01      	subs	r3, #1
 81043ae:	009b      	lsls	r3, r3, #2
 81043b0:	4413      	add	r3, r2
 81043b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81043b4:	69bb      	ldr	r3, [r7, #24]
 81043b6:	f023 0307 	bic.w	r3, r3, #7
 81043ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81043bc:	69bb      	ldr	r3, [r7, #24]
 81043be:	f003 0307 	and.w	r3, r3, #7
 81043c2:	2b00      	cmp	r3, #0
 81043c4:	d00a      	beq.n	81043dc <prvInitialiseNewTask+0x58>
	__asm volatile
 81043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81043ca:	f383 8811 	msr	BASEPRI, r3
 81043ce:	f3bf 8f6f 	isb	sy
 81043d2:	f3bf 8f4f 	dsb	sy
 81043d6:	617b      	str	r3, [r7, #20]
}
 81043d8:	bf00      	nop
 81043da:	e7fe      	b.n	81043da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81043dc:	68bb      	ldr	r3, [r7, #8]
 81043de:	2b00      	cmp	r3, #0
 81043e0:	d01f      	beq.n	8104422 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81043e2:	2300      	movs	r3, #0
 81043e4:	61fb      	str	r3, [r7, #28]
 81043e6:	e012      	b.n	810440e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81043e8:	68ba      	ldr	r2, [r7, #8]
 81043ea:	69fb      	ldr	r3, [r7, #28]
 81043ec:	4413      	add	r3, r2
 81043ee:	7819      	ldrb	r1, [r3, #0]
 81043f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81043f2:	69fb      	ldr	r3, [r7, #28]
 81043f4:	4413      	add	r3, r2
 81043f6:	3334      	adds	r3, #52	; 0x34
 81043f8:	460a      	mov	r2, r1
 81043fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81043fc:	68ba      	ldr	r2, [r7, #8]
 81043fe:	69fb      	ldr	r3, [r7, #28]
 8104400:	4413      	add	r3, r2
 8104402:	781b      	ldrb	r3, [r3, #0]
 8104404:	2b00      	cmp	r3, #0
 8104406:	d006      	beq.n	8104416 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8104408:	69fb      	ldr	r3, [r7, #28]
 810440a:	3301      	adds	r3, #1
 810440c:	61fb      	str	r3, [r7, #28]
 810440e:	69fb      	ldr	r3, [r7, #28]
 8104410:	2b0f      	cmp	r3, #15
 8104412:	d9e9      	bls.n	81043e8 <prvInitialiseNewTask+0x64>
 8104414:	e000      	b.n	8104418 <prvInitialiseNewTask+0x94>
			{
				break;
 8104416:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8104418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810441a:	2200      	movs	r2, #0
 810441c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8104420:	e003      	b.n	810442a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8104422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104424:	2200      	movs	r2, #0
 8104426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810442c:	2b37      	cmp	r3, #55	; 0x37
 810442e:	d901      	bls.n	8104434 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8104430:	2337      	movs	r3, #55	; 0x37
 8104432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8104434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810443c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810443e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8104440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104442:	2200      	movs	r2, #0
 8104444:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8104446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104448:	3304      	adds	r3, #4
 810444a:	4618      	mov	r0, r3
 810444c:	f7fe ff2a 	bl	81032a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8104450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104452:	3318      	adds	r3, #24
 8104454:	4618      	mov	r0, r3
 8104456:	f7fe ff25 	bl	81032a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810445c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810445e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104462:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8104466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810446c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810446e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8104470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104472:	2200      	movs	r2, #0
 8104474:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8104478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810447a:	2200      	movs	r2, #0
 810447c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8104480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104482:	3354      	adds	r3, #84	; 0x54
 8104484:	2260      	movs	r2, #96	; 0x60
 8104486:	2100      	movs	r1, #0
 8104488:	4618      	mov	r0, r3
 810448a:	f001 f983 	bl	8105794 <memset>
 810448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104490:	4a0c      	ldr	r2, [pc, #48]	; (81044c4 <prvInitialiseNewTask+0x140>)
 8104492:	659a      	str	r2, [r3, #88]	; 0x58
 8104494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104496:	4a0c      	ldr	r2, [pc, #48]	; (81044c8 <prvInitialiseNewTask+0x144>)
 8104498:	65da      	str	r2, [r3, #92]	; 0x5c
 810449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810449c:	4a0b      	ldr	r2, [pc, #44]	; (81044cc <prvInitialiseNewTask+0x148>)
 810449e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81044a0:	683a      	ldr	r2, [r7, #0]
 81044a2:	68f9      	ldr	r1, [r7, #12]
 81044a4:	69b8      	ldr	r0, [r7, #24]
 81044a6:	f7fe ff91 	bl	81033cc <pxPortInitialiseStack>
 81044aa:	4602      	mov	r2, r0
 81044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81044ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81044b2:	2b00      	cmp	r3, #0
 81044b4:	d002      	beq.n	81044bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81044b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81044ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81044bc:	bf00      	nop
 81044be:	3720      	adds	r7, #32
 81044c0:	46bd      	mov	sp, r7
 81044c2:	bd80      	pop	{r7, pc}
 81044c4:	081059ec 	.word	0x081059ec
 81044c8:	08105a0c 	.word	0x08105a0c
 81044cc:	081059cc 	.word	0x081059cc

081044d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81044d0:	b580      	push	{r7, lr}
 81044d2:	b082      	sub	sp, #8
 81044d4:	af00      	add	r7, sp, #0
 81044d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81044d8:	f7ff f8a4 	bl	8103624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81044dc:	4b2d      	ldr	r3, [pc, #180]	; (8104594 <prvAddNewTaskToReadyList+0xc4>)
 81044de:	681b      	ldr	r3, [r3, #0]
 81044e0:	3301      	adds	r3, #1
 81044e2:	4a2c      	ldr	r2, [pc, #176]	; (8104594 <prvAddNewTaskToReadyList+0xc4>)
 81044e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81044e6:	4b2c      	ldr	r3, [pc, #176]	; (8104598 <prvAddNewTaskToReadyList+0xc8>)
 81044e8:	681b      	ldr	r3, [r3, #0]
 81044ea:	2b00      	cmp	r3, #0
 81044ec:	d109      	bne.n	8104502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81044ee:	4a2a      	ldr	r2, [pc, #168]	; (8104598 <prvAddNewTaskToReadyList+0xc8>)
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81044f4:	4b27      	ldr	r3, [pc, #156]	; (8104594 <prvAddNewTaskToReadyList+0xc4>)
 81044f6:	681b      	ldr	r3, [r3, #0]
 81044f8:	2b01      	cmp	r3, #1
 81044fa:	d110      	bne.n	810451e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81044fc:	f000 fc26 	bl	8104d4c <prvInitialiseTaskLists>
 8104500:	e00d      	b.n	810451e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8104502:	4b26      	ldr	r3, [pc, #152]	; (810459c <prvAddNewTaskToReadyList+0xcc>)
 8104504:	681b      	ldr	r3, [r3, #0]
 8104506:	2b00      	cmp	r3, #0
 8104508:	d109      	bne.n	810451e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810450a:	4b23      	ldr	r3, [pc, #140]	; (8104598 <prvAddNewTaskToReadyList+0xc8>)
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104514:	429a      	cmp	r2, r3
 8104516:	d802      	bhi.n	810451e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8104518:	4a1f      	ldr	r2, [pc, #124]	; (8104598 <prvAddNewTaskToReadyList+0xc8>)
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810451e:	4b20      	ldr	r3, [pc, #128]	; (81045a0 <prvAddNewTaskToReadyList+0xd0>)
 8104520:	681b      	ldr	r3, [r3, #0]
 8104522:	3301      	adds	r3, #1
 8104524:	4a1e      	ldr	r2, [pc, #120]	; (81045a0 <prvAddNewTaskToReadyList+0xd0>)
 8104526:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8104528:	4b1d      	ldr	r3, [pc, #116]	; (81045a0 <prvAddNewTaskToReadyList+0xd0>)
 810452a:	681a      	ldr	r2, [r3, #0]
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104534:	4b1b      	ldr	r3, [pc, #108]	; (81045a4 <prvAddNewTaskToReadyList+0xd4>)
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	429a      	cmp	r2, r3
 810453a:	d903      	bls.n	8104544 <prvAddNewTaskToReadyList+0x74>
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104540:	4a18      	ldr	r2, [pc, #96]	; (81045a4 <prvAddNewTaskToReadyList+0xd4>)
 8104542:	6013      	str	r3, [r2, #0]
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104548:	4613      	mov	r3, r2
 810454a:	009b      	lsls	r3, r3, #2
 810454c:	4413      	add	r3, r2
 810454e:	009b      	lsls	r3, r3, #2
 8104550:	4a15      	ldr	r2, [pc, #84]	; (81045a8 <prvAddNewTaskToReadyList+0xd8>)
 8104552:	441a      	add	r2, r3
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	3304      	adds	r3, #4
 8104558:	4619      	mov	r1, r3
 810455a:	4610      	mov	r0, r2
 810455c:	f7fe feaf 	bl	81032be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8104560:	f7ff f890 	bl	8103684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8104564:	4b0d      	ldr	r3, [pc, #52]	; (810459c <prvAddNewTaskToReadyList+0xcc>)
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	2b00      	cmp	r3, #0
 810456a:	d00e      	beq.n	810458a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810456c:	4b0a      	ldr	r3, [pc, #40]	; (8104598 <prvAddNewTaskToReadyList+0xc8>)
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104576:	429a      	cmp	r2, r3
 8104578:	d207      	bcs.n	810458a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810457a:	4b0c      	ldr	r3, [pc, #48]	; (81045ac <prvAddNewTaskToReadyList+0xdc>)
 810457c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104580:	601a      	str	r2, [r3, #0]
 8104582:	f3bf 8f4f 	dsb	sy
 8104586:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810458a:	bf00      	nop
 810458c:	3708      	adds	r7, #8
 810458e:	46bd      	mov	sp, r7
 8104590:	bd80      	pop	{r7, pc}
 8104592:	bf00      	nop
 8104594:	100049f0 	.word	0x100049f0
 8104598:	1000451c 	.word	0x1000451c
 810459c:	100049fc 	.word	0x100049fc
 81045a0:	10004a0c 	.word	0x10004a0c
 81045a4:	100049f8 	.word	0x100049f8
 81045a8:	10004520 	.word	0x10004520
 81045ac:	e000ed04 	.word	0xe000ed04

081045b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81045b0:	b580      	push	{r7, lr}
 81045b2:	b084      	sub	sp, #16
 81045b4:	af00      	add	r7, sp, #0
 81045b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81045b8:	2300      	movs	r3, #0
 81045ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	2b00      	cmp	r3, #0
 81045c0:	d017      	beq.n	81045f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81045c2:	4b13      	ldr	r3, [pc, #76]	; (8104610 <vTaskDelay+0x60>)
 81045c4:	681b      	ldr	r3, [r3, #0]
 81045c6:	2b00      	cmp	r3, #0
 81045c8:	d00a      	beq.n	81045e0 <vTaskDelay+0x30>
	__asm volatile
 81045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 81045ce:	f383 8811 	msr	BASEPRI, r3
 81045d2:	f3bf 8f6f 	isb	sy
 81045d6:	f3bf 8f4f 	dsb	sy
 81045da:	60bb      	str	r3, [r7, #8]
}
 81045dc:	bf00      	nop
 81045de:	e7fe      	b.n	81045de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81045e0:	f000 f88a 	bl	81046f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81045e4:	2100      	movs	r1, #0
 81045e6:	6878      	ldr	r0, [r7, #4]
 81045e8:	f000 fcfe 	bl	8104fe8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81045ec:	f000 f892 	bl	8104714 <xTaskResumeAll>
 81045f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81045f2:	68fb      	ldr	r3, [r7, #12]
 81045f4:	2b00      	cmp	r3, #0
 81045f6:	d107      	bne.n	8104608 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 81045f8:	4b06      	ldr	r3, [pc, #24]	; (8104614 <vTaskDelay+0x64>)
 81045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81045fe:	601a      	str	r2, [r3, #0]
 8104600:	f3bf 8f4f 	dsb	sy
 8104604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8104608:	bf00      	nop
 810460a:	3710      	adds	r7, #16
 810460c:	46bd      	mov	sp, r7
 810460e:	bd80      	pop	{r7, pc}
 8104610:	10004a18 	.word	0x10004a18
 8104614:	e000ed04 	.word	0xe000ed04

08104618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8104618:	b580      	push	{r7, lr}
 810461a:	b08a      	sub	sp, #40	; 0x28
 810461c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810461e:	2300      	movs	r3, #0
 8104620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8104622:	2300      	movs	r3, #0
 8104624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8104626:	463a      	mov	r2, r7
 8104628:	1d39      	adds	r1, r7, #4
 810462a:	f107 0308 	add.w	r3, r7, #8
 810462e:	4618      	mov	r0, r3
 8104630:	f7fe fbfa 	bl	8102e28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8104634:	6839      	ldr	r1, [r7, #0]
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	68ba      	ldr	r2, [r7, #8]
 810463a:	9202      	str	r2, [sp, #8]
 810463c:	9301      	str	r3, [sp, #4]
 810463e:	2300      	movs	r3, #0
 8104640:	9300      	str	r3, [sp, #0]
 8104642:	2300      	movs	r3, #0
 8104644:	460a      	mov	r2, r1
 8104646:	4924      	ldr	r1, [pc, #144]	; (81046d8 <vTaskStartScheduler+0xc0>)
 8104648:	4824      	ldr	r0, [pc, #144]	; (81046dc <vTaskStartScheduler+0xc4>)
 810464a:	f7ff fdf9 	bl	8104240 <xTaskCreateStatic>
 810464e:	4603      	mov	r3, r0
 8104650:	4a23      	ldr	r2, [pc, #140]	; (81046e0 <vTaskStartScheduler+0xc8>)
 8104652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8104654:	4b22      	ldr	r3, [pc, #136]	; (81046e0 <vTaskStartScheduler+0xc8>)
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	2b00      	cmp	r3, #0
 810465a:	d002      	beq.n	8104662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810465c:	2301      	movs	r3, #1
 810465e:	617b      	str	r3, [r7, #20]
 8104660:	e001      	b.n	8104666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8104662:	2300      	movs	r3, #0
 8104664:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8104666:	697b      	ldr	r3, [r7, #20]
 8104668:	2b01      	cmp	r3, #1
 810466a:	d102      	bne.n	8104672 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810466c:	f000 fd10 	bl	8105090 <xTimerCreateTimerTask>
 8104670:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8104672:	697b      	ldr	r3, [r7, #20]
 8104674:	2b01      	cmp	r3, #1
 8104676:	d11b      	bne.n	81046b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8104678:	f04f 0350 	mov.w	r3, #80	; 0x50
 810467c:	f383 8811 	msr	BASEPRI, r3
 8104680:	f3bf 8f6f 	isb	sy
 8104684:	f3bf 8f4f 	dsb	sy
 8104688:	613b      	str	r3, [r7, #16]
}
 810468a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810468c:	4b15      	ldr	r3, [pc, #84]	; (81046e4 <vTaskStartScheduler+0xcc>)
 810468e:	681b      	ldr	r3, [r3, #0]
 8104690:	3354      	adds	r3, #84	; 0x54
 8104692:	4a15      	ldr	r2, [pc, #84]	; (81046e8 <vTaskStartScheduler+0xd0>)
 8104694:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8104696:	4b15      	ldr	r3, [pc, #84]	; (81046ec <vTaskStartScheduler+0xd4>)
 8104698:	f04f 32ff 	mov.w	r2, #4294967295
 810469c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810469e:	4b14      	ldr	r3, [pc, #80]	; (81046f0 <vTaskStartScheduler+0xd8>)
 81046a0:	2201      	movs	r2, #1
 81046a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81046a4:	4b13      	ldr	r3, [pc, #76]	; (81046f4 <vTaskStartScheduler+0xdc>)
 81046a6:	2200      	movs	r2, #0
 81046a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81046aa:	f7fe ff19 	bl	81034e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81046ae:	e00e      	b.n	81046ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81046b0:	697b      	ldr	r3, [r7, #20]
 81046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81046b6:	d10a      	bne.n	81046ce <vTaskStartScheduler+0xb6>
	__asm volatile
 81046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81046bc:	f383 8811 	msr	BASEPRI, r3
 81046c0:	f3bf 8f6f 	isb	sy
 81046c4:	f3bf 8f4f 	dsb	sy
 81046c8:	60fb      	str	r3, [r7, #12]
}
 81046ca:	bf00      	nop
 81046cc:	e7fe      	b.n	81046cc <vTaskStartScheduler+0xb4>
}
 81046ce:	bf00      	nop
 81046d0:	3718      	adds	r7, #24
 81046d2:	46bd      	mov	sp, r7
 81046d4:	bd80      	pop	{r7, pc}
 81046d6:	bf00      	nop
 81046d8:	0810595c 	.word	0x0810595c
 81046dc:	08104d1d 	.word	0x08104d1d
 81046e0:	10004a14 	.word	0x10004a14
 81046e4:	1000451c 	.word	0x1000451c
 81046e8:	10000014 	.word	0x10000014
 81046ec:	10004a10 	.word	0x10004a10
 81046f0:	100049fc 	.word	0x100049fc
 81046f4:	100049f4 	.word	0x100049f4

081046f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81046f8:	b480      	push	{r7}
 81046fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 81046fc:	4b04      	ldr	r3, [pc, #16]	; (8104710 <vTaskSuspendAll+0x18>)
 81046fe:	681b      	ldr	r3, [r3, #0]
 8104700:	3301      	adds	r3, #1
 8104702:	4a03      	ldr	r2, [pc, #12]	; (8104710 <vTaskSuspendAll+0x18>)
 8104704:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8104706:	bf00      	nop
 8104708:	46bd      	mov	sp, r7
 810470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810470e:	4770      	bx	lr
 8104710:	10004a18 	.word	0x10004a18

08104714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8104714:	b580      	push	{r7, lr}
 8104716:	b084      	sub	sp, #16
 8104718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810471a:	2300      	movs	r3, #0
 810471c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810471e:	2300      	movs	r3, #0
 8104720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8104722:	4b42      	ldr	r3, [pc, #264]	; (810482c <xTaskResumeAll+0x118>)
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	2b00      	cmp	r3, #0
 8104728:	d10a      	bne.n	8104740 <xTaskResumeAll+0x2c>
	__asm volatile
 810472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810472e:	f383 8811 	msr	BASEPRI, r3
 8104732:	f3bf 8f6f 	isb	sy
 8104736:	f3bf 8f4f 	dsb	sy
 810473a:	603b      	str	r3, [r7, #0]
}
 810473c:	bf00      	nop
 810473e:	e7fe      	b.n	810473e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8104740:	f7fe ff70 	bl	8103624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8104744:	4b39      	ldr	r3, [pc, #228]	; (810482c <xTaskResumeAll+0x118>)
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	3b01      	subs	r3, #1
 810474a:	4a38      	ldr	r2, [pc, #224]	; (810482c <xTaskResumeAll+0x118>)
 810474c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810474e:	4b37      	ldr	r3, [pc, #220]	; (810482c <xTaskResumeAll+0x118>)
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	2b00      	cmp	r3, #0
 8104754:	d162      	bne.n	810481c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8104756:	4b36      	ldr	r3, [pc, #216]	; (8104830 <xTaskResumeAll+0x11c>)
 8104758:	681b      	ldr	r3, [r3, #0]
 810475a:	2b00      	cmp	r3, #0
 810475c:	d05e      	beq.n	810481c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810475e:	e02f      	b.n	81047c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104760:	4b34      	ldr	r3, [pc, #208]	; (8104834 <xTaskResumeAll+0x120>)
 8104762:	68db      	ldr	r3, [r3, #12]
 8104764:	68db      	ldr	r3, [r3, #12]
 8104766:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8104768:	68fb      	ldr	r3, [r7, #12]
 810476a:	3318      	adds	r3, #24
 810476c:	4618      	mov	r0, r3
 810476e:	f7fe fe03 	bl	8103378 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104772:	68fb      	ldr	r3, [r7, #12]
 8104774:	3304      	adds	r3, #4
 8104776:	4618      	mov	r0, r3
 8104778:	f7fe fdfe 	bl	8103378 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810477c:	68fb      	ldr	r3, [r7, #12]
 810477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104780:	4b2d      	ldr	r3, [pc, #180]	; (8104838 <xTaskResumeAll+0x124>)
 8104782:	681b      	ldr	r3, [r3, #0]
 8104784:	429a      	cmp	r2, r3
 8104786:	d903      	bls.n	8104790 <xTaskResumeAll+0x7c>
 8104788:	68fb      	ldr	r3, [r7, #12]
 810478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810478c:	4a2a      	ldr	r2, [pc, #168]	; (8104838 <xTaskResumeAll+0x124>)
 810478e:	6013      	str	r3, [r2, #0]
 8104790:	68fb      	ldr	r3, [r7, #12]
 8104792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104794:	4613      	mov	r3, r2
 8104796:	009b      	lsls	r3, r3, #2
 8104798:	4413      	add	r3, r2
 810479a:	009b      	lsls	r3, r3, #2
 810479c:	4a27      	ldr	r2, [pc, #156]	; (810483c <xTaskResumeAll+0x128>)
 810479e:	441a      	add	r2, r3
 81047a0:	68fb      	ldr	r3, [r7, #12]
 81047a2:	3304      	adds	r3, #4
 81047a4:	4619      	mov	r1, r3
 81047a6:	4610      	mov	r0, r2
 81047a8:	f7fe fd89 	bl	81032be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81047ac:	68fb      	ldr	r3, [r7, #12]
 81047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81047b0:	4b23      	ldr	r3, [pc, #140]	; (8104840 <xTaskResumeAll+0x12c>)
 81047b2:	681b      	ldr	r3, [r3, #0]
 81047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047b6:	429a      	cmp	r2, r3
 81047b8:	d302      	bcc.n	81047c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 81047ba:	4b22      	ldr	r3, [pc, #136]	; (8104844 <xTaskResumeAll+0x130>)
 81047bc:	2201      	movs	r2, #1
 81047be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81047c0:	4b1c      	ldr	r3, [pc, #112]	; (8104834 <xTaskResumeAll+0x120>)
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	2b00      	cmp	r3, #0
 81047c6:	d1cb      	bne.n	8104760 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81047c8:	68fb      	ldr	r3, [r7, #12]
 81047ca:	2b00      	cmp	r3, #0
 81047cc:	d001      	beq.n	81047d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81047ce:	f000 fb5f 	bl	8104e90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81047d2:	4b1d      	ldr	r3, [pc, #116]	; (8104848 <xTaskResumeAll+0x134>)
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	2b00      	cmp	r3, #0
 81047dc:	d010      	beq.n	8104800 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81047de:	f000 f847 	bl	8104870 <xTaskIncrementTick>
 81047e2:	4603      	mov	r3, r0
 81047e4:	2b00      	cmp	r3, #0
 81047e6:	d002      	beq.n	81047ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 81047e8:	4b16      	ldr	r3, [pc, #88]	; (8104844 <xTaskResumeAll+0x130>)
 81047ea:	2201      	movs	r2, #1
 81047ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	3b01      	subs	r3, #1
 81047f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81047f4:	687b      	ldr	r3, [r7, #4]
 81047f6:	2b00      	cmp	r3, #0
 81047f8:	d1f1      	bne.n	81047de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 81047fa:	4b13      	ldr	r3, [pc, #76]	; (8104848 <xTaskResumeAll+0x134>)
 81047fc:	2200      	movs	r2, #0
 81047fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8104800:	4b10      	ldr	r3, [pc, #64]	; (8104844 <xTaskResumeAll+0x130>)
 8104802:	681b      	ldr	r3, [r3, #0]
 8104804:	2b00      	cmp	r3, #0
 8104806:	d009      	beq.n	810481c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8104808:	2301      	movs	r3, #1
 810480a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810480c:	4b0f      	ldr	r3, [pc, #60]	; (810484c <xTaskResumeAll+0x138>)
 810480e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104812:	601a      	str	r2, [r3, #0]
 8104814:	f3bf 8f4f 	dsb	sy
 8104818:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810481c:	f7fe ff32 	bl	8103684 <vPortExitCritical>

	return xAlreadyYielded;
 8104820:	68bb      	ldr	r3, [r7, #8]
}
 8104822:	4618      	mov	r0, r3
 8104824:	3710      	adds	r7, #16
 8104826:	46bd      	mov	sp, r7
 8104828:	bd80      	pop	{r7, pc}
 810482a:	bf00      	nop
 810482c:	10004a18 	.word	0x10004a18
 8104830:	100049f0 	.word	0x100049f0
 8104834:	100049b0 	.word	0x100049b0
 8104838:	100049f8 	.word	0x100049f8
 810483c:	10004520 	.word	0x10004520
 8104840:	1000451c 	.word	0x1000451c
 8104844:	10004a04 	.word	0x10004a04
 8104848:	10004a00 	.word	0x10004a00
 810484c:	e000ed04 	.word	0xe000ed04

08104850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8104850:	b480      	push	{r7}
 8104852:	b083      	sub	sp, #12
 8104854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8104856:	4b05      	ldr	r3, [pc, #20]	; (810486c <xTaskGetTickCount+0x1c>)
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810485c:	687b      	ldr	r3, [r7, #4]
}
 810485e:	4618      	mov	r0, r3
 8104860:	370c      	adds	r7, #12
 8104862:	46bd      	mov	sp, r7
 8104864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104868:	4770      	bx	lr
 810486a:	bf00      	nop
 810486c:	100049f4 	.word	0x100049f4

08104870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8104870:	b580      	push	{r7, lr}
 8104872:	b086      	sub	sp, #24
 8104874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8104876:	2300      	movs	r3, #0
 8104878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810487a:	4b4f      	ldr	r3, [pc, #316]	; (81049b8 <xTaskIncrementTick+0x148>)
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	2b00      	cmp	r3, #0
 8104880:	f040 808f 	bne.w	81049a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8104884:	4b4d      	ldr	r3, [pc, #308]	; (81049bc <xTaskIncrementTick+0x14c>)
 8104886:	681b      	ldr	r3, [r3, #0]
 8104888:	3301      	adds	r3, #1
 810488a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810488c:	4a4b      	ldr	r2, [pc, #300]	; (81049bc <xTaskIncrementTick+0x14c>)
 810488e:	693b      	ldr	r3, [r7, #16]
 8104890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8104892:	693b      	ldr	r3, [r7, #16]
 8104894:	2b00      	cmp	r3, #0
 8104896:	d120      	bne.n	81048da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8104898:	4b49      	ldr	r3, [pc, #292]	; (81049c0 <xTaskIncrementTick+0x150>)
 810489a:	681b      	ldr	r3, [r3, #0]
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	2b00      	cmp	r3, #0
 81048a0:	d00a      	beq.n	81048b8 <xTaskIncrementTick+0x48>
	__asm volatile
 81048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81048a6:	f383 8811 	msr	BASEPRI, r3
 81048aa:	f3bf 8f6f 	isb	sy
 81048ae:	f3bf 8f4f 	dsb	sy
 81048b2:	603b      	str	r3, [r7, #0]
}
 81048b4:	bf00      	nop
 81048b6:	e7fe      	b.n	81048b6 <xTaskIncrementTick+0x46>
 81048b8:	4b41      	ldr	r3, [pc, #260]	; (81049c0 <xTaskIncrementTick+0x150>)
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	60fb      	str	r3, [r7, #12]
 81048be:	4b41      	ldr	r3, [pc, #260]	; (81049c4 <xTaskIncrementTick+0x154>)
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	4a3f      	ldr	r2, [pc, #252]	; (81049c0 <xTaskIncrementTick+0x150>)
 81048c4:	6013      	str	r3, [r2, #0]
 81048c6:	4a3f      	ldr	r2, [pc, #252]	; (81049c4 <xTaskIncrementTick+0x154>)
 81048c8:	68fb      	ldr	r3, [r7, #12]
 81048ca:	6013      	str	r3, [r2, #0]
 81048cc:	4b3e      	ldr	r3, [pc, #248]	; (81049c8 <xTaskIncrementTick+0x158>)
 81048ce:	681b      	ldr	r3, [r3, #0]
 81048d0:	3301      	adds	r3, #1
 81048d2:	4a3d      	ldr	r2, [pc, #244]	; (81049c8 <xTaskIncrementTick+0x158>)
 81048d4:	6013      	str	r3, [r2, #0]
 81048d6:	f000 fadb 	bl	8104e90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81048da:	4b3c      	ldr	r3, [pc, #240]	; (81049cc <xTaskIncrementTick+0x15c>)
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	693a      	ldr	r2, [r7, #16]
 81048e0:	429a      	cmp	r2, r3
 81048e2:	d349      	bcc.n	8104978 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81048e4:	4b36      	ldr	r3, [pc, #216]	; (81049c0 <xTaskIncrementTick+0x150>)
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	2b00      	cmp	r3, #0
 81048ec:	d104      	bne.n	81048f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81048ee:	4b37      	ldr	r3, [pc, #220]	; (81049cc <xTaskIncrementTick+0x15c>)
 81048f0:	f04f 32ff 	mov.w	r2, #4294967295
 81048f4:	601a      	str	r2, [r3, #0]
					break;
 81048f6:	e03f      	b.n	8104978 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81048f8:	4b31      	ldr	r3, [pc, #196]	; (81049c0 <xTaskIncrementTick+0x150>)
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	68db      	ldr	r3, [r3, #12]
 81048fe:	68db      	ldr	r3, [r3, #12]
 8104900:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8104902:	68bb      	ldr	r3, [r7, #8]
 8104904:	685b      	ldr	r3, [r3, #4]
 8104906:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8104908:	693a      	ldr	r2, [r7, #16]
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	429a      	cmp	r2, r3
 810490e:	d203      	bcs.n	8104918 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8104910:	4a2e      	ldr	r2, [pc, #184]	; (81049cc <xTaskIncrementTick+0x15c>)
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8104916:	e02f      	b.n	8104978 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104918:	68bb      	ldr	r3, [r7, #8]
 810491a:	3304      	adds	r3, #4
 810491c:	4618      	mov	r0, r3
 810491e:	f7fe fd2b 	bl	8103378 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8104922:	68bb      	ldr	r3, [r7, #8]
 8104924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104926:	2b00      	cmp	r3, #0
 8104928:	d004      	beq.n	8104934 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810492a:	68bb      	ldr	r3, [r7, #8]
 810492c:	3318      	adds	r3, #24
 810492e:	4618      	mov	r0, r3
 8104930:	f7fe fd22 	bl	8103378 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8104934:	68bb      	ldr	r3, [r7, #8]
 8104936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104938:	4b25      	ldr	r3, [pc, #148]	; (81049d0 <xTaskIncrementTick+0x160>)
 810493a:	681b      	ldr	r3, [r3, #0]
 810493c:	429a      	cmp	r2, r3
 810493e:	d903      	bls.n	8104948 <xTaskIncrementTick+0xd8>
 8104940:	68bb      	ldr	r3, [r7, #8]
 8104942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104944:	4a22      	ldr	r2, [pc, #136]	; (81049d0 <xTaskIncrementTick+0x160>)
 8104946:	6013      	str	r3, [r2, #0]
 8104948:	68bb      	ldr	r3, [r7, #8]
 810494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810494c:	4613      	mov	r3, r2
 810494e:	009b      	lsls	r3, r3, #2
 8104950:	4413      	add	r3, r2
 8104952:	009b      	lsls	r3, r3, #2
 8104954:	4a1f      	ldr	r2, [pc, #124]	; (81049d4 <xTaskIncrementTick+0x164>)
 8104956:	441a      	add	r2, r3
 8104958:	68bb      	ldr	r3, [r7, #8]
 810495a:	3304      	adds	r3, #4
 810495c:	4619      	mov	r1, r3
 810495e:	4610      	mov	r0, r2
 8104960:	f7fe fcad 	bl	81032be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8104964:	68bb      	ldr	r3, [r7, #8]
 8104966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104968:	4b1b      	ldr	r3, [pc, #108]	; (81049d8 <xTaskIncrementTick+0x168>)
 810496a:	681b      	ldr	r3, [r3, #0]
 810496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810496e:	429a      	cmp	r2, r3
 8104970:	d3b8      	bcc.n	81048e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8104972:	2301      	movs	r3, #1
 8104974:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8104976:	e7b5      	b.n	81048e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8104978:	4b17      	ldr	r3, [pc, #92]	; (81049d8 <xTaskIncrementTick+0x168>)
 810497a:	681b      	ldr	r3, [r3, #0]
 810497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810497e:	4915      	ldr	r1, [pc, #84]	; (81049d4 <xTaskIncrementTick+0x164>)
 8104980:	4613      	mov	r3, r2
 8104982:	009b      	lsls	r3, r3, #2
 8104984:	4413      	add	r3, r2
 8104986:	009b      	lsls	r3, r3, #2
 8104988:	440b      	add	r3, r1
 810498a:	681b      	ldr	r3, [r3, #0]
 810498c:	2b01      	cmp	r3, #1
 810498e:	d901      	bls.n	8104994 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8104990:	2301      	movs	r3, #1
 8104992:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8104994:	4b11      	ldr	r3, [pc, #68]	; (81049dc <xTaskIncrementTick+0x16c>)
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	2b00      	cmp	r3, #0
 810499a:	d007      	beq.n	81049ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 810499c:	2301      	movs	r3, #1
 810499e:	617b      	str	r3, [r7, #20]
 81049a0:	e004      	b.n	81049ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81049a2:	4b0f      	ldr	r3, [pc, #60]	; (81049e0 <xTaskIncrementTick+0x170>)
 81049a4:	681b      	ldr	r3, [r3, #0]
 81049a6:	3301      	adds	r3, #1
 81049a8:	4a0d      	ldr	r2, [pc, #52]	; (81049e0 <xTaskIncrementTick+0x170>)
 81049aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81049ac:	697b      	ldr	r3, [r7, #20]
}
 81049ae:	4618      	mov	r0, r3
 81049b0:	3718      	adds	r7, #24
 81049b2:	46bd      	mov	sp, r7
 81049b4:	bd80      	pop	{r7, pc}
 81049b6:	bf00      	nop
 81049b8:	10004a18 	.word	0x10004a18
 81049bc:	100049f4 	.word	0x100049f4
 81049c0:	100049a8 	.word	0x100049a8
 81049c4:	100049ac 	.word	0x100049ac
 81049c8:	10004a08 	.word	0x10004a08
 81049cc:	10004a10 	.word	0x10004a10
 81049d0:	100049f8 	.word	0x100049f8
 81049d4:	10004520 	.word	0x10004520
 81049d8:	1000451c 	.word	0x1000451c
 81049dc:	10004a04 	.word	0x10004a04
 81049e0:	10004a00 	.word	0x10004a00

081049e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81049e4:	b480      	push	{r7}
 81049e6:	b085      	sub	sp, #20
 81049e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81049ea:	4b2a      	ldr	r3, [pc, #168]	; (8104a94 <vTaskSwitchContext+0xb0>)
 81049ec:	681b      	ldr	r3, [r3, #0]
 81049ee:	2b00      	cmp	r3, #0
 81049f0:	d003      	beq.n	81049fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81049f2:	4b29      	ldr	r3, [pc, #164]	; (8104a98 <vTaskSwitchContext+0xb4>)
 81049f4:	2201      	movs	r2, #1
 81049f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81049f8:	e046      	b.n	8104a88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 81049fa:	4b27      	ldr	r3, [pc, #156]	; (8104a98 <vTaskSwitchContext+0xb4>)
 81049fc:	2200      	movs	r2, #0
 81049fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104a00:	4b26      	ldr	r3, [pc, #152]	; (8104a9c <vTaskSwitchContext+0xb8>)
 8104a02:	681b      	ldr	r3, [r3, #0]
 8104a04:	60fb      	str	r3, [r7, #12]
 8104a06:	e010      	b.n	8104a2a <vTaskSwitchContext+0x46>
 8104a08:	68fb      	ldr	r3, [r7, #12]
 8104a0a:	2b00      	cmp	r3, #0
 8104a0c:	d10a      	bne.n	8104a24 <vTaskSwitchContext+0x40>
	__asm volatile
 8104a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104a12:	f383 8811 	msr	BASEPRI, r3
 8104a16:	f3bf 8f6f 	isb	sy
 8104a1a:	f3bf 8f4f 	dsb	sy
 8104a1e:	607b      	str	r3, [r7, #4]
}
 8104a20:	bf00      	nop
 8104a22:	e7fe      	b.n	8104a22 <vTaskSwitchContext+0x3e>
 8104a24:	68fb      	ldr	r3, [r7, #12]
 8104a26:	3b01      	subs	r3, #1
 8104a28:	60fb      	str	r3, [r7, #12]
 8104a2a:	491d      	ldr	r1, [pc, #116]	; (8104aa0 <vTaskSwitchContext+0xbc>)
 8104a2c:	68fa      	ldr	r2, [r7, #12]
 8104a2e:	4613      	mov	r3, r2
 8104a30:	009b      	lsls	r3, r3, #2
 8104a32:	4413      	add	r3, r2
 8104a34:	009b      	lsls	r3, r3, #2
 8104a36:	440b      	add	r3, r1
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	2b00      	cmp	r3, #0
 8104a3c:	d0e4      	beq.n	8104a08 <vTaskSwitchContext+0x24>
 8104a3e:	68fa      	ldr	r2, [r7, #12]
 8104a40:	4613      	mov	r3, r2
 8104a42:	009b      	lsls	r3, r3, #2
 8104a44:	4413      	add	r3, r2
 8104a46:	009b      	lsls	r3, r3, #2
 8104a48:	4a15      	ldr	r2, [pc, #84]	; (8104aa0 <vTaskSwitchContext+0xbc>)
 8104a4a:	4413      	add	r3, r2
 8104a4c:	60bb      	str	r3, [r7, #8]
 8104a4e:	68bb      	ldr	r3, [r7, #8]
 8104a50:	685b      	ldr	r3, [r3, #4]
 8104a52:	685a      	ldr	r2, [r3, #4]
 8104a54:	68bb      	ldr	r3, [r7, #8]
 8104a56:	605a      	str	r2, [r3, #4]
 8104a58:	68bb      	ldr	r3, [r7, #8]
 8104a5a:	685a      	ldr	r2, [r3, #4]
 8104a5c:	68bb      	ldr	r3, [r7, #8]
 8104a5e:	3308      	adds	r3, #8
 8104a60:	429a      	cmp	r2, r3
 8104a62:	d104      	bne.n	8104a6e <vTaskSwitchContext+0x8a>
 8104a64:	68bb      	ldr	r3, [r7, #8]
 8104a66:	685b      	ldr	r3, [r3, #4]
 8104a68:	685a      	ldr	r2, [r3, #4]
 8104a6a:	68bb      	ldr	r3, [r7, #8]
 8104a6c:	605a      	str	r2, [r3, #4]
 8104a6e:	68bb      	ldr	r3, [r7, #8]
 8104a70:	685b      	ldr	r3, [r3, #4]
 8104a72:	68db      	ldr	r3, [r3, #12]
 8104a74:	4a0b      	ldr	r2, [pc, #44]	; (8104aa4 <vTaskSwitchContext+0xc0>)
 8104a76:	6013      	str	r3, [r2, #0]
 8104a78:	4a08      	ldr	r2, [pc, #32]	; (8104a9c <vTaskSwitchContext+0xb8>)
 8104a7a:	68fb      	ldr	r3, [r7, #12]
 8104a7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8104a7e:	4b09      	ldr	r3, [pc, #36]	; (8104aa4 <vTaskSwitchContext+0xc0>)
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	3354      	adds	r3, #84	; 0x54
 8104a84:	4a08      	ldr	r2, [pc, #32]	; (8104aa8 <vTaskSwitchContext+0xc4>)
 8104a86:	6013      	str	r3, [r2, #0]
}
 8104a88:	bf00      	nop
 8104a8a:	3714      	adds	r7, #20
 8104a8c:	46bd      	mov	sp, r7
 8104a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a92:	4770      	bx	lr
 8104a94:	10004a18 	.word	0x10004a18
 8104a98:	10004a04 	.word	0x10004a04
 8104a9c:	100049f8 	.word	0x100049f8
 8104aa0:	10004520 	.word	0x10004520
 8104aa4:	1000451c 	.word	0x1000451c
 8104aa8:	10000014 	.word	0x10000014

08104aac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8104aac:	b580      	push	{r7, lr}
 8104aae:	b084      	sub	sp, #16
 8104ab0:	af00      	add	r7, sp, #0
 8104ab2:	6078      	str	r0, [r7, #4]
 8104ab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	2b00      	cmp	r3, #0
 8104aba:	d10a      	bne.n	8104ad2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8104abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104ac0:	f383 8811 	msr	BASEPRI, r3
 8104ac4:	f3bf 8f6f 	isb	sy
 8104ac8:	f3bf 8f4f 	dsb	sy
 8104acc:	60fb      	str	r3, [r7, #12]
}
 8104ace:	bf00      	nop
 8104ad0:	e7fe      	b.n	8104ad0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8104ad2:	4b07      	ldr	r3, [pc, #28]	; (8104af0 <vTaskPlaceOnEventList+0x44>)
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	3318      	adds	r3, #24
 8104ad8:	4619      	mov	r1, r3
 8104ada:	6878      	ldr	r0, [r7, #4]
 8104adc:	f7fe fc13 	bl	8103306 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8104ae0:	2101      	movs	r1, #1
 8104ae2:	6838      	ldr	r0, [r7, #0]
 8104ae4:	f000 fa80 	bl	8104fe8 <prvAddCurrentTaskToDelayedList>
}
 8104ae8:	bf00      	nop
 8104aea:	3710      	adds	r7, #16
 8104aec:	46bd      	mov	sp, r7
 8104aee:	bd80      	pop	{r7, pc}
 8104af0:	1000451c 	.word	0x1000451c

08104af4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8104af4:	b580      	push	{r7, lr}
 8104af6:	b086      	sub	sp, #24
 8104af8:	af00      	add	r7, sp, #0
 8104afa:	60f8      	str	r0, [r7, #12]
 8104afc:	60b9      	str	r1, [r7, #8]
 8104afe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8104b00:	68fb      	ldr	r3, [r7, #12]
 8104b02:	2b00      	cmp	r3, #0
 8104b04:	d10a      	bne.n	8104b1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8104b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b0a:	f383 8811 	msr	BASEPRI, r3
 8104b0e:	f3bf 8f6f 	isb	sy
 8104b12:	f3bf 8f4f 	dsb	sy
 8104b16:	617b      	str	r3, [r7, #20]
}
 8104b18:	bf00      	nop
 8104b1a:	e7fe      	b.n	8104b1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8104b1c:	4b0a      	ldr	r3, [pc, #40]	; (8104b48 <vTaskPlaceOnEventListRestricted+0x54>)
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	3318      	adds	r3, #24
 8104b22:	4619      	mov	r1, r3
 8104b24:	68f8      	ldr	r0, [r7, #12]
 8104b26:	f7fe fbca 	bl	81032be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	2b00      	cmp	r3, #0
 8104b2e:	d002      	beq.n	8104b36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8104b30:	f04f 33ff 	mov.w	r3, #4294967295
 8104b34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8104b36:	6879      	ldr	r1, [r7, #4]
 8104b38:	68b8      	ldr	r0, [r7, #8]
 8104b3a:	f000 fa55 	bl	8104fe8 <prvAddCurrentTaskToDelayedList>
	}
 8104b3e:	bf00      	nop
 8104b40:	3718      	adds	r7, #24
 8104b42:	46bd      	mov	sp, r7
 8104b44:	bd80      	pop	{r7, pc}
 8104b46:	bf00      	nop
 8104b48:	1000451c 	.word	0x1000451c

08104b4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8104b4c:	b580      	push	{r7, lr}
 8104b4e:	b086      	sub	sp, #24
 8104b50:	af00      	add	r7, sp, #0
 8104b52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	68db      	ldr	r3, [r3, #12]
 8104b58:	68db      	ldr	r3, [r3, #12]
 8104b5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8104b5c:	693b      	ldr	r3, [r7, #16]
 8104b5e:	2b00      	cmp	r3, #0
 8104b60:	d10a      	bne.n	8104b78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8104b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b66:	f383 8811 	msr	BASEPRI, r3
 8104b6a:	f3bf 8f6f 	isb	sy
 8104b6e:	f3bf 8f4f 	dsb	sy
 8104b72:	60fb      	str	r3, [r7, #12]
}
 8104b74:	bf00      	nop
 8104b76:	e7fe      	b.n	8104b76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8104b78:	693b      	ldr	r3, [r7, #16]
 8104b7a:	3318      	adds	r3, #24
 8104b7c:	4618      	mov	r0, r3
 8104b7e:	f7fe fbfb 	bl	8103378 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8104b82:	4b1e      	ldr	r3, [pc, #120]	; (8104bfc <xTaskRemoveFromEventList+0xb0>)
 8104b84:	681b      	ldr	r3, [r3, #0]
 8104b86:	2b00      	cmp	r3, #0
 8104b88:	d11d      	bne.n	8104bc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8104b8a:	693b      	ldr	r3, [r7, #16]
 8104b8c:	3304      	adds	r3, #4
 8104b8e:	4618      	mov	r0, r3
 8104b90:	f7fe fbf2 	bl	8103378 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8104b94:	693b      	ldr	r3, [r7, #16]
 8104b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104b98:	4b19      	ldr	r3, [pc, #100]	; (8104c00 <xTaskRemoveFromEventList+0xb4>)
 8104b9a:	681b      	ldr	r3, [r3, #0]
 8104b9c:	429a      	cmp	r2, r3
 8104b9e:	d903      	bls.n	8104ba8 <xTaskRemoveFromEventList+0x5c>
 8104ba0:	693b      	ldr	r3, [r7, #16]
 8104ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ba4:	4a16      	ldr	r2, [pc, #88]	; (8104c00 <xTaskRemoveFromEventList+0xb4>)
 8104ba6:	6013      	str	r3, [r2, #0]
 8104ba8:	693b      	ldr	r3, [r7, #16]
 8104baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104bac:	4613      	mov	r3, r2
 8104bae:	009b      	lsls	r3, r3, #2
 8104bb0:	4413      	add	r3, r2
 8104bb2:	009b      	lsls	r3, r3, #2
 8104bb4:	4a13      	ldr	r2, [pc, #76]	; (8104c04 <xTaskRemoveFromEventList+0xb8>)
 8104bb6:	441a      	add	r2, r3
 8104bb8:	693b      	ldr	r3, [r7, #16]
 8104bba:	3304      	adds	r3, #4
 8104bbc:	4619      	mov	r1, r3
 8104bbe:	4610      	mov	r0, r2
 8104bc0:	f7fe fb7d 	bl	81032be <vListInsertEnd>
 8104bc4:	e005      	b.n	8104bd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8104bc6:	693b      	ldr	r3, [r7, #16]
 8104bc8:	3318      	adds	r3, #24
 8104bca:	4619      	mov	r1, r3
 8104bcc:	480e      	ldr	r0, [pc, #56]	; (8104c08 <xTaskRemoveFromEventList+0xbc>)
 8104bce:	f7fe fb76 	bl	81032be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8104bd2:	693b      	ldr	r3, [r7, #16]
 8104bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104bd6:	4b0d      	ldr	r3, [pc, #52]	; (8104c0c <xTaskRemoveFromEventList+0xc0>)
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bdc:	429a      	cmp	r2, r3
 8104bde:	d905      	bls.n	8104bec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8104be0:	2301      	movs	r3, #1
 8104be2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8104be4:	4b0a      	ldr	r3, [pc, #40]	; (8104c10 <xTaskRemoveFromEventList+0xc4>)
 8104be6:	2201      	movs	r2, #1
 8104be8:	601a      	str	r2, [r3, #0]
 8104bea:	e001      	b.n	8104bf0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8104bec:	2300      	movs	r3, #0
 8104bee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8104bf0:	697b      	ldr	r3, [r7, #20]
}
 8104bf2:	4618      	mov	r0, r3
 8104bf4:	3718      	adds	r7, #24
 8104bf6:	46bd      	mov	sp, r7
 8104bf8:	bd80      	pop	{r7, pc}
 8104bfa:	bf00      	nop
 8104bfc:	10004a18 	.word	0x10004a18
 8104c00:	100049f8 	.word	0x100049f8
 8104c04:	10004520 	.word	0x10004520
 8104c08:	100049b0 	.word	0x100049b0
 8104c0c:	1000451c 	.word	0x1000451c
 8104c10:	10004a04 	.word	0x10004a04

08104c14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8104c14:	b480      	push	{r7}
 8104c16:	b083      	sub	sp, #12
 8104c18:	af00      	add	r7, sp, #0
 8104c1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8104c1c:	4b06      	ldr	r3, [pc, #24]	; (8104c38 <vTaskInternalSetTimeOutState+0x24>)
 8104c1e:	681a      	ldr	r2, [r3, #0]
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8104c24:	4b05      	ldr	r3, [pc, #20]	; (8104c3c <vTaskInternalSetTimeOutState+0x28>)
 8104c26:	681a      	ldr	r2, [r3, #0]
 8104c28:	687b      	ldr	r3, [r7, #4]
 8104c2a:	605a      	str	r2, [r3, #4]
}
 8104c2c:	bf00      	nop
 8104c2e:	370c      	adds	r7, #12
 8104c30:	46bd      	mov	sp, r7
 8104c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c36:	4770      	bx	lr
 8104c38:	10004a08 	.word	0x10004a08
 8104c3c:	100049f4 	.word	0x100049f4

08104c40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8104c40:	b580      	push	{r7, lr}
 8104c42:	b088      	sub	sp, #32
 8104c44:	af00      	add	r7, sp, #0
 8104c46:	6078      	str	r0, [r7, #4]
 8104c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8104c4a:	687b      	ldr	r3, [r7, #4]
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d10a      	bne.n	8104c66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8104c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104c54:	f383 8811 	msr	BASEPRI, r3
 8104c58:	f3bf 8f6f 	isb	sy
 8104c5c:	f3bf 8f4f 	dsb	sy
 8104c60:	613b      	str	r3, [r7, #16]
}
 8104c62:	bf00      	nop
 8104c64:	e7fe      	b.n	8104c64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8104c66:	683b      	ldr	r3, [r7, #0]
 8104c68:	2b00      	cmp	r3, #0
 8104c6a:	d10a      	bne.n	8104c82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8104c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104c70:	f383 8811 	msr	BASEPRI, r3
 8104c74:	f3bf 8f6f 	isb	sy
 8104c78:	f3bf 8f4f 	dsb	sy
 8104c7c:	60fb      	str	r3, [r7, #12]
}
 8104c7e:	bf00      	nop
 8104c80:	e7fe      	b.n	8104c80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8104c82:	f7fe fccf 	bl	8103624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8104c86:	4b1d      	ldr	r3, [pc, #116]	; (8104cfc <xTaskCheckForTimeOut+0xbc>)
 8104c88:	681b      	ldr	r3, [r3, #0]
 8104c8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8104c8c:	687b      	ldr	r3, [r7, #4]
 8104c8e:	685b      	ldr	r3, [r3, #4]
 8104c90:	69ba      	ldr	r2, [r7, #24]
 8104c92:	1ad3      	subs	r3, r2, r3
 8104c94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8104c96:	683b      	ldr	r3, [r7, #0]
 8104c98:	681b      	ldr	r3, [r3, #0]
 8104c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104c9e:	d102      	bne.n	8104ca6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8104ca0:	2300      	movs	r3, #0
 8104ca2:	61fb      	str	r3, [r7, #28]
 8104ca4:	e023      	b.n	8104cee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	681a      	ldr	r2, [r3, #0]
 8104caa:	4b15      	ldr	r3, [pc, #84]	; (8104d00 <xTaskCheckForTimeOut+0xc0>)
 8104cac:	681b      	ldr	r3, [r3, #0]
 8104cae:	429a      	cmp	r2, r3
 8104cb0:	d007      	beq.n	8104cc2 <xTaskCheckForTimeOut+0x82>
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	685b      	ldr	r3, [r3, #4]
 8104cb6:	69ba      	ldr	r2, [r7, #24]
 8104cb8:	429a      	cmp	r2, r3
 8104cba:	d302      	bcc.n	8104cc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8104cbc:	2301      	movs	r3, #1
 8104cbe:	61fb      	str	r3, [r7, #28]
 8104cc0:	e015      	b.n	8104cee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8104cc2:	683b      	ldr	r3, [r7, #0]
 8104cc4:	681b      	ldr	r3, [r3, #0]
 8104cc6:	697a      	ldr	r2, [r7, #20]
 8104cc8:	429a      	cmp	r2, r3
 8104cca:	d20b      	bcs.n	8104ce4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8104ccc:	683b      	ldr	r3, [r7, #0]
 8104cce:	681a      	ldr	r2, [r3, #0]
 8104cd0:	697b      	ldr	r3, [r7, #20]
 8104cd2:	1ad2      	subs	r2, r2, r3
 8104cd4:	683b      	ldr	r3, [r7, #0]
 8104cd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8104cd8:	6878      	ldr	r0, [r7, #4]
 8104cda:	f7ff ff9b 	bl	8104c14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8104cde:	2300      	movs	r3, #0
 8104ce0:	61fb      	str	r3, [r7, #28]
 8104ce2:	e004      	b.n	8104cee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8104ce4:	683b      	ldr	r3, [r7, #0]
 8104ce6:	2200      	movs	r2, #0
 8104ce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8104cea:	2301      	movs	r3, #1
 8104cec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8104cee:	f7fe fcc9 	bl	8103684 <vPortExitCritical>

	return xReturn;
 8104cf2:	69fb      	ldr	r3, [r7, #28]
}
 8104cf4:	4618      	mov	r0, r3
 8104cf6:	3720      	adds	r7, #32
 8104cf8:	46bd      	mov	sp, r7
 8104cfa:	bd80      	pop	{r7, pc}
 8104cfc:	100049f4 	.word	0x100049f4
 8104d00:	10004a08 	.word	0x10004a08

08104d04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8104d04:	b480      	push	{r7}
 8104d06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8104d08:	4b03      	ldr	r3, [pc, #12]	; (8104d18 <vTaskMissedYield+0x14>)
 8104d0a:	2201      	movs	r2, #1
 8104d0c:	601a      	str	r2, [r3, #0]
}
 8104d0e:	bf00      	nop
 8104d10:	46bd      	mov	sp, r7
 8104d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d16:	4770      	bx	lr
 8104d18:	10004a04 	.word	0x10004a04

08104d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8104d1c:	b580      	push	{r7, lr}
 8104d1e:	b082      	sub	sp, #8
 8104d20:	af00      	add	r7, sp, #0
 8104d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8104d24:	f000 f852 	bl	8104dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8104d28:	4b06      	ldr	r3, [pc, #24]	; (8104d44 <prvIdleTask+0x28>)
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	2b01      	cmp	r3, #1
 8104d2e:	d9f9      	bls.n	8104d24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8104d30:	4b05      	ldr	r3, [pc, #20]	; (8104d48 <prvIdleTask+0x2c>)
 8104d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104d36:	601a      	str	r2, [r3, #0]
 8104d38:	f3bf 8f4f 	dsb	sy
 8104d3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8104d40:	e7f0      	b.n	8104d24 <prvIdleTask+0x8>
 8104d42:	bf00      	nop
 8104d44:	10004520 	.word	0x10004520
 8104d48:	e000ed04 	.word	0xe000ed04

08104d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8104d4c:	b580      	push	{r7, lr}
 8104d4e:	b082      	sub	sp, #8
 8104d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8104d52:	2300      	movs	r3, #0
 8104d54:	607b      	str	r3, [r7, #4]
 8104d56:	e00c      	b.n	8104d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8104d58:	687a      	ldr	r2, [r7, #4]
 8104d5a:	4613      	mov	r3, r2
 8104d5c:	009b      	lsls	r3, r3, #2
 8104d5e:	4413      	add	r3, r2
 8104d60:	009b      	lsls	r3, r3, #2
 8104d62:	4a12      	ldr	r2, [pc, #72]	; (8104dac <prvInitialiseTaskLists+0x60>)
 8104d64:	4413      	add	r3, r2
 8104d66:	4618      	mov	r0, r3
 8104d68:	f7fe fa7c 	bl	8103264 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	3301      	adds	r3, #1
 8104d70:	607b      	str	r3, [r7, #4]
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	2b37      	cmp	r3, #55	; 0x37
 8104d76:	d9ef      	bls.n	8104d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8104d78:	480d      	ldr	r0, [pc, #52]	; (8104db0 <prvInitialiseTaskLists+0x64>)
 8104d7a:	f7fe fa73 	bl	8103264 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8104d7e:	480d      	ldr	r0, [pc, #52]	; (8104db4 <prvInitialiseTaskLists+0x68>)
 8104d80:	f7fe fa70 	bl	8103264 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8104d84:	480c      	ldr	r0, [pc, #48]	; (8104db8 <prvInitialiseTaskLists+0x6c>)
 8104d86:	f7fe fa6d 	bl	8103264 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8104d8a:	480c      	ldr	r0, [pc, #48]	; (8104dbc <prvInitialiseTaskLists+0x70>)
 8104d8c:	f7fe fa6a 	bl	8103264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8104d90:	480b      	ldr	r0, [pc, #44]	; (8104dc0 <prvInitialiseTaskLists+0x74>)
 8104d92:	f7fe fa67 	bl	8103264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8104d96:	4b0b      	ldr	r3, [pc, #44]	; (8104dc4 <prvInitialiseTaskLists+0x78>)
 8104d98:	4a05      	ldr	r2, [pc, #20]	; (8104db0 <prvInitialiseTaskLists+0x64>)
 8104d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8104d9c:	4b0a      	ldr	r3, [pc, #40]	; (8104dc8 <prvInitialiseTaskLists+0x7c>)
 8104d9e:	4a05      	ldr	r2, [pc, #20]	; (8104db4 <prvInitialiseTaskLists+0x68>)
 8104da0:	601a      	str	r2, [r3, #0]
}
 8104da2:	bf00      	nop
 8104da4:	3708      	adds	r7, #8
 8104da6:	46bd      	mov	sp, r7
 8104da8:	bd80      	pop	{r7, pc}
 8104daa:	bf00      	nop
 8104dac:	10004520 	.word	0x10004520
 8104db0:	10004980 	.word	0x10004980
 8104db4:	10004994 	.word	0x10004994
 8104db8:	100049b0 	.word	0x100049b0
 8104dbc:	100049c4 	.word	0x100049c4
 8104dc0:	100049dc 	.word	0x100049dc
 8104dc4:	100049a8 	.word	0x100049a8
 8104dc8:	100049ac 	.word	0x100049ac

08104dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8104dcc:	b580      	push	{r7, lr}
 8104dce:	b082      	sub	sp, #8
 8104dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8104dd2:	e019      	b.n	8104e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8104dd4:	f7fe fc26 	bl	8103624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104dd8:	4b10      	ldr	r3, [pc, #64]	; (8104e1c <prvCheckTasksWaitingTermination+0x50>)
 8104dda:	68db      	ldr	r3, [r3, #12]
 8104ddc:	68db      	ldr	r3, [r3, #12]
 8104dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	3304      	adds	r3, #4
 8104de4:	4618      	mov	r0, r3
 8104de6:	f7fe fac7 	bl	8103378 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8104dea:	4b0d      	ldr	r3, [pc, #52]	; (8104e20 <prvCheckTasksWaitingTermination+0x54>)
 8104dec:	681b      	ldr	r3, [r3, #0]
 8104dee:	3b01      	subs	r3, #1
 8104df0:	4a0b      	ldr	r2, [pc, #44]	; (8104e20 <prvCheckTasksWaitingTermination+0x54>)
 8104df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8104df4:	4b0b      	ldr	r3, [pc, #44]	; (8104e24 <prvCheckTasksWaitingTermination+0x58>)
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	3b01      	subs	r3, #1
 8104dfa:	4a0a      	ldr	r2, [pc, #40]	; (8104e24 <prvCheckTasksWaitingTermination+0x58>)
 8104dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8104dfe:	f7fe fc41 	bl	8103684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8104e02:	6878      	ldr	r0, [r7, #4]
 8104e04:	f000 f810 	bl	8104e28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8104e08:	4b06      	ldr	r3, [pc, #24]	; (8104e24 <prvCheckTasksWaitingTermination+0x58>)
 8104e0a:	681b      	ldr	r3, [r3, #0]
 8104e0c:	2b00      	cmp	r3, #0
 8104e0e:	d1e1      	bne.n	8104dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8104e10:	bf00      	nop
 8104e12:	bf00      	nop
 8104e14:	3708      	adds	r7, #8
 8104e16:	46bd      	mov	sp, r7
 8104e18:	bd80      	pop	{r7, pc}
 8104e1a:	bf00      	nop
 8104e1c:	100049c4 	.word	0x100049c4
 8104e20:	100049f0 	.word	0x100049f0
 8104e24:	100049d8 	.word	0x100049d8

08104e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8104e28:	b580      	push	{r7, lr}
 8104e2a:	b084      	sub	sp, #16
 8104e2c:	af00      	add	r7, sp, #0
 8104e2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	3354      	adds	r3, #84	; 0x54
 8104e34:	4618      	mov	r0, r3
 8104e36:	f000 fcc3 	bl	81057c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8104e40:	2b00      	cmp	r3, #0
 8104e42:	d108      	bne.n	8104e56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104e48:	4618      	mov	r0, r3
 8104e4a:	f7fe f8ed 	bl	8103028 <vPortFree>
				vPortFree( pxTCB );
 8104e4e:	6878      	ldr	r0, [r7, #4]
 8104e50:	f7fe f8ea 	bl	8103028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8104e54:	e018      	b.n	8104e88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8104e5c:	2b01      	cmp	r3, #1
 8104e5e:	d103      	bne.n	8104e68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8104e60:	6878      	ldr	r0, [r7, #4]
 8104e62:	f7fe f8e1 	bl	8103028 <vPortFree>
	}
 8104e66:	e00f      	b.n	8104e88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8104e6e:	2b02      	cmp	r3, #2
 8104e70:	d00a      	beq.n	8104e88 <prvDeleteTCB+0x60>
	__asm volatile
 8104e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104e76:	f383 8811 	msr	BASEPRI, r3
 8104e7a:	f3bf 8f6f 	isb	sy
 8104e7e:	f3bf 8f4f 	dsb	sy
 8104e82:	60fb      	str	r3, [r7, #12]
}
 8104e84:	bf00      	nop
 8104e86:	e7fe      	b.n	8104e86 <prvDeleteTCB+0x5e>
	}
 8104e88:	bf00      	nop
 8104e8a:	3710      	adds	r7, #16
 8104e8c:	46bd      	mov	sp, r7
 8104e8e:	bd80      	pop	{r7, pc}

08104e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8104e90:	b480      	push	{r7}
 8104e92:	b083      	sub	sp, #12
 8104e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8104e96:	4b0c      	ldr	r3, [pc, #48]	; (8104ec8 <prvResetNextTaskUnblockTime+0x38>)
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	2b00      	cmp	r3, #0
 8104e9e:	d104      	bne.n	8104eaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8104ea0:	4b0a      	ldr	r3, [pc, #40]	; (8104ecc <prvResetNextTaskUnblockTime+0x3c>)
 8104ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8104ea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8104ea8:	e008      	b.n	8104ebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104eaa:	4b07      	ldr	r3, [pc, #28]	; (8104ec8 <prvResetNextTaskUnblockTime+0x38>)
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	68db      	ldr	r3, [r3, #12]
 8104eb0:	68db      	ldr	r3, [r3, #12]
 8104eb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	685b      	ldr	r3, [r3, #4]
 8104eb8:	4a04      	ldr	r2, [pc, #16]	; (8104ecc <prvResetNextTaskUnblockTime+0x3c>)
 8104eba:	6013      	str	r3, [r2, #0]
}
 8104ebc:	bf00      	nop
 8104ebe:	370c      	adds	r7, #12
 8104ec0:	46bd      	mov	sp, r7
 8104ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec6:	4770      	bx	lr
 8104ec8:	100049a8 	.word	0x100049a8
 8104ecc:	10004a10 	.word	0x10004a10

08104ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8104ed0:	b480      	push	{r7}
 8104ed2:	b083      	sub	sp, #12
 8104ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8104ed6:	4b0b      	ldr	r3, [pc, #44]	; (8104f04 <xTaskGetSchedulerState+0x34>)
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	2b00      	cmp	r3, #0
 8104edc:	d102      	bne.n	8104ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8104ede:	2301      	movs	r3, #1
 8104ee0:	607b      	str	r3, [r7, #4]
 8104ee2:	e008      	b.n	8104ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8104ee4:	4b08      	ldr	r3, [pc, #32]	; (8104f08 <xTaskGetSchedulerState+0x38>)
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	2b00      	cmp	r3, #0
 8104eea:	d102      	bne.n	8104ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8104eec:	2302      	movs	r3, #2
 8104eee:	607b      	str	r3, [r7, #4]
 8104ef0:	e001      	b.n	8104ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8104ef2:	2300      	movs	r3, #0
 8104ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8104ef6:	687b      	ldr	r3, [r7, #4]
	}
 8104ef8:	4618      	mov	r0, r3
 8104efa:	370c      	adds	r7, #12
 8104efc:	46bd      	mov	sp, r7
 8104efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f02:	4770      	bx	lr
 8104f04:	100049fc 	.word	0x100049fc
 8104f08:	10004a18 	.word	0x10004a18

08104f0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8104f0c:	b580      	push	{r7, lr}
 8104f0e:	b086      	sub	sp, #24
 8104f10:	af00      	add	r7, sp, #0
 8104f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8104f18:	2300      	movs	r3, #0
 8104f1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	2b00      	cmp	r3, #0
 8104f20:	d056      	beq.n	8104fd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8104f22:	4b2e      	ldr	r3, [pc, #184]	; (8104fdc <xTaskPriorityDisinherit+0xd0>)
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	693a      	ldr	r2, [r7, #16]
 8104f28:	429a      	cmp	r2, r3
 8104f2a:	d00a      	beq.n	8104f42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8104f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104f30:	f383 8811 	msr	BASEPRI, r3
 8104f34:	f3bf 8f6f 	isb	sy
 8104f38:	f3bf 8f4f 	dsb	sy
 8104f3c:	60fb      	str	r3, [r7, #12]
}
 8104f3e:	bf00      	nop
 8104f40:	e7fe      	b.n	8104f40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8104f42:	693b      	ldr	r3, [r7, #16]
 8104f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f46:	2b00      	cmp	r3, #0
 8104f48:	d10a      	bne.n	8104f60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8104f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104f4e:	f383 8811 	msr	BASEPRI, r3
 8104f52:	f3bf 8f6f 	isb	sy
 8104f56:	f3bf 8f4f 	dsb	sy
 8104f5a:	60bb      	str	r3, [r7, #8]
}
 8104f5c:	bf00      	nop
 8104f5e:	e7fe      	b.n	8104f5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8104f60:	693b      	ldr	r3, [r7, #16]
 8104f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f64:	1e5a      	subs	r2, r3, #1
 8104f66:	693b      	ldr	r3, [r7, #16]
 8104f68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8104f6a:	693b      	ldr	r3, [r7, #16]
 8104f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104f6e:	693b      	ldr	r3, [r7, #16]
 8104f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f72:	429a      	cmp	r2, r3
 8104f74:	d02c      	beq.n	8104fd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8104f76:	693b      	ldr	r3, [r7, #16]
 8104f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f7a:	2b00      	cmp	r3, #0
 8104f7c:	d128      	bne.n	8104fd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8104f7e:	693b      	ldr	r3, [r7, #16]
 8104f80:	3304      	adds	r3, #4
 8104f82:	4618      	mov	r0, r3
 8104f84:	f7fe f9f8 	bl	8103378 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8104f88:	693b      	ldr	r3, [r7, #16]
 8104f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8104f8c:	693b      	ldr	r3, [r7, #16]
 8104f8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104f90:	693b      	ldr	r3, [r7, #16]
 8104f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8104f98:	693b      	ldr	r3, [r7, #16]
 8104f9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8104f9c:	693b      	ldr	r3, [r7, #16]
 8104f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104fa0:	4b0f      	ldr	r3, [pc, #60]	; (8104fe0 <xTaskPriorityDisinherit+0xd4>)
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	429a      	cmp	r2, r3
 8104fa6:	d903      	bls.n	8104fb0 <xTaskPriorityDisinherit+0xa4>
 8104fa8:	693b      	ldr	r3, [r7, #16]
 8104faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fac:	4a0c      	ldr	r2, [pc, #48]	; (8104fe0 <xTaskPriorityDisinherit+0xd4>)
 8104fae:	6013      	str	r3, [r2, #0]
 8104fb0:	693b      	ldr	r3, [r7, #16]
 8104fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104fb4:	4613      	mov	r3, r2
 8104fb6:	009b      	lsls	r3, r3, #2
 8104fb8:	4413      	add	r3, r2
 8104fba:	009b      	lsls	r3, r3, #2
 8104fbc:	4a09      	ldr	r2, [pc, #36]	; (8104fe4 <xTaskPriorityDisinherit+0xd8>)
 8104fbe:	441a      	add	r2, r3
 8104fc0:	693b      	ldr	r3, [r7, #16]
 8104fc2:	3304      	adds	r3, #4
 8104fc4:	4619      	mov	r1, r3
 8104fc6:	4610      	mov	r0, r2
 8104fc8:	f7fe f979 	bl	81032be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8104fcc:	2301      	movs	r3, #1
 8104fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8104fd0:	697b      	ldr	r3, [r7, #20]
	}
 8104fd2:	4618      	mov	r0, r3
 8104fd4:	3718      	adds	r7, #24
 8104fd6:	46bd      	mov	sp, r7
 8104fd8:	bd80      	pop	{r7, pc}
 8104fda:	bf00      	nop
 8104fdc:	1000451c 	.word	0x1000451c
 8104fe0:	100049f8 	.word	0x100049f8
 8104fe4:	10004520 	.word	0x10004520

08104fe8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8104fe8:	b580      	push	{r7, lr}
 8104fea:	b084      	sub	sp, #16
 8104fec:	af00      	add	r7, sp, #0
 8104fee:	6078      	str	r0, [r7, #4]
 8104ff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8104ff2:	4b21      	ldr	r3, [pc, #132]	; (8105078 <prvAddCurrentTaskToDelayedList+0x90>)
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8104ff8:	4b20      	ldr	r3, [pc, #128]	; (810507c <prvAddCurrentTaskToDelayedList+0x94>)
 8104ffa:	681b      	ldr	r3, [r3, #0]
 8104ffc:	3304      	adds	r3, #4
 8104ffe:	4618      	mov	r0, r3
 8105000:	f7fe f9ba 	bl	8103378 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	f1b3 3fff 	cmp.w	r3, #4294967295
 810500a:	d10a      	bne.n	8105022 <prvAddCurrentTaskToDelayedList+0x3a>
 810500c:	683b      	ldr	r3, [r7, #0]
 810500e:	2b00      	cmp	r3, #0
 8105010:	d007      	beq.n	8105022 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8105012:	4b1a      	ldr	r3, [pc, #104]	; (810507c <prvAddCurrentTaskToDelayedList+0x94>)
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	3304      	adds	r3, #4
 8105018:	4619      	mov	r1, r3
 810501a:	4819      	ldr	r0, [pc, #100]	; (8105080 <prvAddCurrentTaskToDelayedList+0x98>)
 810501c:	f7fe f94f 	bl	81032be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8105020:	e026      	b.n	8105070 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8105022:	68fa      	ldr	r2, [r7, #12]
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	4413      	add	r3, r2
 8105028:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810502a:	4b14      	ldr	r3, [pc, #80]	; (810507c <prvAddCurrentTaskToDelayedList+0x94>)
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	68ba      	ldr	r2, [r7, #8]
 8105030:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8105032:	68ba      	ldr	r2, [r7, #8]
 8105034:	68fb      	ldr	r3, [r7, #12]
 8105036:	429a      	cmp	r2, r3
 8105038:	d209      	bcs.n	810504e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810503a:	4b12      	ldr	r3, [pc, #72]	; (8105084 <prvAddCurrentTaskToDelayedList+0x9c>)
 810503c:	681a      	ldr	r2, [r3, #0]
 810503e:	4b0f      	ldr	r3, [pc, #60]	; (810507c <prvAddCurrentTaskToDelayedList+0x94>)
 8105040:	681b      	ldr	r3, [r3, #0]
 8105042:	3304      	adds	r3, #4
 8105044:	4619      	mov	r1, r3
 8105046:	4610      	mov	r0, r2
 8105048:	f7fe f95d 	bl	8103306 <vListInsert>
}
 810504c:	e010      	b.n	8105070 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810504e:	4b0e      	ldr	r3, [pc, #56]	; (8105088 <prvAddCurrentTaskToDelayedList+0xa0>)
 8105050:	681a      	ldr	r2, [r3, #0]
 8105052:	4b0a      	ldr	r3, [pc, #40]	; (810507c <prvAddCurrentTaskToDelayedList+0x94>)
 8105054:	681b      	ldr	r3, [r3, #0]
 8105056:	3304      	adds	r3, #4
 8105058:	4619      	mov	r1, r3
 810505a:	4610      	mov	r0, r2
 810505c:	f7fe f953 	bl	8103306 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8105060:	4b0a      	ldr	r3, [pc, #40]	; (810508c <prvAddCurrentTaskToDelayedList+0xa4>)
 8105062:	681b      	ldr	r3, [r3, #0]
 8105064:	68ba      	ldr	r2, [r7, #8]
 8105066:	429a      	cmp	r2, r3
 8105068:	d202      	bcs.n	8105070 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810506a:	4a08      	ldr	r2, [pc, #32]	; (810508c <prvAddCurrentTaskToDelayedList+0xa4>)
 810506c:	68bb      	ldr	r3, [r7, #8]
 810506e:	6013      	str	r3, [r2, #0]
}
 8105070:	bf00      	nop
 8105072:	3710      	adds	r7, #16
 8105074:	46bd      	mov	sp, r7
 8105076:	bd80      	pop	{r7, pc}
 8105078:	100049f4 	.word	0x100049f4
 810507c:	1000451c 	.word	0x1000451c
 8105080:	100049dc 	.word	0x100049dc
 8105084:	100049ac 	.word	0x100049ac
 8105088:	100049a8 	.word	0x100049a8
 810508c:	10004a10 	.word	0x10004a10

08105090 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8105090:	b580      	push	{r7, lr}
 8105092:	b08a      	sub	sp, #40	; 0x28
 8105094:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8105096:	2300      	movs	r3, #0
 8105098:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810509a:	f000 fb07 	bl	81056ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810509e:	4b1c      	ldr	r3, [pc, #112]	; (8105110 <xTimerCreateTimerTask+0x80>)
 81050a0:	681b      	ldr	r3, [r3, #0]
 81050a2:	2b00      	cmp	r3, #0
 81050a4:	d021      	beq.n	81050ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81050a6:	2300      	movs	r3, #0
 81050a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81050aa:	2300      	movs	r3, #0
 81050ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81050ae:	1d3a      	adds	r2, r7, #4
 81050b0:	f107 0108 	add.w	r1, r7, #8
 81050b4:	f107 030c 	add.w	r3, r7, #12
 81050b8:	4618      	mov	r0, r3
 81050ba:	f7fd fecf 	bl	8102e5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81050be:	6879      	ldr	r1, [r7, #4]
 81050c0:	68bb      	ldr	r3, [r7, #8]
 81050c2:	68fa      	ldr	r2, [r7, #12]
 81050c4:	9202      	str	r2, [sp, #8]
 81050c6:	9301      	str	r3, [sp, #4]
 81050c8:	2302      	movs	r3, #2
 81050ca:	9300      	str	r3, [sp, #0]
 81050cc:	2300      	movs	r3, #0
 81050ce:	460a      	mov	r2, r1
 81050d0:	4910      	ldr	r1, [pc, #64]	; (8105114 <xTimerCreateTimerTask+0x84>)
 81050d2:	4811      	ldr	r0, [pc, #68]	; (8105118 <xTimerCreateTimerTask+0x88>)
 81050d4:	f7ff f8b4 	bl	8104240 <xTaskCreateStatic>
 81050d8:	4603      	mov	r3, r0
 81050da:	4a10      	ldr	r2, [pc, #64]	; (810511c <xTimerCreateTimerTask+0x8c>)
 81050dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81050de:	4b0f      	ldr	r3, [pc, #60]	; (810511c <xTimerCreateTimerTask+0x8c>)
 81050e0:	681b      	ldr	r3, [r3, #0]
 81050e2:	2b00      	cmp	r3, #0
 81050e4:	d001      	beq.n	81050ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81050e6:	2301      	movs	r3, #1
 81050e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81050ea:	697b      	ldr	r3, [r7, #20]
 81050ec:	2b00      	cmp	r3, #0
 81050ee:	d10a      	bne.n	8105106 <xTimerCreateTimerTask+0x76>
	__asm volatile
 81050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81050f4:	f383 8811 	msr	BASEPRI, r3
 81050f8:	f3bf 8f6f 	isb	sy
 81050fc:	f3bf 8f4f 	dsb	sy
 8105100:	613b      	str	r3, [r7, #16]
}
 8105102:	bf00      	nop
 8105104:	e7fe      	b.n	8105104 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8105106:	697b      	ldr	r3, [r7, #20]
}
 8105108:	4618      	mov	r0, r3
 810510a:	3718      	adds	r7, #24
 810510c:	46bd      	mov	sp, r7
 810510e:	bd80      	pop	{r7, pc}
 8105110:	10004a4c 	.word	0x10004a4c
 8105114:	08105964 	.word	0x08105964
 8105118:	08105255 	.word	0x08105255
 810511c:	10004a50 	.word	0x10004a50

08105120 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8105120:	b580      	push	{r7, lr}
 8105122:	b08a      	sub	sp, #40	; 0x28
 8105124:	af00      	add	r7, sp, #0
 8105126:	60f8      	str	r0, [r7, #12]
 8105128:	60b9      	str	r1, [r7, #8]
 810512a:	607a      	str	r2, [r7, #4]
 810512c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810512e:	2300      	movs	r3, #0
 8105130:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8105132:	68fb      	ldr	r3, [r7, #12]
 8105134:	2b00      	cmp	r3, #0
 8105136:	d10a      	bne.n	810514e <xTimerGenericCommand+0x2e>
	__asm volatile
 8105138:	f04f 0350 	mov.w	r3, #80	; 0x50
 810513c:	f383 8811 	msr	BASEPRI, r3
 8105140:	f3bf 8f6f 	isb	sy
 8105144:	f3bf 8f4f 	dsb	sy
 8105148:	623b      	str	r3, [r7, #32]
}
 810514a:	bf00      	nop
 810514c:	e7fe      	b.n	810514c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810514e:	4b1a      	ldr	r3, [pc, #104]	; (81051b8 <xTimerGenericCommand+0x98>)
 8105150:	681b      	ldr	r3, [r3, #0]
 8105152:	2b00      	cmp	r3, #0
 8105154:	d02a      	beq.n	81051ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8105156:	68bb      	ldr	r3, [r7, #8]
 8105158:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810515e:	68fb      	ldr	r3, [r7, #12]
 8105160:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8105162:	68bb      	ldr	r3, [r7, #8]
 8105164:	2b05      	cmp	r3, #5
 8105166:	dc18      	bgt.n	810519a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8105168:	f7ff feb2 	bl	8104ed0 <xTaskGetSchedulerState>
 810516c:	4603      	mov	r3, r0
 810516e:	2b02      	cmp	r3, #2
 8105170:	d109      	bne.n	8105186 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8105172:	4b11      	ldr	r3, [pc, #68]	; (81051b8 <xTimerGenericCommand+0x98>)
 8105174:	6818      	ldr	r0, [r3, #0]
 8105176:	f107 0110 	add.w	r1, r7, #16
 810517a:	2300      	movs	r3, #0
 810517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810517e:	f7fe fc77 	bl	8103a70 <xQueueGenericSend>
 8105182:	6278      	str	r0, [r7, #36]	; 0x24
 8105184:	e012      	b.n	81051ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8105186:	4b0c      	ldr	r3, [pc, #48]	; (81051b8 <xTimerGenericCommand+0x98>)
 8105188:	6818      	ldr	r0, [r3, #0]
 810518a:	f107 0110 	add.w	r1, r7, #16
 810518e:	2300      	movs	r3, #0
 8105190:	2200      	movs	r2, #0
 8105192:	f7fe fc6d 	bl	8103a70 <xQueueGenericSend>
 8105196:	6278      	str	r0, [r7, #36]	; 0x24
 8105198:	e008      	b.n	81051ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810519a:	4b07      	ldr	r3, [pc, #28]	; (81051b8 <xTimerGenericCommand+0x98>)
 810519c:	6818      	ldr	r0, [r3, #0]
 810519e:	f107 0110 	add.w	r1, r7, #16
 81051a2:	2300      	movs	r3, #0
 81051a4:	683a      	ldr	r2, [r7, #0]
 81051a6:	f7fe fd61 	bl	8103c6c <xQueueGenericSendFromISR>
 81051aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81051ae:	4618      	mov	r0, r3
 81051b0:	3728      	adds	r7, #40	; 0x28
 81051b2:	46bd      	mov	sp, r7
 81051b4:	bd80      	pop	{r7, pc}
 81051b6:	bf00      	nop
 81051b8:	10004a4c 	.word	0x10004a4c

081051bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81051bc:	b580      	push	{r7, lr}
 81051be:	b088      	sub	sp, #32
 81051c0:	af02      	add	r7, sp, #8
 81051c2:	6078      	str	r0, [r7, #4]
 81051c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81051c6:	4b22      	ldr	r3, [pc, #136]	; (8105250 <prvProcessExpiredTimer+0x94>)
 81051c8:	681b      	ldr	r3, [r3, #0]
 81051ca:	68db      	ldr	r3, [r3, #12]
 81051cc:	68db      	ldr	r3, [r3, #12]
 81051ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81051d0:	697b      	ldr	r3, [r7, #20]
 81051d2:	3304      	adds	r3, #4
 81051d4:	4618      	mov	r0, r3
 81051d6:	f7fe f8cf 	bl	8103378 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81051da:	697b      	ldr	r3, [r7, #20]
 81051dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81051e0:	f003 0304 	and.w	r3, r3, #4
 81051e4:	2b00      	cmp	r3, #0
 81051e6:	d022      	beq.n	810522e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81051e8:	697b      	ldr	r3, [r7, #20]
 81051ea:	699a      	ldr	r2, [r3, #24]
 81051ec:	687b      	ldr	r3, [r7, #4]
 81051ee:	18d1      	adds	r1, r2, r3
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	683a      	ldr	r2, [r7, #0]
 81051f4:	6978      	ldr	r0, [r7, #20]
 81051f6:	f000 f8d1 	bl	810539c <prvInsertTimerInActiveList>
 81051fa:	4603      	mov	r3, r0
 81051fc:	2b00      	cmp	r3, #0
 81051fe:	d01f      	beq.n	8105240 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8105200:	2300      	movs	r3, #0
 8105202:	9300      	str	r3, [sp, #0]
 8105204:	2300      	movs	r3, #0
 8105206:	687a      	ldr	r2, [r7, #4]
 8105208:	2100      	movs	r1, #0
 810520a:	6978      	ldr	r0, [r7, #20]
 810520c:	f7ff ff88 	bl	8105120 <xTimerGenericCommand>
 8105210:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8105212:	693b      	ldr	r3, [r7, #16]
 8105214:	2b00      	cmp	r3, #0
 8105216:	d113      	bne.n	8105240 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8105218:	f04f 0350 	mov.w	r3, #80	; 0x50
 810521c:	f383 8811 	msr	BASEPRI, r3
 8105220:	f3bf 8f6f 	isb	sy
 8105224:	f3bf 8f4f 	dsb	sy
 8105228:	60fb      	str	r3, [r7, #12]
}
 810522a:	bf00      	nop
 810522c:	e7fe      	b.n	810522c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810522e:	697b      	ldr	r3, [r7, #20]
 8105230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8105234:	f023 0301 	bic.w	r3, r3, #1
 8105238:	b2da      	uxtb	r2, r3
 810523a:	697b      	ldr	r3, [r7, #20]
 810523c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8105240:	697b      	ldr	r3, [r7, #20]
 8105242:	6a1b      	ldr	r3, [r3, #32]
 8105244:	6978      	ldr	r0, [r7, #20]
 8105246:	4798      	blx	r3
}
 8105248:	bf00      	nop
 810524a:	3718      	adds	r7, #24
 810524c:	46bd      	mov	sp, r7
 810524e:	bd80      	pop	{r7, pc}
 8105250:	10004a44 	.word	0x10004a44

08105254 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8105254:	b580      	push	{r7, lr}
 8105256:	b084      	sub	sp, #16
 8105258:	af00      	add	r7, sp, #0
 810525a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810525c:	f107 0308 	add.w	r3, r7, #8
 8105260:	4618      	mov	r0, r3
 8105262:	f000 f857 	bl	8105314 <prvGetNextExpireTime>
 8105266:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8105268:	68bb      	ldr	r3, [r7, #8]
 810526a:	4619      	mov	r1, r3
 810526c:	68f8      	ldr	r0, [r7, #12]
 810526e:	f000 f803 	bl	8105278 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8105272:	f000 f8d5 	bl	8105420 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8105276:	e7f1      	b.n	810525c <prvTimerTask+0x8>

08105278 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8105278:	b580      	push	{r7, lr}
 810527a:	b084      	sub	sp, #16
 810527c:	af00      	add	r7, sp, #0
 810527e:	6078      	str	r0, [r7, #4]
 8105280:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8105282:	f7ff fa39 	bl	81046f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8105286:	f107 0308 	add.w	r3, r7, #8
 810528a:	4618      	mov	r0, r3
 810528c:	f000 f866 	bl	810535c <prvSampleTimeNow>
 8105290:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8105292:	68bb      	ldr	r3, [r7, #8]
 8105294:	2b00      	cmp	r3, #0
 8105296:	d130      	bne.n	81052fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8105298:	683b      	ldr	r3, [r7, #0]
 810529a:	2b00      	cmp	r3, #0
 810529c:	d10a      	bne.n	81052b4 <prvProcessTimerOrBlockTask+0x3c>
 810529e:	687a      	ldr	r2, [r7, #4]
 81052a0:	68fb      	ldr	r3, [r7, #12]
 81052a2:	429a      	cmp	r2, r3
 81052a4:	d806      	bhi.n	81052b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81052a6:	f7ff fa35 	bl	8104714 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81052aa:	68f9      	ldr	r1, [r7, #12]
 81052ac:	6878      	ldr	r0, [r7, #4]
 81052ae:	f7ff ff85 	bl	81051bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81052b2:	e024      	b.n	81052fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81052b4:	683b      	ldr	r3, [r7, #0]
 81052b6:	2b00      	cmp	r3, #0
 81052b8:	d008      	beq.n	81052cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81052ba:	4b13      	ldr	r3, [pc, #76]	; (8105308 <prvProcessTimerOrBlockTask+0x90>)
 81052bc:	681b      	ldr	r3, [r3, #0]
 81052be:	681b      	ldr	r3, [r3, #0]
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	d101      	bne.n	81052c8 <prvProcessTimerOrBlockTask+0x50>
 81052c4:	2301      	movs	r3, #1
 81052c6:	e000      	b.n	81052ca <prvProcessTimerOrBlockTask+0x52>
 81052c8:	2300      	movs	r3, #0
 81052ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81052cc:	4b0f      	ldr	r3, [pc, #60]	; (810530c <prvProcessTimerOrBlockTask+0x94>)
 81052ce:	6818      	ldr	r0, [r3, #0]
 81052d0:	687a      	ldr	r2, [r7, #4]
 81052d2:	68fb      	ldr	r3, [r7, #12]
 81052d4:	1ad3      	subs	r3, r2, r3
 81052d6:	683a      	ldr	r2, [r7, #0]
 81052d8:	4619      	mov	r1, r3
 81052da:	f7fe ff7d 	bl	81041d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81052de:	f7ff fa19 	bl	8104714 <xTaskResumeAll>
 81052e2:	4603      	mov	r3, r0
 81052e4:	2b00      	cmp	r3, #0
 81052e6:	d10a      	bne.n	81052fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81052e8:	4b09      	ldr	r3, [pc, #36]	; (8105310 <prvProcessTimerOrBlockTask+0x98>)
 81052ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81052ee:	601a      	str	r2, [r3, #0]
 81052f0:	f3bf 8f4f 	dsb	sy
 81052f4:	f3bf 8f6f 	isb	sy
}
 81052f8:	e001      	b.n	81052fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81052fa:	f7ff fa0b 	bl	8104714 <xTaskResumeAll>
}
 81052fe:	bf00      	nop
 8105300:	3710      	adds	r7, #16
 8105302:	46bd      	mov	sp, r7
 8105304:	bd80      	pop	{r7, pc}
 8105306:	bf00      	nop
 8105308:	10004a48 	.word	0x10004a48
 810530c:	10004a4c 	.word	0x10004a4c
 8105310:	e000ed04 	.word	0xe000ed04

08105314 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8105314:	b480      	push	{r7}
 8105316:	b085      	sub	sp, #20
 8105318:	af00      	add	r7, sp, #0
 810531a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810531c:	4b0e      	ldr	r3, [pc, #56]	; (8105358 <prvGetNextExpireTime+0x44>)
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	681b      	ldr	r3, [r3, #0]
 8105322:	2b00      	cmp	r3, #0
 8105324:	d101      	bne.n	810532a <prvGetNextExpireTime+0x16>
 8105326:	2201      	movs	r2, #1
 8105328:	e000      	b.n	810532c <prvGetNextExpireTime+0x18>
 810532a:	2200      	movs	r2, #0
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8105330:	687b      	ldr	r3, [r7, #4]
 8105332:	681b      	ldr	r3, [r3, #0]
 8105334:	2b00      	cmp	r3, #0
 8105336:	d105      	bne.n	8105344 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8105338:	4b07      	ldr	r3, [pc, #28]	; (8105358 <prvGetNextExpireTime+0x44>)
 810533a:	681b      	ldr	r3, [r3, #0]
 810533c:	68db      	ldr	r3, [r3, #12]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	60fb      	str	r3, [r7, #12]
 8105342:	e001      	b.n	8105348 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8105344:	2300      	movs	r3, #0
 8105346:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8105348:	68fb      	ldr	r3, [r7, #12]
}
 810534a:	4618      	mov	r0, r3
 810534c:	3714      	adds	r7, #20
 810534e:	46bd      	mov	sp, r7
 8105350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105354:	4770      	bx	lr
 8105356:	bf00      	nop
 8105358:	10004a44 	.word	0x10004a44

0810535c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810535c:	b580      	push	{r7, lr}
 810535e:	b084      	sub	sp, #16
 8105360:	af00      	add	r7, sp, #0
 8105362:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8105364:	f7ff fa74 	bl	8104850 <xTaskGetTickCount>
 8105368:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810536a:	4b0b      	ldr	r3, [pc, #44]	; (8105398 <prvSampleTimeNow+0x3c>)
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	68fa      	ldr	r2, [r7, #12]
 8105370:	429a      	cmp	r2, r3
 8105372:	d205      	bcs.n	8105380 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8105374:	f000 f936 	bl	81055e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	2201      	movs	r2, #1
 810537c:	601a      	str	r2, [r3, #0]
 810537e:	e002      	b.n	8105386 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8105380:	687b      	ldr	r3, [r7, #4]
 8105382:	2200      	movs	r2, #0
 8105384:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8105386:	4a04      	ldr	r2, [pc, #16]	; (8105398 <prvSampleTimeNow+0x3c>)
 8105388:	68fb      	ldr	r3, [r7, #12]
 810538a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810538c:	68fb      	ldr	r3, [r7, #12]
}
 810538e:	4618      	mov	r0, r3
 8105390:	3710      	adds	r7, #16
 8105392:	46bd      	mov	sp, r7
 8105394:	bd80      	pop	{r7, pc}
 8105396:	bf00      	nop
 8105398:	10004a54 	.word	0x10004a54

0810539c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810539c:	b580      	push	{r7, lr}
 810539e:	b086      	sub	sp, #24
 81053a0:	af00      	add	r7, sp, #0
 81053a2:	60f8      	str	r0, [r7, #12]
 81053a4:	60b9      	str	r1, [r7, #8]
 81053a6:	607a      	str	r2, [r7, #4]
 81053a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 81053aa:	2300      	movs	r3, #0
 81053ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 81053ae:	68fb      	ldr	r3, [r7, #12]
 81053b0:	68ba      	ldr	r2, [r7, #8]
 81053b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81053b4:	68fb      	ldr	r3, [r7, #12]
 81053b6:	68fa      	ldr	r2, [r7, #12]
 81053b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 81053ba:	68ba      	ldr	r2, [r7, #8]
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	429a      	cmp	r2, r3
 81053c0:	d812      	bhi.n	81053e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81053c2:	687a      	ldr	r2, [r7, #4]
 81053c4:	683b      	ldr	r3, [r7, #0]
 81053c6:	1ad2      	subs	r2, r2, r3
 81053c8:	68fb      	ldr	r3, [r7, #12]
 81053ca:	699b      	ldr	r3, [r3, #24]
 81053cc:	429a      	cmp	r2, r3
 81053ce:	d302      	bcc.n	81053d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81053d0:	2301      	movs	r3, #1
 81053d2:	617b      	str	r3, [r7, #20]
 81053d4:	e01b      	b.n	810540e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81053d6:	4b10      	ldr	r3, [pc, #64]	; (8105418 <prvInsertTimerInActiveList+0x7c>)
 81053d8:	681a      	ldr	r2, [r3, #0]
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	3304      	adds	r3, #4
 81053de:	4619      	mov	r1, r3
 81053e0:	4610      	mov	r0, r2
 81053e2:	f7fd ff90 	bl	8103306 <vListInsert>
 81053e6:	e012      	b.n	810540e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81053e8:	687a      	ldr	r2, [r7, #4]
 81053ea:	683b      	ldr	r3, [r7, #0]
 81053ec:	429a      	cmp	r2, r3
 81053ee:	d206      	bcs.n	81053fe <prvInsertTimerInActiveList+0x62>
 81053f0:	68ba      	ldr	r2, [r7, #8]
 81053f2:	683b      	ldr	r3, [r7, #0]
 81053f4:	429a      	cmp	r2, r3
 81053f6:	d302      	bcc.n	81053fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81053f8:	2301      	movs	r3, #1
 81053fa:	617b      	str	r3, [r7, #20]
 81053fc:	e007      	b.n	810540e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81053fe:	4b07      	ldr	r3, [pc, #28]	; (810541c <prvInsertTimerInActiveList+0x80>)
 8105400:	681a      	ldr	r2, [r3, #0]
 8105402:	68fb      	ldr	r3, [r7, #12]
 8105404:	3304      	adds	r3, #4
 8105406:	4619      	mov	r1, r3
 8105408:	4610      	mov	r0, r2
 810540a:	f7fd ff7c 	bl	8103306 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810540e:	697b      	ldr	r3, [r7, #20]
}
 8105410:	4618      	mov	r0, r3
 8105412:	3718      	adds	r7, #24
 8105414:	46bd      	mov	sp, r7
 8105416:	bd80      	pop	{r7, pc}
 8105418:	10004a48 	.word	0x10004a48
 810541c:	10004a44 	.word	0x10004a44

08105420 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8105420:	b580      	push	{r7, lr}
 8105422:	b08e      	sub	sp, #56	; 0x38
 8105424:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8105426:	e0ca      	b.n	81055be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	2b00      	cmp	r3, #0
 810542c:	da18      	bge.n	8105460 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810542e:	1d3b      	adds	r3, r7, #4
 8105430:	3304      	adds	r3, #4
 8105432:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8105434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105436:	2b00      	cmp	r3, #0
 8105438:	d10a      	bne.n	8105450 <prvProcessReceivedCommands+0x30>
	__asm volatile
 810543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810543e:	f383 8811 	msr	BASEPRI, r3
 8105442:	f3bf 8f6f 	isb	sy
 8105446:	f3bf 8f4f 	dsb	sy
 810544a:	61fb      	str	r3, [r7, #28]
}
 810544c:	bf00      	nop
 810544e:	e7fe      	b.n	810544e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8105450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105456:	6850      	ldr	r0, [r2, #4]
 8105458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810545a:	6892      	ldr	r2, [r2, #8]
 810545c:	4611      	mov	r1, r2
 810545e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	2b00      	cmp	r3, #0
 8105464:	f2c0 80aa 	blt.w	81055bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8105468:	68fb      	ldr	r3, [r7, #12]
 810546a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810546e:	695b      	ldr	r3, [r3, #20]
 8105470:	2b00      	cmp	r3, #0
 8105472:	d004      	beq.n	810547e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8105474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105476:	3304      	adds	r3, #4
 8105478:	4618      	mov	r0, r3
 810547a:	f7fd ff7d 	bl	8103378 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810547e:	463b      	mov	r3, r7
 8105480:	4618      	mov	r0, r3
 8105482:	f7ff ff6b 	bl	810535c <prvSampleTimeNow>
 8105486:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8105488:	687b      	ldr	r3, [r7, #4]
 810548a:	2b09      	cmp	r3, #9
 810548c:	f200 8097 	bhi.w	81055be <prvProcessReceivedCommands+0x19e>
 8105490:	a201      	add	r2, pc, #4	; (adr r2, 8105498 <prvProcessReceivedCommands+0x78>)
 8105492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105496:	bf00      	nop
 8105498:	081054c1 	.word	0x081054c1
 810549c:	081054c1 	.word	0x081054c1
 81054a0:	081054c1 	.word	0x081054c1
 81054a4:	08105535 	.word	0x08105535
 81054a8:	08105549 	.word	0x08105549
 81054ac:	08105593 	.word	0x08105593
 81054b0:	081054c1 	.word	0x081054c1
 81054b4:	081054c1 	.word	0x081054c1
 81054b8:	08105535 	.word	0x08105535
 81054bc:	08105549 	.word	0x08105549
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81054c6:	f043 0301 	orr.w	r3, r3, #1
 81054ca:	b2da      	uxtb	r2, r3
 81054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81054d2:	68ba      	ldr	r2, [r7, #8]
 81054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054d6:	699b      	ldr	r3, [r3, #24]
 81054d8:	18d1      	adds	r1, r2, r3
 81054da:	68bb      	ldr	r3, [r7, #8]
 81054dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81054de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81054e0:	f7ff ff5c 	bl	810539c <prvInsertTimerInActiveList>
 81054e4:	4603      	mov	r3, r0
 81054e6:	2b00      	cmp	r3, #0
 81054e8:	d069      	beq.n	81055be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054ec:	6a1b      	ldr	r3, [r3, #32]
 81054ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81054f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81054f8:	f003 0304 	and.w	r3, r3, #4
 81054fc:	2b00      	cmp	r3, #0
 81054fe:	d05e      	beq.n	81055be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8105500:	68ba      	ldr	r2, [r7, #8]
 8105502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105504:	699b      	ldr	r3, [r3, #24]
 8105506:	441a      	add	r2, r3
 8105508:	2300      	movs	r3, #0
 810550a:	9300      	str	r3, [sp, #0]
 810550c:	2300      	movs	r3, #0
 810550e:	2100      	movs	r1, #0
 8105510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8105512:	f7ff fe05 	bl	8105120 <xTimerGenericCommand>
 8105516:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8105518:	6a3b      	ldr	r3, [r7, #32]
 810551a:	2b00      	cmp	r3, #0
 810551c:	d14f      	bne.n	81055be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 810551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105522:	f383 8811 	msr	BASEPRI, r3
 8105526:	f3bf 8f6f 	isb	sy
 810552a:	f3bf 8f4f 	dsb	sy
 810552e:	61bb      	str	r3, [r7, #24]
}
 8105530:	bf00      	nop
 8105532:	e7fe      	b.n	8105532 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8105534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810553a:	f023 0301 	bic.w	r3, r3, #1
 810553e:	b2da      	uxtb	r2, r3
 8105540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8105546:	e03a      	b.n	81055be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8105548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810554a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810554e:	f043 0301 	orr.w	r3, r3, #1
 8105552:	b2da      	uxtb	r2, r3
 8105554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810555a:	68ba      	ldr	r2, [r7, #8]
 810555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810555e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8105560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105562:	699b      	ldr	r3, [r3, #24]
 8105564:	2b00      	cmp	r3, #0
 8105566:	d10a      	bne.n	810557e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8105568:	f04f 0350 	mov.w	r3, #80	; 0x50
 810556c:	f383 8811 	msr	BASEPRI, r3
 8105570:	f3bf 8f6f 	isb	sy
 8105574:	f3bf 8f4f 	dsb	sy
 8105578:	617b      	str	r3, [r7, #20]
}
 810557a:	bf00      	nop
 810557c:	e7fe      	b.n	810557c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105580:	699a      	ldr	r2, [r3, #24]
 8105582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105584:	18d1      	adds	r1, r2, r3
 8105586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810558a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810558c:	f7ff ff06 	bl	810539c <prvInsertTimerInActiveList>
					break;
 8105590:	e015      	b.n	81055be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8105592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8105598:	f003 0302 	and.w	r3, r3, #2
 810559c:	2b00      	cmp	r3, #0
 810559e:	d103      	bne.n	81055a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 81055a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81055a2:	f7fd fd41 	bl	8103028 <vPortFree>
 81055a6:	e00a      	b.n	81055be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81055ae:	f023 0301 	bic.w	r3, r3, #1
 81055b2:	b2da      	uxtb	r2, r3
 81055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81055ba:	e000      	b.n	81055be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 81055bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81055be:	4b08      	ldr	r3, [pc, #32]	; (81055e0 <prvProcessReceivedCommands+0x1c0>)
 81055c0:	681b      	ldr	r3, [r3, #0]
 81055c2:	1d39      	adds	r1, r7, #4
 81055c4:	2200      	movs	r2, #0
 81055c6:	4618      	mov	r0, r3
 81055c8:	f7fe fbec 	bl	8103da4 <xQueueReceive>
 81055cc:	4603      	mov	r3, r0
 81055ce:	2b00      	cmp	r3, #0
 81055d0:	f47f af2a 	bne.w	8105428 <prvProcessReceivedCommands+0x8>
	}
}
 81055d4:	bf00      	nop
 81055d6:	bf00      	nop
 81055d8:	3730      	adds	r7, #48	; 0x30
 81055da:	46bd      	mov	sp, r7
 81055dc:	bd80      	pop	{r7, pc}
 81055de:	bf00      	nop
 81055e0:	10004a4c 	.word	0x10004a4c

081055e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81055e4:	b580      	push	{r7, lr}
 81055e6:	b088      	sub	sp, #32
 81055e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81055ea:	e048      	b.n	810567e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81055ec:	4b2d      	ldr	r3, [pc, #180]	; (81056a4 <prvSwitchTimerLists+0xc0>)
 81055ee:	681b      	ldr	r3, [r3, #0]
 81055f0:	68db      	ldr	r3, [r3, #12]
 81055f2:	681b      	ldr	r3, [r3, #0]
 81055f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81055f6:	4b2b      	ldr	r3, [pc, #172]	; (81056a4 <prvSwitchTimerLists+0xc0>)
 81055f8:	681b      	ldr	r3, [r3, #0]
 81055fa:	68db      	ldr	r3, [r3, #12]
 81055fc:	68db      	ldr	r3, [r3, #12]
 81055fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8105600:	68fb      	ldr	r3, [r7, #12]
 8105602:	3304      	adds	r3, #4
 8105604:	4618      	mov	r0, r3
 8105606:	f7fd feb7 	bl	8103378 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810560a:	68fb      	ldr	r3, [r7, #12]
 810560c:	6a1b      	ldr	r3, [r3, #32]
 810560e:	68f8      	ldr	r0, [r7, #12]
 8105610:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8105612:	68fb      	ldr	r3, [r7, #12]
 8105614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8105618:	f003 0304 	and.w	r3, r3, #4
 810561c:	2b00      	cmp	r3, #0
 810561e:	d02e      	beq.n	810567e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8105620:	68fb      	ldr	r3, [r7, #12]
 8105622:	699b      	ldr	r3, [r3, #24]
 8105624:	693a      	ldr	r2, [r7, #16]
 8105626:	4413      	add	r3, r2
 8105628:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810562a:	68ba      	ldr	r2, [r7, #8]
 810562c:	693b      	ldr	r3, [r7, #16]
 810562e:	429a      	cmp	r2, r3
 8105630:	d90e      	bls.n	8105650 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8105632:	68fb      	ldr	r3, [r7, #12]
 8105634:	68ba      	ldr	r2, [r7, #8]
 8105636:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8105638:	68fb      	ldr	r3, [r7, #12]
 810563a:	68fa      	ldr	r2, [r7, #12]
 810563c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810563e:	4b19      	ldr	r3, [pc, #100]	; (81056a4 <prvSwitchTimerLists+0xc0>)
 8105640:	681a      	ldr	r2, [r3, #0]
 8105642:	68fb      	ldr	r3, [r7, #12]
 8105644:	3304      	adds	r3, #4
 8105646:	4619      	mov	r1, r3
 8105648:	4610      	mov	r0, r2
 810564a:	f7fd fe5c 	bl	8103306 <vListInsert>
 810564e:	e016      	b.n	810567e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8105650:	2300      	movs	r3, #0
 8105652:	9300      	str	r3, [sp, #0]
 8105654:	2300      	movs	r3, #0
 8105656:	693a      	ldr	r2, [r7, #16]
 8105658:	2100      	movs	r1, #0
 810565a:	68f8      	ldr	r0, [r7, #12]
 810565c:	f7ff fd60 	bl	8105120 <xTimerGenericCommand>
 8105660:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	2b00      	cmp	r3, #0
 8105666:	d10a      	bne.n	810567e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8105668:	f04f 0350 	mov.w	r3, #80	; 0x50
 810566c:	f383 8811 	msr	BASEPRI, r3
 8105670:	f3bf 8f6f 	isb	sy
 8105674:	f3bf 8f4f 	dsb	sy
 8105678:	603b      	str	r3, [r7, #0]
}
 810567a:	bf00      	nop
 810567c:	e7fe      	b.n	810567c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810567e:	4b09      	ldr	r3, [pc, #36]	; (81056a4 <prvSwitchTimerLists+0xc0>)
 8105680:	681b      	ldr	r3, [r3, #0]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	2b00      	cmp	r3, #0
 8105686:	d1b1      	bne.n	81055ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8105688:	4b06      	ldr	r3, [pc, #24]	; (81056a4 <prvSwitchTimerLists+0xc0>)
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810568e:	4b06      	ldr	r3, [pc, #24]	; (81056a8 <prvSwitchTimerLists+0xc4>)
 8105690:	681b      	ldr	r3, [r3, #0]
 8105692:	4a04      	ldr	r2, [pc, #16]	; (81056a4 <prvSwitchTimerLists+0xc0>)
 8105694:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8105696:	4a04      	ldr	r2, [pc, #16]	; (81056a8 <prvSwitchTimerLists+0xc4>)
 8105698:	697b      	ldr	r3, [r7, #20]
 810569a:	6013      	str	r3, [r2, #0]
}
 810569c:	bf00      	nop
 810569e:	3718      	adds	r7, #24
 81056a0:	46bd      	mov	sp, r7
 81056a2:	bd80      	pop	{r7, pc}
 81056a4:	10004a44 	.word	0x10004a44
 81056a8:	10004a48 	.word	0x10004a48

081056ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 81056ac:	b580      	push	{r7, lr}
 81056ae:	b082      	sub	sp, #8
 81056b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81056b2:	f7fd ffb7 	bl	8103624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81056b6:	4b15      	ldr	r3, [pc, #84]	; (810570c <prvCheckForValidListAndQueue+0x60>)
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	2b00      	cmp	r3, #0
 81056bc:	d120      	bne.n	8105700 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81056be:	4814      	ldr	r0, [pc, #80]	; (8105710 <prvCheckForValidListAndQueue+0x64>)
 81056c0:	f7fd fdd0 	bl	8103264 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 81056c4:	4813      	ldr	r0, [pc, #76]	; (8105714 <prvCheckForValidListAndQueue+0x68>)
 81056c6:	f7fd fdcd 	bl	8103264 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 81056ca:	4b13      	ldr	r3, [pc, #76]	; (8105718 <prvCheckForValidListAndQueue+0x6c>)
 81056cc:	4a10      	ldr	r2, [pc, #64]	; (8105710 <prvCheckForValidListAndQueue+0x64>)
 81056ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81056d0:	4b12      	ldr	r3, [pc, #72]	; (810571c <prvCheckForValidListAndQueue+0x70>)
 81056d2:	4a10      	ldr	r2, [pc, #64]	; (8105714 <prvCheckForValidListAndQueue+0x68>)
 81056d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81056d6:	2300      	movs	r3, #0
 81056d8:	9300      	str	r3, [sp, #0]
 81056da:	4b11      	ldr	r3, [pc, #68]	; (8105720 <prvCheckForValidListAndQueue+0x74>)
 81056dc:	4a11      	ldr	r2, [pc, #68]	; (8105724 <prvCheckForValidListAndQueue+0x78>)
 81056de:	2110      	movs	r1, #16
 81056e0:	200a      	movs	r0, #10
 81056e2:	f7fe f929 	bl	8103938 <xQueueGenericCreateStatic>
 81056e6:	4603      	mov	r3, r0
 81056e8:	4a08      	ldr	r2, [pc, #32]	; (810570c <prvCheckForValidListAndQueue+0x60>)
 81056ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81056ec:	4b07      	ldr	r3, [pc, #28]	; (810570c <prvCheckForValidListAndQueue+0x60>)
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	2b00      	cmp	r3, #0
 81056f2:	d005      	beq.n	8105700 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81056f4:	4b05      	ldr	r3, [pc, #20]	; (810570c <prvCheckForValidListAndQueue+0x60>)
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	490b      	ldr	r1, [pc, #44]	; (8105728 <prvCheckForValidListAndQueue+0x7c>)
 81056fa:	4618      	mov	r0, r3
 81056fc:	f7fe fd42 	bl	8104184 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8105700:	f7fd ffc0 	bl	8103684 <vPortExitCritical>
}
 8105704:	bf00      	nop
 8105706:	46bd      	mov	sp, r7
 8105708:	bd80      	pop	{r7, pc}
 810570a:	bf00      	nop
 810570c:	10004a4c 	.word	0x10004a4c
 8105710:	10004a1c 	.word	0x10004a1c
 8105714:	10004a30 	.word	0x10004a30
 8105718:	10004a44 	.word	0x10004a44
 810571c:	10004a48 	.word	0x10004a48
 8105720:	10004af8 	.word	0x10004af8
 8105724:	10004a58 	.word	0x10004a58
 8105728:	0810596c 	.word	0x0810596c

0810572c <__libc_init_array>:
 810572c:	b570      	push	{r4, r5, r6, lr}
 810572e:	4d0d      	ldr	r5, [pc, #52]	; (8105764 <__libc_init_array+0x38>)
 8105730:	4c0d      	ldr	r4, [pc, #52]	; (8105768 <__libc_init_array+0x3c>)
 8105732:	1b64      	subs	r4, r4, r5
 8105734:	10a4      	asrs	r4, r4, #2
 8105736:	2600      	movs	r6, #0
 8105738:	42a6      	cmp	r6, r4
 810573a:	d109      	bne.n	8105750 <__libc_init_array+0x24>
 810573c:	4d0b      	ldr	r5, [pc, #44]	; (810576c <__libc_init_array+0x40>)
 810573e:	4c0c      	ldr	r4, [pc, #48]	; (8105770 <__libc_init_array+0x44>)
 8105740:	f000 f8f2 	bl	8105928 <_init>
 8105744:	1b64      	subs	r4, r4, r5
 8105746:	10a4      	asrs	r4, r4, #2
 8105748:	2600      	movs	r6, #0
 810574a:	42a6      	cmp	r6, r4
 810574c:	d105      	bne.n	810575a <__libc_init_array+0x2e>
 810574e:	bd70      	pop	{r4, r5, r6, pc}
 8105750:	f855 3b04 	ldr.w	r3, [r5], #4
 8105754:	4798      	blx	r3
 8105756:	3601      	adds	r6, #1
 8105758:	e7ee      	b.n	8105738 <__libc_init_array+0xc>
 810575a:	f855 3b04 	ldr.w	r3, [r5], #4
 810575e:	4798      	blx	r3
 8105760:	3601      	adds	r6, #1
 8105762:	e7f2      	b.n	810574a <__libc_init_array+0x1e>
 8105764:	08105a2c 	.word	0x08105a2c
 8105768:	08105a2c 	.word	0x08105a2c
 810576c:	08105a2c 	.word	0x08105a2c
 8105770:	08105a30 	.word	0x08105a30

08105774 <__retarget_lock_acquire_recursive>:
 8105774:	4770      	bx	lr

08105776 <__retarget_lock_release_recursive>:
 8105776:	4770      	bx	lr

08105778 <memcpy>:
 8105778:	440a      	add	r2, r1
 810577a:	4291      	cmp	r1, r2
 810577c:	f100 33ff 	add.w	r3, r0, #4294967295
 8105780:	d100      	bne.n	8105784 <memcpy+0xc>
 8105782:	4770      	bx	lr
 8105784:	b510      	push	{r4, lr}
 8105786:	f811 4b01 	ldrb.w	r4, [r1], #1
 810578a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810578e:	4291      	cmp	r1, r2
 8105790:	d1f9      	bne.n	8105786 <memcpy+0xe>
 8105792:	bd10      	pop	{r4, pc}

08105794 <memset>:
 8105794:	4402      	add	r2, r0
 8105796:	4603      	mov	r3, r0
 8105798:	4293      	cmp	r3, r2
 810579a:	d100      	bne.n	810579e <memset+0xa>
 810579c:	4770      	bx	lr
 810579e:	f803 1b01 	strb.w	r1, [r3], #1
 81057a2:	e7f9      	b.n	8105798 <memset+0x4>

081057a4 <cleanup_glue>:
 81057a4:	b538      	push	{r3, r4, r5, lr}
 81057a6:	460c      	mov	r4, r1
 81057a8:	6809      	ldr	r1, [r1, #0]
 81057aa:	4605      	mov	r5, r0
 81057ac:	b109      	cbz	r1, 81057b2 <cleanup_glue+0xe>
 81057ae:	f7ff fff9 	bl	81057a4 <cleanup_glue>
 81057b2:	4621      	mov	r1, r4
 81057b4:	4628      	mov	r0, r5
 81057b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81057ba:	f000 b869 	b.w	8105890 <_free_r>
	...

081057c0 <_reclaim_reent>:
 81057c0:	4b2c      	ldr	r3, [pc, #176]	; (8105874 <_reclaim_reent+0xb4>)
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	4283      	cmp	r3, r0
 81057c6:	b570      	push	{r4, r5, r6, lr}
 81057c8:	4604      	mov	r4, r0
 81057ca:	d051      	beq.n	8105870 <_reclaim_reent+0xb0>
 81057cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 81057ce:	b143      	cbz	r3, 81057e2 <_reclaim_reent+0x22>
 81057d0:	68db      	ldr	r3, [r3, #12]
 81057d2:	2b00      	cmp	r3, #0
 81057d4:	d14a      	bne.n	810586c <_reclaim_reent+0xac>
 81057d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81057d8:	6819      	ldr	r1, [r3, #0]
 81057da:	b111      	cbz	r1, 81057e2 <_reclaim_reent+0x22>
 81057dc:	4620      	mov	r0, r4
 81057de:	f000 f857 	bl	8105890 <_free_r>
 81057e2:	6961      	ldr	r1, [r4, #20]
 81057e4:	b111      	cbz	r1, 81057ec <_reclaim_reent+0x2c>
 81057e6:	4620      	mov	r0, r4
 81057e8:	f000 f852 	bl	8105890 <_free_r>
 81057ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 81057ee:	b111      	cbz	r1, 81057f6 <_reclaim_reent+0x36>
 81057f0:	4620      	mov	r0, r4
 81057f2:	f000 f84d 	bl	8105890 <_free_r>
 81057f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 81057f8:	b111      	cbz	r1, 8105800 <_reclaim_reent+0x40>
 81057fa:	4620      	mov	r0, r4
 81057fc:	f000 f848 	bl	8105890 <_free_r>
 8105800:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8105802:	b111      	cbz	r1, 810580a <_reclaim_reent+0x4a>
 8105804:	4620      	mov	r0, r4
 8105806:	f000 f843 	bl	8105890 <_free_r>
 810580a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 810580c:	b111      	cbz	r1, 8105814 <_reclaim_reent+0x54>
 810580e:	4620      	mov	r0, r4
 8105810:	f000 f83e 	bl	8105890 <_free_r>
 8105814:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8105816:	b111      	cbz	r1, 810581e <_reclaim_reent+0x5e>
 8105818:	4620      	mov	r0, r4
 810581a:	f000 f839 	bl	8105890 <_free_r>
 810581e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8105820:	b111      	cbz	r1, 8105828 <_reclaim_reent+0x68>
 8105822:	4620      	mov	r0, r4
 8105824:	f000 f834 	bl	8105890 <_free_r>
 8105828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810582a:	b111      	cbz	r1, 8105832 <_reclaim_reent+0x72>
 810582c:	4620      	mov	r0, r4
 810582e:	f000 f82f 	bl	8105890 <_free_r>
 8105832:	69a3      	ldr	r3, [r4, #24]
 8105834:	b1e3      	cbz	r3, 8105870 <_reclaim_reent+0xb0>
 8105836:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8105838:	4620      	mov	r0, r4
 810583a:	4798      	blx	r3
 810583c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 810583e:	b1b9      	cbz	r1, 8105870 <_reclaim_reent+0xb0>
 8105840:	4620      	mov	r0, r4
 8105842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8105846:	f7ff bfad 	b.w	81057a4 <cleanup_glue>
 810584a:	5949      	ldr	r1, [r1, r5]
 810584c:	b941      	cbnz	r1, 8105860 <_reclaim_reent+0xa0>
 810584e:	3504      	adds	r5, #4
 8105850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105852:	2d80      	cmp	r5, #128	; 0x80
 8105854:	68d9      	ldr	r1, [r3, #12]
 8105856:	d1f8      	bne.n	810584a <_reclaim_reent+0x8a>
 8105858:	4620      	mov	r0, r4
 810585a:	f000 f819 	bl	8105890 <_free_r>
 810585e:	e7ba      	b.n	81057d6 <_reclaim_reent+0x16>
 8105860:	680e      	ldr	r6, [r1, #0]
 8105862:	4620      	mov	r0, r4
 8105864:	f000 f814 	bl	8105890 <_free_r>
 8105868:	4631      	mov	r1, r6
 810586a:	e7ef      	b.n	810584c <_reclaim_reent+0x8c>
 810586c:	2500      	movs	r5, #0
 810586e:	e7ef      	b.n	8105850 <_reclaim_reent+0x90>
 8105870:	bd70      	pop	{r4, r5, r6, pc}
 8105872:	bf00      	nop
 8105874:	10000014 	.word	0x10000014

08105878 <__malloc_lock>:
 8105878:	4801      	ldr	r0, [pc, #4]	; (8105880 <__malloc_lock+0x8>)
 810587a:	f7ff bf7b 	b.w	8105774 <__retarget_lock_acquire_recursive>
 810587e:	bf00      	nop
 8105880:	10004b48 	.word	0x10004b48

08105884 <__malloc_unlock>:
 8105884:	4801      	ldr	r0, [pc, #4]	; (810588c <__malloc_unlock+0x8>)
 8105886:	f7ff bf76 	b.w	8105776 <__retarget_lock_release_recursive>
 810588a:	bf00      	nop
 810588c:	10004b48 	.word	0x10004b48

08105890 <_free_r>:
 8105890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8105892:	2900      	cmp	r1, #0
 8105894:	d044      	beq.n	8105920 <_free_r+0x90>
 8105896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810589a:	9001      	str	r0, [sp, #4]
 810589c:	2b00      	cmp	r3, #0
 810589e:	f1a1 0404 	sub.w	r4, r1, #4
 81058a2:	bfb8      	it	lt
 81058a4:	18e4      	addlt	r4, r4, r3
 81058a6:	f7ff ffe7 	bl	8105878 <__malloc_lock>
 81058aa:	4a1e      	ldr	r2, [pc, #120]	; (8105924 <_free_r+0x94>)
 81058ac:	9801      	ldr	r0, [sp, #4]
 81058ae:	6813      	ldr	r3, [r2, #0]
 81058b0:	b933      	cbnz	r3, 81058c0 <_free_r+0x30>
 81058b2:	6063      	str	r3, [r4, #4]
 81058b4:	6014      	str	r4, [r2, #0]
 81058b6:	b003      	add	sp, #12
 81058b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81058bc:	f7ff bfe2 	b.w	8105884 <__malloc_unlock>
 81058c0:	42a3      	cmp	r3, r4
 81058c2:	d908      	bls.n	81058d6 <_free_r+0x46>
 81058c4:	6825      	ldr	r5, [r4, #0]
 81058c6:	1961      	adds	r1, r4, r5
 81058c8:	428b      	cmp	r3, r1
 81058ca:	bf01      	itttt	eq
 81058cc:	6819      	ldreq	r1, [r3, #0]
 81058ce:	685b      	ldreq	r3, [r3, #4]
 81058d0:	1949      	addeq	r1, r1, r5
 81058d2:	6021      	streq	r1, [r4, #0]
 81058d4:	e7ed      	b.n	81058b2 <_free_r+0x22>
 81058d6:	461a      	mov	r2, r3
 81058d8:	685b      	ldr	r3, [r3, #4]
 81058da:	b10b      	cbz	r3, 81058e0 <_free_r+0x50>
 81058dc:	42a3      	cmp	r3, r4
 81058de:	d9fa      	bls.n	81058d6 <_free_r+0x46>
 81058e0:	6811      	ldr	r1, [r2, #0]
 81058e2:	1855      	adds	r5, r2, r1
 81058e4:	42a5      	cmp	r5, r4
 81058e6:	d10b      	bne.n	8105900 <_free_r+0x70>
 81058e8:	6824      	ldr	r4, [r4, #0]
 81058ea:	4421      	add	r1, r4
 81058ec:	1854      	adds	r4, r2, r1
 81058ee:	42a3      	cmp	r3, r4
 81058f0:	6011      	str	r1, [r2, #0]
 81058f2:	d1e0      	bne.n	81058b6 <_free_r+0x26>
 81058f4:	681c      	ldr	r4, [r3, #0]
 81058f6:	685b      	ldr	r3, [r3, #4]
 81058f8:	6053      	str	r3, [r2, #4]
 81058fa:	4421      	add	r1, r4
 81058fc:	6011      	str	r1, [r2, #0]
 81058fe:	e7da      	b.n	81058b6 <_free_r+0x26>
 8105900:	d902      	bls.n	8105908 <_free_r+0x78>
 8105902:	230c      	movs	r3, #12
 8105904:	6003      	str	r3, [r0, #0]
 8105906:	e7d6      	b.n	81058b6 <_free_r+0x26>
 8105908:	6825      	ldr	r5, [r4, #0]
 810590a:	1961      	adds	r1, r4, r5
 810590c:	428b      	cmp	r3, r1
 810590e:	bf04      	itt	eq
 8105910:	6819      	ldreq	r1, [r3, #0]
 8105912:	685b      	ldreq	r3, [r3, #4]
 8105914:	6063      	str	r3, [r4, #4]
 8105916:	bf04      	itt	eq
 8105918:	1949      	addeq	r1, r1, r5
 810591a:	6021      	streq	r1, [r4, #0]
 810591c:	6054      	str	r4, [r2, #4]
 810591e:	e7ca      	b.n	81058b6 <_free_r+0x26>
 8105920:	b003      	add	sp, #12
 8105922:	bd30      	pop	{r4, r5, pc}
 8105924:	10004b4c 	.word	0x10004b4c

08105928 <_init>:
 8105928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810592a:	bf00      	nop
 810592c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810592e:	bc08      	pop	{r3}
 8105930:	469e      	mov	lr, r3
 8105932:	4770      	bx	lr

08105934 <_fini>:
 8105934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105936:	bf00      	nop
 8105938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810593a:	bc08      	pop	{r3}
 810593c:	469e      	mov	lr, r3
 810593e:	4770      	bx	lr
